{
  "hash": "f03003b2657ecf090e71af556d71e192",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"Instructions pour le dépot sur le site web\"\nlang: fr\nauthor: \n  - Julie Aubert\n  - Julien Chiquet\n  - Marie-Pierre Etienne\nformat: html\ntoc: true\ndate: \"19 au 23 août 2024\"\n---\n\n\n\n\n\n## Cloner le dépôt git du bootcamp\n\nProtocole https :\n\n`git clone https://github.com/StateOfTheR/finistR2024.git`\n\nAvec clés SSH :\n`git clone git@github.com:git@github.com:StateOfTheR/finistR2024.git`\n\n### Pour plus d'infos sur l'initialisation de git, la gestion des dépôts distants ...\n(Lien vers une doc complète)[https://docs.github.com/fr/get-started/getting-started-with-git/managing-remote-repositories].\n\n## Processus de mise en commun des ateliers\n\n* Créer une branche propre à l'atelier nommée explicitement `mon_nom_parlant` et basculer dessus\n\n` git checkout -b mon_nom_parlant` \n\n*  Créer un fichier Rmarkdown de restitution de votre atelier `fichier.Rmd` dans votre branche\n\n` git add fichier.Rmd `\n\n` git commit -m \"restitution atelier\" `\n\n* Pousser vos modifications sur le serveur distant\n \n` git  push --set-upstream origin mon_nom_parlant` ou \n\n` git  push ` \n\n* Faire une pull request (PR) sur github\n\n- indiquer dans le message de la PR la liste des packages ou autres besoins\n\n* Quand la PR passe les tests, demander le merge.\n\n- corriger les erreurs éventuelles dans la compilation du Rmarkdown\n- les admins peuvent avoir à mettre à jour l'image docker\n\n\n## Détails du fonctionnement\n\n\n### Le docker \n\n(Lien vers la fiche pense-bête)[https://www.docker.com/sites/default/files/d8/2019-09/docker-cheat-sheet.pdf]\n\nPour créer des images Docker en local sur sa machine, voici une liste de commandes utiles\n\n- Pour construire une image docker, il faut créer un fichier Dockerfile qui contient la recette du Docker. Pour ce site le ficher Dockerfile a la forme suivante\n\n\n\n\n::: {.cell}\n::: {.cell-output .cell-output-stdout}\n\n```\n\nFROM rocker/geospatial:4.4\nRUN export DEBIAN_FRONTEND=noninteractive; apt-get -y update \\\n && apt-get install -y pandoc \\\n    pandoc-citeproc\nRUN R -e \"install.packages('remotes')\"\nRUN R -e \"install.packages('microbenchmark')\"\nRUN R -e \"install.packages('purrr')\" # map function\nENV R_CRAN_WEB=\"https://cran.rstudio.com/\"\nRUN R -e \"install.packages('cowplot')\" # GET function\nRUN R -e \"install.packages('torch')\"\nRUN R -e \"torch::install_torch(type = 'cpu')\"\nRUN R -e \"install.packages('PLNmodels')\"\nRUN R -e \"install.packages('torchvision')\"\n\nRUN apt-get update \\\n && apt-get install -y --no-install-recommends \\\n  mercurial gdal-bin libgdal-dev gsl-bin libgsl-dev \\\n  libc6-i386\n\nRUN R -e \"install.packages('reticulate')\"\nRUN R -e \"install.packages(c('inlabru', 'lme4', 'ggpolypath', 'RColorBrewer', 'geoR'))\"\nRUN R -e \"install.packages(c('poissonreg'))\"\nRUN apt-get install -y --no-install-recommends unzip python3-pip dvipng pandoc wget git make python3-venv && \\\n    pip3 install jupyter jupyter-cache flatlatex matplotlib && \\\n    apt-get --purge -y remove texlive.\\*-doc$ && \\\n    apt-get clean\nRUN R -e  \"remotes::install_github('Yu-Group/simChef')\"\n```\n\n\n:::\n:::\n\n\n\n\npuis demander la construction  de  l'image à l'aide de la commande\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n docker build -t nom_depot_dockerhub/nom_du_repo:version  . ## avec un nom\n```\n:::\n\n\n\n\net enfin pousser sur  Dockerhub\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n docker push nom_depot_dockerhub/nom_du_repo:version\n```\n:::\n\n\n\n\n\n### Les actions\n\nDans les action de Github, on peut spécifier un container docker à utiliser, c'est ce que fait la ligne container du fichier d'action suivant, utiliser pour créer ce site web\n\n\n\n\n\n::: {.cell}\n::: {.cell-output .cell-output-stdout}\n\n```\nname: website\non:\n  push:\n    branches:\n      - main\n\njobs:\n  build:\n    name: Build website with rmarkdown and Julia\n    runs-on: ubuntu-latest\n    container: stateofther/r-finistr2024:0.1\n\n    steps:\n      - name: Checkout repository\n        uses: actions/checkout@v2\n      - name: Install Julia\n        uses: julia-actions/setup-julia@v1\n        with:\n          version: '1.8' # Specify the Julia version you want to use\n      - name: Install Julia Packages\n        run: |\n          julia -e 'using Pkg; Pkg.add([\"DataFrames\", \"DataFramesMeta\", \"RDatasets\", \"CairoMakie\", \"Gadfly\", \"Compose\", \"AlgebraOfGraphics\"])'\n      - name: Additional R packages\n        run: |\n          Rscript -e \"install.packages(c('tictoc', 'nimble', 'ggmcmc', 'compareMCMCs', 'nimbleHMC', 'mvtnorm'))\"\n      - name: Additional Python packages\n        run: |\n          pip install torch torch_geometric \n          pip install numpy==1.26.1\n          pip install scikit-learn scikit-network networkx matplotlib tqdm openpyxl pandas\n      - name: Generate slides\n        run: \"quarto render\"\n      - name: GitHub Pages action\n        uses: peaceiris/actions-gh-pages@v3\n        with:\n          github_token: ${{ secrets.GITHUB_TOKEN }}\n          publish_dir: ./_site\n```\n\n\n:::\n:::\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}