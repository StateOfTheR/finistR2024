{
  "hash": "bfe994ba1d3a047ad469ab28843af484",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"My Simulation\"\nauthor: \"My Name\"\ndate: \"2024-08-24\"\noutput: rmarkdown::html_vignette\n---\n\n\n\n\nThis is a `knitr` report generated by the `simulator` to describe your simulation.\nKnitting this file will rerun the simulation if any of the code files have been\nmodified since the `simulation` object was last created.\n\n# Main simulation\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(simulator)\n```\n:::\n\n::: {.cell}\n\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nname_of_simulation <- \"normal-mean-test\"\nsim <- new_simulation(name = name_of_simulation,\n                      label = \"Test of mean\") %>%\n  generate_model(make_my_model_normal, seed = 13,\n                 n = 20,\n                 mu2 = as.list(seq(0,10,by=0.5)),\n                 mu1=0,\n                 sig=5,\n                 vary_along=\"mu2\")                 %>%\n  simulate_from_model(nsim = 1000) %>%\n  run_method(list(t_test)) %>%\n  evaluate(list(pval_loss))\n```\n:::\n\n::: {.cell}\n\n:::\n\n\nWe can make plots.\n\n\n::: {.cell}\n\n:::\n\n\nAnd tables too.\n\n\n\n```{.r .cell-code}\ntabulate_eval(sim, \"p_value\", output_type = \"markdown\",\n              format_args = list(digits = 5))\n```\n\n<!-- generated by simulator on Sat Aug 24 10:58:39 2024. -->\n\n\nTable: A comparison of Mean pval<0.05 (averaged over 1000 replicates).\n\n|       |Mean equality test |\n|:------|:------------------|\n|normal |0.055 (0.0072130)  |\n|normal |0.067 (0.0079103)  |\n|normal |0.100 (0.0094916)  |\n|normal |0.143 (0.0110758)  |\n|normal |0.226 (0.0132325)  |\n|normal |0.327 (0.0148422)  |\n|normal |0.441 (0.0157088)  |\n|normal |0.559 (0.0157088)  |\n|normal |0.671 (0.0148654)  |\n|normal |0.783 (0.0130415)  |\n|normal |0.860 (0.0109782)  |\n|normal |0.907 (0.0091889)  |\n|normal |0.955 (0.0065588)  |\n|normal |0.982 (0.0042064)  |\n|normal |0.992 (0.0028185)  |\n|normal |0.995 (0.0022316)  |\n|normal |0.999 (0.0010000)  |\n|normal |0.999 (0.0010000)  |\n|normal |0.999 (0.0010000)  |\n|normal |1.000 (0.0000000)  |\n|normal |1.000 (0.0000000)  |\n\n```{.r .cell-code}\nplot_eval_by(sim, \"p_value\", varying = \"mu2\", main = \"Power curve with mu1=0 and varying mu2\")\n```\n\n![](writeup_files/figure-html/unnamed-chunk-6-1.png){width=672}\n\n\n# Components\n\n## Models\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmake_my_model_normal <- function(n, mu1, mu2, sig) {\n  new_model(\n    name = \"normal\", \n    label = sprintf(\"normal\"), \n    params = list(n = n, mu1 = mu1, mu2 = mu2, sig = sig),\n    simulate = function(n, mu1,mu2, sig, nsim) {\n      # this function must return a list of length nsim\n      x1 <- mu1 + sig * matrix(rnorm(nsim * n), n, nsim)\n      x2 <- mu2 + sig * matrix(rnorm(nsim * n), n, nsim)\n      li1 <- split(x1, col(x1))\n      li2 <- split(x2, col(x2))\n      lapply(1:nsim, function(i) {\n        cbind(li1[[i]], li2[[i]])\n      })\n    }\n  )\n}\n```\n:::\n\n\n## Methods\n\n\n::: {.cell}\n\n```{.r .cell-code}\nt_test <- new_method(\n  name = \"t-test\", \n  label = \"Mean equality test\",\n  method = function(model, draw) {\n    list(pvalue = t.test(draw[, 1], draw[, 2], paired = TRUE)$p.value)\n  }\n)\n```\n:::\n\n\n## Metrics\n\n\n::: {.cell}\n\n```{.r .cell-code}\npval_loss <- new_metric(\n  name = \"p_value\", \n  label = \"pval<0.05\",\n  metric = function(model, out) {\n    mean(out$pvalue < 0.05)\n  }\n)\n```\n:::\n\n\n\n# Conclusion\n\nTo cite the `simulator`, please use\n\n\n\n```{.r .cell-code}\ncitation(\"simulator\")\n```\n\nTo cite package 'simulator' in publications use:\n\n  Bien J (2016). \"The simulator: An Engine to Streamline Simulations.\"\n  _arXiv:1607.00021_. <https://arxiv.org/abs/1607.00021>.\n\nA BibTeX entry for LaTeX users is\n\n  @Article{,\n    title = {The {simulator}: An Engine to Streamline Simulations},\n    author = {Jacob Bien},\n    year = {2016},\n    url = {https://arxiv.org/abs/1607.00021},\n    journal = {arXiv:1607.00021},\n  }\n",
    "supporting": [
      "writeup_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}