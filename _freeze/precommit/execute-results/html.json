{
  "hash": "57ad147b6beccf57fe435bc96ef825eb",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"Pre-commit pour R\"\nformat: html\ntoc: true\nauthor: \n  - Julie Aubert\n  - Annaïg De Walsche\n  - Louis Lacoste\n  - François Victor\ndate: last-modified\nexecute: \n  eval: false\n---\n\n\n## Pourquoi pre-commit ?\n\nPre-commit permet de faciliter les tâches annexes au développement de notre code en les externalisant en dehors de notre dépôt. Pre-commit s'assure que notre code est propre avant chaque commit, i.e :\n\n-   Les fichiers de code ont un style cohérent, et ne contiennent pas d'erreurs de syntaxe simples (par exemple, oubli de crochets).\n\n-   Dans le cas d'un package, la documentation (fichiers .rd dans le dossier man/) est à jour et sans erreur d'orthographe.\n\n## Installation\n\nL'installation est en deux étapes :\n\n1.  Installation de l'outil [pre-commit](https://pre-commit.com/) écrit en python en utilisant :\n\n\n::: {.cell}\n\n```{.bash .cell-code}\npip install pre-commit\n```\n:::\n\n\n2.  Installation du [package R `{precommit}`](https://cran.r-project.org/web/packages/precommit/index.html) en utilisant :\n\n\n::: {.cell}\n\n```{.r .cell-code}\ninstall.packages(\"precommit\")\n```\n:::\n\n\n## Dans notre projet R\n\nUne fois pre-commit installé, on peut se rendre dans le répertoire de notre Rprojet versionné avec Git, et exécuter la commande R:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nprecommit::use_precommit()\n```\n:::\n\n\nCette commande créer le fichier de configuration `.pre-commit-config.yaml`, et prépare le répertoire à utiliser pre-commit. Une page web d'authentification GitHub s'ouvre, elle n'est utile que pour mettre à jour automatiquement les versions de *hooks* que l'on utilise. On peut l'ignorer sans problèmes.\n\nMais il faut alors penser à les mettre à jour manuellement de temps à autre:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nprecommit::autoupdate()\n```\n:::\n\n\n## Configuration de pre-commit pour notre projet R\n\nLe fichier de configuration par défaut est :\n\n\n::: {.cell}\n\n```{.yaml .cell-code}\n# All available hooks: https://pre-commit.com/hooks.html\n# R specific hooks: https://github.com/lorenzwalthert/precommit\nrepos:\n-   repo: https://github.com/lorenzwalthert/precommit\n    rev: v0.4.3\n    hooks: \n    -   id: style-files\n        args: [--style_pkg=styler, --style_fun=tidyverse_style] \n    -   id: roxygenize #uniquement lorsque le projet est un package\n    -   id: spell-check\n        exclude: >\n          (?x)^(\n          .*\\.[rR]|\n          .*\\.feather|\n          .*\\.jpeg|\n          .*\\.pdf|\n          .*\\.png|\n          .*\\.py|\n          .*\\.RData|\n          .*\\.rds|\n          .*\\.Rds|\n          .*\\.Rproj|\n          .*\\.sh|\n          (.*/|)\\.gitignore|\n          (.*/|)\\.gitlab-ci\\.yml|\n          (.*/|)\\.lintr|\n          (.*/|)\\.pre-commit-.*|\n          (.*/|)\\.Rbuildignore|\n          (.*/|)\\.Renviron|\n          (.*/|)\\.Rprofile|\n          (.*/|)\\.travis\\.yml|\n          (.*/|)appveyor\\.yml|\n          (.*/|)NAMESPACE|\n          (.*/|)renv/settings\\.dcf|\n          (.*/|)renv\\.lock|\n          (.*/|)WORDLIST|\n          \\.github/workflows/.*|\n          data/.*|\n          )$\n    -   id: lintr\n    -   id: readme-rmd-rendered\n    -   id: parsable-R\n    -   id: no-browser-statement\n    -   id: no-debug-statement\n-   repo: https://github.com/pre-commit/pre-commit-hooks\n    rev: v4.6.0\n    hooks: \n    -   id: check-added-large-files\n        args: ['--maxkb=200']\n    -   id: end-of-file-fixer\n        exclude: '\\.Rd'\n-   repo: https://github.com/pre-commit-ci/pre-commit-ci-config\n    rev: v1.6.1\n    hooks:\n    # Only required when https://pre-commit.ci is used for config validation\n    -   id: check-pre-commit-ci-config\n-   repo: local\n    hooks:\n    -   id: forbid-to-commit\n        name: Don't commit common R artifacts\n        entry: Cannot commit .Rhistory, .RData, .Rds or .rds.\n        language: fail\n        files: '\\.(Rhistory|RData|Rds|rds)$'\n        # `exclude: <regex>` to allow committing specific files\n\nci:\n    autoupdate_schedule: monthly\n```\n:::\n\n\nCe fichier indique les *hooks* que l'on veut utiliser en précisant les répertoires Git où l'on peut les trouver.\n\nUn *hook* est un programme réalisant un test sur les fichiers que l'on souhaite *commit*. Celui-ci peut ou non modifier un fichier, mais renvoie un état : skipped, passed, failed... La déclaration de chaque *hook* selon le répertoire Git où il se trouve se fait en renseignant son id et d'éventuels arguments, le tout en respectant la syntaxe yaml, par exemple :\n\n\n::: {.cell}\n\n```{.yaml .cell-code}\n-   repo: https://github.com/lorenzwalthert/precommit #répertoire 1 des hooks\n    rev: v0.4.3 #version du répertoire 1s\n    hooks: \n    -   id: style-files #nom du hook 1\n        args: [--style_pkg=styler, --style_fun=tidyverse_style]  #arguments du hook 1\n    -   id: lintr #nom du hook 2\n-   repo: https://github.com/pre-commit/pre-commit-hooks #répertoire 2 des hooks\n    rev: v4.6.0\n    hooks: \n    -   id: check-added-large-files\n        args: ['--maxkb=200']\n```\n:::\n\n\nOn peut retrouver les *hooks* disponibles pour du code R [ici](https://lorenzwalthert.github.io/precommit/articles/available-hooks.html).\n\n## *Hook* `roxygenize`\n\nLe but du *hook* est de mettre à jour la documentation lorsqu'elle est modifiée dans le code source. Cela passe par l'utilisation de `{roxygen2}`.\n\nPar défaut la configuration du *hook* est la suivante:\n\n\n::: {.cell}\n\n```{.yaml .cell-code}\n-   id: roxygenize\n```\n:::\n\n\nSi le package utilise des dépendances, le *hook* va générer une erreur car il a besoin de connaitre les dépendances pour mettre à jour la documentation. Le package `{precommit}` propose une fonction renvoyant le texte à ajouter dans le fichier de configuration si il détecte que les dépendances ne sont pas fournies :\n\n\n::: {.cell}\n\n```{.r .cell-code}\nprecommit::snippet_generate('additional-deps-roxygenize')\n```\n:::\n\n\nPar exemple :\n\n\n::: {.cell}\n::: {.cell-output .cell-output-stdout}\n\n```\nGenerating snippet using CRAN versions. If you need another source, specify with syntax that `renv::install()` understands (see examples in help file). \n\n    -   id: roxygenize\n        # roxygen requires loading pkg -> add dependencies from DESCRIPTION\n        additional_dependencies:\n        -    rlang\n        -    stringr\n\n• Replace the `id: roxygenize` key in `.pre-commit-config.yaml` with the above code.\nℹ Note that CI services like <pre-commit.ci> have build-time restrictions and installing the above dependencies may exceed those, resulting in a timeout. In addition, system dependencies are not supported for <pre-commit.ci>. See `vignette('ci', package = 'precommit')` for details and solutions.\n```\n\n\n:::\n:::\n\n\nIl faut alors ajouter les dépendances fournies dans le *hook* `roxygenize` du fichier de configuration :\n\n\n::: {.cell}\n\n```{.yaml .cell-code}\n-   id: roxygenize\n        # roxygen requires loading pkg -> add dependencies from DESCRIPTION\n        additional_dependencies:\n        -    rlang\n        -    stringr\n```\n:::\n\n\n\n:::{.callout-tip title=\"Pour les packages hors du CRAN\"}\n\nPar défaut si l'on met le nom d'un package le *hook* suppose qu'il est sur le CRAN. S'il ne l'est pas, il faut donner un format particulier, par exemple :\n\n-   pour GitHub : `NomDuDeveloppeur/NomDuPackage` (pour un répertoire dont l'url est le suivant : https://github.com/NomDuDeveloppeur/NomDuPackage)\n\n-   pour BioConductor : `bioc::NomDuPackage`\n\n-   pour un URL vers le package au format archive : `url::https://sitedupackage.example.com/nomdupackage.zip`\n\nPour plus de détails voir [ici](https://remotes.r-lib.org/articles/dependencies.html) \n:::\n\n## Désactiver pre-commit\n\nPour désactiver pre-commit de son projet R, il suffit d'exécuter la commande suivante qui supprime le fichier .git/hooks/pre-commit :\n\n\n::: {.cell}\n\n```{.bash .cell-code}\nrm .git/hooks/pre-commit\n```\n:::\n\n\nNB: Cette commande ne supprime pas le fichier de configuration `.pre-commit-config.yaml` permettant de sauvegarder nos configurations.\n\nPour ré-activer pre-commit, il suffit d'utiliser la commande suivante dans le répertoire du projet :\n\n\n::: {.cell}\n\n```{.r .cell-code}\nprecommit::use_precommit()\n```\n:::\n\n\n## Conseils d'utilisation\n\nPre-commit peut s'exécuter depuis la fenêtre Git de Rstudio. Cependant le rendu graphique des messages de pre-commit n'est pas très optimal, nous conseillons d'exécuter les commandes git sur le terminal bash de Rstudio.\n\n::: {.callout-warning title=\"Ne pas interrompre le processus de pre-commit\"}\nS'il y a d'autres fichiers modifiés mais non ajoutés au commit en cours, pre-commit les met de côté (*stash*) pendant la durée d'execution des *hooks*, et les remet dans l'arbre de travail (*un-stash*) une fois le l'execution terminée. Interrompre avant la fin, empêche pre-commit de les remettre.\n\nIl est toujours possible d'utiliser `git apply` sur le fichier de patch se trouvant dans le dossier `.cache/pre-commit/` le plus récent.\n:::\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}