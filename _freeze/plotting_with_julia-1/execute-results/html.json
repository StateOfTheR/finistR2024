{
  "hash": "442c56c4a4065c9988971c07df29b2f5",
  "result": {
    "engine": "jupyter",
    "markdown": "---\ntitle: Using Julia as a R user\nengine: julia\n---\n\n**Authors:** \n- Caroline Cognot\n- Florian Teste\n\n\n# 0: Data to use for the tutorial\n\n\nWe can use the PalmerPenguins dataset (designed for Julia)\nOR\nUse the package RDatasets to use our favorite iris dataset.\n\n\n\n```{julia}\nusing Pkg\n# Pkg.add(\"DataFrames\")\n# Pkg.add(\"DataFramesMeta\")\n# Pkg.add(\"PalmerPenguins\")\n\n\nusing DataFrames\nusing DataFramesMeta\n\nusing PalmerPenguins\n\n\npenguins = dropmissing(DataFrame(PalmerPenguins.load()))\n```\n\n```{julia}\n# Pkg.add(\"RDatasets\")\n\nusing RDatasets\niris = dataset(\"datasets\",\"iris\")\n```\n\n\n\n\n# Plots \n\n## list of available packages\n\nList of packages for plots :\n\n-   [**Plots**]\n-   [**StatsPlots**] - enriches the Plots package\n-   [**Makie**]\n-   [**TidierPlots**]\n-   [**AlgebraOfGraphics**] uses Makie\n-   [**GadFly**]\n\n\nOther packages are available, see (https://discourse.julialang.org/t/comparison-of-plotting-packages/99860/2)\n\nWe tried Makie,TidierPlots,AlgebraOfGraphics and GadFly.\n\n\n---\nImportant note : in the following document, every time we used a function, it was called using *PackageName.functionName*. This is necessary because we are using packages importing functions of the same name. For example *plot* is shared between most packages.\n\nFunctions with names that are not shared can be called by their name only.\n\n# 1. TidierPlots\n\nhttps://tidierorg.github.io/TidierPlots.jl/latest/\n\n\nThe goal here is to be able to do the same sort of graphics as when using R ggplot2, that we all love.\n\nInstall the package using ], then add TidierPlots. It takes a long time.\n\nThe package supports ggplot(), and :\n\n- some Geoms \n- some themes, with the default being the ggplot2 theme\n- scale\\_colour\\_manual and discrete\n- facetting with wrap and grid\n- scale, labs,lims\n\nTidierPlots uses AlgebraOfGraphics, which uses Makie. \n\nExample using a Julia dataframe :\nÂ you need to run the  PalmerPenguins.load() in the console when doing it for the first time\nand press y when it asks if you want the data downloaded.\n\nIssues during the work : it stopped working. First we looked if the version was good.\n\n-  ] status TidierPlots. \n- ] update TidierPlots : its not better\n- remove it : rm TidierPlots\n- install from github : \n\nThere are many dependances, we update all packages before.\n- using Pkg\n- Pkg.update()\n\n- Pkg.add(\"TidierPlots\")\n\n\nusing TidierPlots\n\n\ng=TidierPlots.ggplot(data = penguins) + \n    geom_bar(@aes(x = species)) +\n    labs(x = \"Species\");\ng\n\n### Combining plots\n\nJust like the *patchwork* package, we can combine plots, with + and | for horizontal and / for vertical.\n\n(g +g)\n\ng/(g+g)\n\ng/g +g\n\n((g + g + g) | g) / (g / g)\n\nWarning ; the *aes* syntax exactly as ggplot2 does not exist. It has many equivalents\n\n- @aes(x=x,y=y)\n- @es(x=x,y=y)\n- aes(x=:x,y=:y)\n- aes(x=\"x\",y=\"y\")\n\ng1=ggplot(penguins, @aes(x = bill_length_mm, y = bill_depth_mm, color = species)) +\n    geom_point()\ng2=ggplot(penguins, @aes(x=:bill_length_mm, y=:bill_depth_mm, color=:species)) +\ngeom_point()\ng3=ggplot(penguins, aes(x = \"bill_length_mm\", y = \"bill_depth_mm\", color = \"species\")) +\ngeom_point()\ng4=ggplot(penguins, @es(x = bill_length_mm, y = bill_depth_mm, color = species)) +\ngeom_point()\n\ng1/g2+g3/g4\n\nThe different syntaxes gave the same results !\nThe rest of the code is exactly the same as in ggplot2.\n\n### Issues\n\n- Package still not stable. It downgrades others when using add, and the GitHub version has unresolved issues.\n- It worked at some point (20/08/2024 afternoon) and then in the same evening stopped.\n\n# 2: Makie\n\nhttps://docs.makie.org/v0.21/\nhttps://github.com/MakieOrg/Makie.jl\n\n\n- Date of today : 22/08/2024\n- Last release : 19/08/2024\n- Last change to the GitHub repository : 20/08/2024\n\nBackend packages : GLMakie, WGLMakie, CairoMakie, RPRMakie.\n\n## 2.1 Installation : choose a backend and install it.\n\n- GLMakie (OpenGL based, interactive)\n- CairoMakie (Cairo based, static vector graphics)\n- WGLMakie (WebGL based, displays plots in the browser)\n- RPRMakie (Experimental ray-tracing using RadeonProRender)\n\nThen install it using Julia's package manager Pkg:\n\n```{julia}\nusing Pkg\n# Pkg.add(\"CairoMakie\")\n```\n\nThere's no need to install Makie.jl separately, it is re-exported by each backend package.\n\n\n## 2.2 Basic plotting\n\nlines(x,y) \nscatter(x,y) \n\n```{julia}\nusing CairoMakie\n\n```\n\nMakie looks more like base R plots.\nWe did not have the time to finish this part.\n\n# 3: Gadfly\n\nhttps://gadflyjl.org/stable/\n\nGadfly can be installed using in the REPL\njulia> ]add Gadfly\n\nGadfly is based on R ggplot2 and supports DataFrames. As opposed to ggplot2, it does not *only* support DataFrames, you can also use vectors as arguments.\n\nThe GitHub page is there : https://github.com/GiovineItalia/Gadfly.jl/tree/master\n\n- Last release : 2021\n- Last change to the GitHub repository : 5 months ago (so, early 2024)\n\n```{julia}\n# Pkg.add(\"Gadfly\")\n\nusing Gadfly\n```\n\n## 3.1 Basic plots \n\n\nThe basic plotting function is also called plot.\nThe syntax when using a DataFrame is as follows :\n\nplot(data::AbstractDataFrame, elements::Element...; mapping...)\n\nIt is not exactly the same as the ggplot2 syntax, but close.\n\nEvery information goes in the same plot() function call.\n\nhstack(plots) stacks the plots side by side, vstack stacks vertically.\n\n### 3.1.1 Geom(s) :\n\n- The default geometry is Geom.point.\n- others : https://gadflyjl.org/stable/gallery/geometries/ (with examples), or https://gadflyjl.org/stable/lib/geometries/ for all possibilities\n- You can add as much Geom as you want separated by \",\"\n\n```{julia}\np1 = Gadfly.plot(penguins, x=:bill_length_mm, y=:bill_depth_mm,color=:species, Geom.point);\np2 = Gadfly.plot(penguins, x=:bill_length_mm, y=:bill_depth_mm,color=:species, Geom.point,Geom.line);\nhstack(p1,p2)\n```\n\nSaving a plot is done using the *draw* function.\n\nNotes :\n\n- default has no background.\n\nimg = SVG(\"penguin_plot.svg\", 14cm, 8cm)\ndraw(img, p1)\n\nimg = SVG(\"penguin_plot.png\", 14cm, 8cm)\ndraw(img, p2)\n\nWhen using arrays instead of DataFrames, instead, use the data directly. However, the automatic axes do not exist and we have to add them manually using Guide.\n\n### 3.1.2 Guides:\n\n- For adding informations on the plot.\n- https://gadflyjl.org/stable/gallery/guides/ for examples, https://gadflyjl.org/stable/lib/guides/ for an exhaustive list\n\nExample : same graph usign first arrays, then the DataFrame directly.\n\n```{julia}\nbill_length=penguins.bill_length_mm\nbill_depth=penguins.bill_depth_mm\nspecies = penguins.species\np1 = Gadfly.plot(x=bill_length,y=bill_depth,color=species, Geom.point,\nGuide.xlabel(\"bill length\"),Guide.ylabel(\"bill depth\"),\nGuide.colorkey(title=\"Species\",labels=[\"my favorite specie\",\"others\",\"another one\"]),\nGadfly.Theme(key_position=:inside),Guide.title(\"I love penguins\"));\np2 = Gadfly.plot(penguins,x=:bill_length_mm,y=:bill_depth_mm,color=:species, Geom.point,\nGuide.colorkey(title=\"Species\",labels=[\"my favorite specie\",\"others\",\"another one\"]),\nGadfly.Theme(key_position=:inside),Guide.title(\"I love penguins more\"));\nhstack(p1,p2)\n```\n\n### 3.1.3 Layers\n\nLayers allow several instructions in the same plot() call.\n\nExample of layers using the penguins dataframe :\n\n```{julia}\npenguinm = @subset(penguins, :sex .== \"male\")\npenguinf = @subset(penguins, :sex .== \"female\")\n\np3 = Gadfly.plot(penguinm, x=:bill_length_mm, y=:bill_depth_mm,color=[\"male\"],shape=:species, Geom.point,\n    layer(penguinf,x=:bill_length_mm,y=:bill_depth_mm,color=[\"female\"],shape=:species,Geom.point));\n    p3\n```\n\nColor, and other aesthetics, can also be mapped by using arrays with group labels or functional types e.g. [\"group label\"] or [colorant\"red\"]. [\"Group labels\"] are added to the key.\n[colorant\"red\"] are not added to the key, and not present in the legend of the plot.\n\n\n```{julia}\n#example from Gadfly tutorial :\ny1 = [0.1, 0.26, NaN, 0.5, 0.4, NaN, 0.48, 0.58, 0.83]\nGadfly.plot(x=1:9, y=y1, Geom.line, Geom.point,\n        color=[\"Item 1\"], linestyle=[:dash], size=[3pt],\n    layer(x=1:10, y=rand(10), Geom.line, Geom.point,\n        color=[\"Item 2\"], size=[5pt], shape=[Shape.square]),\n    layer(x=1:10, y=rand(10), color=[colorant\"hotpink\"],\n        linestyle=[[8pt, 3pt, 2pt, 3pt]], Geom.line))\n```\n\n### 3.1.4 Scales \n\nhttps://gadflyjl.org/stable/tutorial/#Continuous-Scales\nhttps://gadflyjl.org/stable/tutorial/#Discrete-Scales\n\nScale can be supplied with Scale.myscale for continuous and discrete scales.\n\n## 3.2 Compositing\n\nhttps://gadflyjl.org/stable/man/compositing/#Compositing\n\nWith ggplot2, we also like using faceting and grids to represent different data. \n\n### 3.2.1 Grids using Geom.subplot_grid\n\nFor grids, we have to use \"xgroup\" and/or \"ygroup\" and \"Geom.subplot_grid(Geom.mygeomIwant)\" instead of just Geom.mygeomIwant.\nThis does the work of +facet_grid().\n\n\n```{julia}\n# Pkg.add(\"Compose\")\n\nusing Compose\np = Gadfly.plot(penguins, x=:bill_length_mm, y=:bill_depth_mm,xgroup=:species,ygroup=:sex,\n shape=:sex, color=:island, Geom.subplot_grid(Geom.point),alpha=[0.5]);\np\n```\n\nAdditional Guides can be placed inside the Geom.subplot_grid :\n\n```{julia}\np4 = Gadfly.plot(penguins, x=:bill_length_mm, y=:bill_depth_mm,xgroup=:species,color=:sex,\n shape=:sex,\n  Geom.subplot_grid(Geom.point,Guide.ylabel(orientation=:vertical)),\n  alpha=[0.5],Guide.title(\"I love penguins even more\"));\np4\n```\n\n### 3.2.2 Stacks\n\nstackings used different plots and hstack,vstack or gridstack.\n\nvstack(...) puts all argument on top of each other.\nhstack(...) puts them side by side.\ngridstack(...) works with a matrix of plots such as [ p1 p2;p3 p4]\ncombining vstack and pstack also works to define different arrangements.\na blank panel can be used using only plot()\n\n```{julia}\nvstack(hstack(p1,p2,p3,Gadfly.plot()),hstack(p4))\n```\n\n## 3.3 Conclusion on this package\n\nThe documentation is rich with examples from the RDatasets. \nThere are replacements for common ggplot2 functions. The library lists all available functions, Geom, Guides, Statistics, Coordinates, Scales and Shape available.\n\n\n# 4 AlgebraOfGraphics\n\n\"Define an algebra of graphics based on a few simple building blocks that can be combined using + and *. Still somewhat experimental, may break often.\"\n\nLast release : 21/08/2024\nLast GitHub activity : 21/08/2024\n\nThis package relies on Makie.\n\nWarning : *draw* of AlgebraOfGraphics is not compatible with *draw* of Combine loaded earlier in the notebook.\n\n```{julia}\n# import Pkg; Pkg.add(\"AlgebraOfGraphics\")\nimport AlgebraOfGraphics as AOG\nusing CairoMakie, PalmerPenguins\n\npenguins = dropmissing(DataFrame(PalmerPenguins.load()))\nfirst(penguins, 6)\n```\n\n```{julia}\nAOG.set_aog_theme!()\n\n\naxis = (width = 225, height = 225)\npenguin_frequency = AOG.data(penguins) * AOG.frequency() * AOG.mapping(:species)\n\nAOG.draw(penguin_frequency; axis = axis)\n```\n\nSaving a plot :\n\nfg = AOG.draw(penguin_frequency; axis = axis)\nsave(\"figure.png\", fg, px_per_unit = 3) # save high-resolution png\n\n## 4.1 First basic plotting\n\nAlgebraOfGraphics relies on the * and + operations to combine plotting elements.\n\nThe plot object is defined through different blocks :\n\n- data() to declare the data used (DataFrame)\n- mapping() to declare the aesthetics (aes in ggplot2 or TidierPlots)\n    - if classic plot with x,y : you can use mapping(x=:truc1,truc2) OR mapping (truc1,truc2) but not mapping(x=:truc1,y=:truc2).\n- visual()\n- analyses \nThe resulting plot is then shown using draw(plt).\n\n\n```{julia}\npenguin_bill = AOG.data(penguins) * AOG.mapping(:bill_length_mm, :bill_depth_mm,color=:species)\nAOG.draw(penguin_bill; axis = axis)\n```\n\nTo rename x and y axis, add *=> \"name of axis\"*\n\n```{julia}\npenguin_bill = AOG.data(penguins) * AOG.mapping(\n    :bill_length_mm  => \"bill length (mm)\",\n    :bill_depth_mm  => \"bill depth (mm)\",\n)\nAOG.draw(penguin_bill; axis = axis)\n```\n\nTo apply a transformation to the values (mm to cm in this example), add *=> (t->transformation(t))*\n\n```{julia}\npenguin_bill = AOG.data(penguins) * AOG.mapping(\n    :bill_length_mm => (t -> t / 10) => \"bill length (cm)\",\n    :bill_depth_mm => (t -> t / 10) => \"bill depth (cm)\",\n)\nAOG.draw(penguin_bill; axis = axis)\n```\n\nTo add information, take your first plot object and add new mappings :\n\n```{julia}\nplt = penguin_bill * AOG.mapping(color = :species)\nAOG.draw(plt; axis = axis)\n```\n\n## 4.2 Combining + and * \n\n- the * operator adds information on a plot\n- the + operator adds a new layer\n\nWe can use factorisation to combine the two operations. In this \"Algebra Of Graphics\", mapping() is the \"neutral\" element.\n\nThe linear regression removes the point plots.\nWe have to add it back on the plot, using + \n\nAnd factorise this :\n\n```{julia}\n\nplt = penguin_bill * (AOG.linear() + AOG.mapping()) * AOG.mapping(color = :species)\nAOG.draw(plt; axis = axis)\n```\n\n## 4.3 mapping()\n\nExamples of mappings :\n\n- color =: colorkey\n- col= :variablename; to use when gridding plots horizontally across variablename\n- row=: variablename; for gridding vertically\n- layout=:variablename \n\nIf no data was set, the entries of *mapping* have to be vectors.\n\nThe structure of the mapping is tied to the plotting function used with it (analysis), and the visual attribute. See documentations for more information.\n\n- *Pair* operator *=>* is used to rename columns, transform columns, map to a custom scale\n\n## 4.4 visual()\n\n\ndefault is the xy scatterplot.\ncommand : visual(plottype; attributes...)\n\nExamples :\n- BarPlot\n- Heatmap\n\n```{julia}\npenguin_bill = AOG.data(penguins) * AOG.mapping(\n    :body_mass_g,:species,color=:sex,layout=:island\n    \n)*AOG.visual(BarPlot)\nAOG.draw(penguin_bill; axis = axis)\n```\n\n## 4.5 analyses\nThey do more complicated operation.\nExamples :\n\n- histogram()\n- density()\n- frequency()\n- linear()\n- expectation() : compute expected value of last arg, conditionned on previous.\n- smooth\n- contours, filled_contours \n\n## 4.6 One last example\n\n\n\n\n\n```{julia}\n\npenguinsplot = AOG.data(penguins)*\n    AOG.mapping(:bill_length_mm,:bill_depth_mm,\n    col=:species,row=:sex,marker=:sex,color=:island)\nAOG.draw(penguinsplot)\n```\n\n",
    "supporting": [
      "plotting_with_julia-1_files/figure-html"
    ],
    "filters": [],
    "includes": {}
  }
}