[
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "FinistR : bootcamp R à Roscoff",
    "section": "",
    "text": "L’atelier Finist’R 2024 – ou bootcamp R du groupe State Of The R s’est déroulé à la station biologique de Roscoff du 19 au 23 août 2024.\nStateoftheR est un réseau du département MathNum INRAE.\n\n\nIl s’agit de la huitième édition de l’atelier Finist’R. Cet atelier réunit annuellement un groupe de chercheurs, ingénieurs, doctorants, tous utilisateurs avancés de R et développeurs de paquets pour explorer les dernières fonctionnalités du logiciel et les nouvelles pratiques de développement. A l’issue de l’atelier le collectif produit une synthèse de cette veille logiciel de manière à progresser collectivement dans l’utilisation du logiciel mais surtout dans la production d’outils statistiques à destination de la communauté.\nLe résultat de cette semaine est disponible sur cette page"
  },
  {
    "objectID": "index.html#où-quand",
    "href": "index.html#où-quand",
    "title": "FinistR : bootcamp R à Roscoff",
    "section": "",
    "text": "L’atelier Finist’R 2024 – ou bootcamp R du groupe State Of The R s’est déroulé à la station biologique de Roscoff du 19 au 23 août 2024.\nStateoftheR est un réseau du département MathNum INRAE.\n\n\nIl s’agit de la huitième édition de l’atelier Finist’R. Cet atelier réunit annuellement un groupe de chercheurs, ingénieurs, doctorants, tous utilisateurs avancés de R et développeurs de paquets pour explorer les dernières fonctionnalités du logiciel et les nouvelles pratiques de développement. A l’issue de l’atelier le collectif produit une synthèse de cette veille logiciel de manière à progresser collectivement dans l’utilisation du logiciel mais surtout dans la production d’outils statistiques à destination de la communauté.\nLe résultat de cette semaine est disponible sur cette page"
  },
  {
    "objectID": "index.html#programme",
    "href": "index.html#programme",
    "title": "FinistR : bootcamp R à Roscoff",
    "section": "Programme",
    "text": "Programme\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nGroupe 1\nGroupe 2\nGroupe 3\nGroupe 4\nGroupe 5\nGroupe 6\n\n\n\n\n\n\nLundi Après midi\nDébut en Python\n{{Simulator}}\nGraphical Neural Network\nNimble\nCalling C++ from Python\n\n\n\n\n\nMardi Matin 1\nCours future\n\n\n\n\n\n\n\n\n\nMardi Matin 2\nPackaging/Testing\nJulia\nDiffusion\nNimble\n\n\n\n\n\n\nMardi Après midi\nPackaging/Testing\nJulia\nDiffusion\nNimble\n\n\n\n\n\n\nMercredi Matin 1\nCours future\n\n\n\n\n\n\n\n\n\nMercredi Matin 2\nRestitution\n\n\n\n\n\n\n\n\n\nJeudi Matin\n{{Rix}}\nShiny Dev\nEnergy and Optimisation\nPINNS\nCTView Network\nEnseignement\n\n\n\n\nJeudi Après Midi\n{{Rix}}\nShiny Dev\nEnergy and Optimisation\nPINNS\nCTView Network\nEnseignement\n\n\n\n\nVendredi Matin\nRestitution"
  },
  {
    "objectID": "index.html#participants",
    "href": "index.html#participants",
    "title": "FinistR : bootcamp R à Roscoff",
    "section": "Participants",
    "text": "Participants\nBaptiste Alglave, Emré Anakok, Julie Aubert, Pierre Barbillon, Julien Chiquet, Lucia Clarotto, Caroline Cognot, Annaïg De Walsche, Sophie Donnet, Marie-Pierre Etienne, Armand Favrot, Hugo Gangloff, Pierre Gloaguen, Adeline Leclercq Samson, Tristan Mary-Huard, Cédric Midoux, Pierre Neuvial, Aymeric Stamm, Florian Teste, François Victor, Emily Walker."
  },
  {
    "objectID": "index.html#soutien",
    "href": "index.html#soutien",
    "title": "FinistR : bootcamp R à Roscoff",
    "section": "Soutien",
    "text": "Soutien"
  },
  {
    "objectID": "01_nimble.html",
    "href": "01_nimble.html",
    "title": "Introduction to nimble",
    "section": "",
    "text": "library(compareMCMCs)\nlibrary(ggmcmc)\nlibrary(mvtnorm)\nlibrary(nimble)\nlibrary(nimbleHMC)\nlibrary(tidyverse)"
  },
  {
    "objectID": "01_nimble.html#toy-model",
    "href": "01_nimble.html#toy-model",
    "title": "Introduction to nimble",
    "section": "Toy model",
    "text": "Toy model\nWe observe a sample \\(Y_1,\\dots, Y_n\\) of i.i.d. random variables having a negative binomial distribution with parameter \\(p \\in [0, 1]\\) and \\(\\theta \\in \\mathbb{R}_+^*\\). Formally, for \\(i \\in \\lbrace 1,\\dots, n\\rbrace\\), and \\(k \\in \\mathbb{N}\\), we have that:\n\\[\n\\mathbb{P}\\left(Y_i = k \\vert p, \\theta\\right) = \\frac{\\Gamma(k + \\theta)}{k!\\Gamma(\\theta)}p^\\theta(1 - p)^k\\,.\n\\]\nLet’s simulate data from this model with \\(n = 100, p = 0.4\\) and \\(\\theta = 12\\):\n\nset.seed(123) # For reproducibility\ndata_ex1 &lt;- rnbinom(n = 100, prob = 0.4, size = 12)\n\nOur goal is to estimate \\(p\\) and \\(\\theta\\) from these observations, within a Bayesian framework. For this tutorial, we assume the following priors: \\[\\begin{align*}\n\\theta &\\sim \\mathcal{E}(0.1)\\,,\\\\\np &\\sim \\mathcal{U}\\left[0, 1\\right]\\,.\\\\\n\\end{align*}\\]"
  },
  {
    "objectID": "01_nimble.html#defining-a-negative-binomial-model-in-nimble",
    "href": "01_nimble.html#defining-a-negative-binomial-model-in-nimble",
    "title": "Introduction to nimble",
    "section": "Defining a negative binomial model in nimble",
    "text": "Defining a negative binomial model in nimble\nBasically, as in BUGSor JAGS, the user’s role is to write the way to simulate the data and to give the prior distributions of the unkown. This is done within the nimbleCode function. This function will typically need to use built-in distributions that can be seen in the native documentation. All random variables must be assigned using the ~ symbol while deterministic quantities are assigned using the &lt;- or = as in R. Overall, the syntax is quite similar to R.\n\ncode_neg_bin &lt;- nimbleCode({\n  # Observation model\n  for(i in 1:n){# n is never defined before, it will be a constant\n    y[i] ~ dnbinom(prob, theta)\n  }\n  # PRIORS\n  prob ~ dunif(0, 1)\n  theta ~ dexp(0.1)\n})\n\nNote that in this code, nothing distinguishes observed data from unknown (or latent variables). The order of lines has no importance as everything will be compiled afterwards."
  },
  {
    "objectID": "01_nimble.html#defining-the-nimble-model",
    "href": "01_nimble.html#defining-the-nimble-model",
    "title": "Introduction to nimble",
    "section": "Defining the nimble model",
    "text": "Defining the nimble model\nNow that the code exists, we define the model. That’s here that data and constants will be provided. Typically, data are quantities which are considered as realizations of random variables in the code, while constants are not.\n\nmodel_neg_bin &lt;- nimbleModel(code = code_neg_bin, \n                             name = \"Negative binomial\", \n                             constants = list(n = length(data_ex1)),\n                             data = list(y = data_ex1))\n\nDefining model\n\n\nBuilding model\n\n\nSetting data and initial values\n\n\nRunning calculate on model\n  [Note] Any error reports that follow may simply reflect missing values in model variables.\n\n\nChecking model sizes and dimensions\n\n\n  [Note] This model is not fully initialized. This is not an error.\n         To see which variables are not initialized, use model$initializeInfo().\n         For more information on model initialization, see help(modelInitialization).\n\n\nNote that the code points that we did not give initial guesses (which would typically be starting points for MCMC sampling algorithms). We will do it in the sampling step."
  },
  {
    "objectID": "01_nimble.html#basic-mcmc-sampling",
    "href": "01_nimble.html#basic-mcmc-sampling",
    "title": "Introduction to nimble",
    "section": "Basic MCMC sampling",
    "text": "Basic MCMC sampling\nA direct way to proceed is to use the nimbleMCMC function that provides basic Metropolis Hastings within Gibbs sampling.\n\nposterior_samples_neg_bin &lt;- nimbleMCMC(model_neg_bin,\n                                        inits = list(prob = 0.5, theta = 1),\n                                        nchains = 2, # Number of independent chains \n                                        niter = 10000, # Number of it. per chain\n                                        thin = 10, # Thinning\n                                        nburnin = 1000) # Number of initial iterations discarded\n\nCompiling\n  [Note] This may take a minute.\n  [Note] Use 'showCompilerOutput = TRUE' to see C++ compilation details.\n\n\nrunning chain 1...\n\n\n|-------------|-------------|-------------|-------------|\n|-------------------------------------------------------|\n\n\nrunning chain 2...\n\n\n|-------------|-------------|-------------|-------------|\n|-------------------------------------------------------|"
  },
  {
    "objectID": "01_nimble.html#exploring-the-results",
    "href": "01_nimble.html#exploring-the-results",
    "title": "Introduction to nimble",
    "section": "Exploring the results",
    "text": "Exploring the results\nNow that we have performed MCMC sampling, we can access the results, which are lists (one element per chain) of matrices having \\(n_{\\text{iter}}\\) rows and \\(n_{\\text{parameters}}\\) columns.\n\nstr(posterior_samples_neg_bin)\n\nList of 2\n $ chain1: num [1:900, 1:2] 0.334 0.328 0.333 0.334 0.315 ...\n  ..- attr(*, \"dimnames\")=List of 2\n  .. ..$ : NULL\n  .. ..$ : chr [1:2] \"prob\" \"theta\"\n $ chain2: num [1:900, 1:2] 0.343 0.363 0.379 0.336 0.352 ...\n  ..- attr(*, \"dimnames\")=List of 2\n  .. ..$ : NULL\n  .. ..$ : chr [1:2] \"prob\" \"theta\"\n\n\nTo perform any post processing or plotting results, a bit of formatting must be done.\n\nformatted_results &lt;- imap_dfr(posterior_samples_neg_bin, \n                              function(x, nm){\n                                as.data.frame(x) %&gt;% \n                                  rowid_to_column(var = \"Iteration\") %&gt;% \n                                  mutate(Chain = str_remove(nm, \"chain\"))\n                              }) %&gt;% \n  pivot_longer(cols = -c(\"Iteration\", \"Chain\"),\n               names_to = \"Parameter\", \n               values_to = \"value\")\n\nWe can then perform usual plots.\n\nggplot(formatted_results) +\n  aes(x = Iteration,\n      y = value, color = Chain) +\n  facet_wrap(~Parameter, scales = \"free\") +\n  geom_line() +\n  labs(x = \"Sample ID\", y = \"Parameter value\", color = \"\")\n\n\n\n\n\n\n\n\n\nPackage for automatic formatting of results\nFor ggplotusers, the ggmcmc package provide useful tools for plots and formatting of MCMC outputs in R (not necessarily for the nimble package). This package is suited for any coda object, which is an historic format for MCMC outputs in R. We can specify during the sampling that we want outputs to be in coda.\n\nposterior_samples_neg_bin &lt;- nimbleMCMC(model_neg_bin, \n                                        nchains = 2, \n                                        niter = 10000, \n                                        thin = 10, \n                                        nburnin = 1000,\n                                        samplesAsCodaMCMC = TRUE)\n\nCompiling\n  [Note] This may take a minute.\n  [Note] Use 'showCompilerOutput = TRUE' to see C++ compilation details.\n\n\nrunning chain 1...\n\n\n|-------------|-------------|-------------|-------------|\n|-------------------------------------------------------|\n\n\nrunning chain 2...\n\n\n|-------------|-------------|-------------|-------------|\n|-------------------------------------------------------|\n\n\nWe can see that this modifies the type of output:\n\nstr(posterior_samples_neg_bin)\n\nList of 2\n $ chain1: 'mcmc' num [1:900, 1:2] 0.286 0.31 0.301 0.304 0.348 ...\n  ..- attr(*, \"dimnames\")=List of 2\n  .. ..$ : NULL\n  .. ..$ : chr [1:2] \"prob\" \"theta\"\n  ..- attr(*, \"mcpar\")= num [1:3] 1 900 1\n $ chain2: 'mcmc' num [1:900, 1:2] 0.398 0.412 0.419 0.429 0.433 ...\n  ..- attr(*, \"dimnames\")=List of 2\n  .. ..$ : NULL\n  .. ..$ : chr [1:2] \"prob\" \"theta\"\n  ..- attr(*, \"mcpar\")= num [1:3] 1 900 1\n - attr(*, \"class\")= chr \"mcmc.list\"\n\n\nNow, we can use the ggsfunction which performs the post processing that we made above.\n\nformatted_results &lt;- ggs(posterior_samples_neg_bin)\nformatted_results # same as above\n\n# A tibble: 3,600 × 4\n   Iteration Chain Parameter value\n       &lt;int&gt; &lt;int&gt; &lt;fct&gt;     &lt;dbl&gt;\n 1         1     1 prob      0.286\n 2         2     1 prob      0.310\n 3         3     1 prob      0.301\n 4         4     1 prob      0.304\n 5         5     1 prob      0.348\n 6         6     1 prob      0.325\n 7         7     1 prob      0.308\n 8         8     1 prob      0.346\n 9         9     1 prob      0.358\n10        10     1 prob      0.383\n# ℹ 3,590 more rows\n\n\nThen, everything works as before!."
  },
  {
    "objectID": "01_nimble.html#defining-a-nimblefunction",
    "href": "01_nimble.html#defining-a-nimblefunction",
    "title": "Introduction to nimble",
    "section": "Defining a nimbleFunction",
    "text": "Defining a nimbleFunction\nWhat makes nimble’s popularity is it suitability for statistical programming.\nAs your specific model will certainly requires specific functions, we cannot expect to find all our tools in the built-in function.\nHowever, we can define new functions in a syntax which is pretty similar to R.\n\nAlternative parameterization of the negative binomial\nSuppose now we want to perform negative binomial regression. In this context, we model the expectation (typically through a link to some covariates) of the response variable. Typically, if we denote, for all \\(1\\leq i \\leq n\\), \\(\\mu = \\mathbb{E}\\left[Y_i\\right]\\), we assume the following prior:\n\\[\n\\ln \\mu \\sim \\mathcal{N}\\left(0, 1\\right)\\,.\n\\] Sadly, in nimble, we do not have access to an implementation of the negative binomial distribution parameterized by \\((\\mu,  \\theta)\\). However, we know that: \\[\n\\mu = \\theta \\times \\frac{1 - p}{p}\\,,\n\\] or, equivalently, that: \\[\np = \\frac{\\theta}{\\theta + \\mu}\n\\]\n\nget_p_from_mu &lt;- nimbleFunction(\n  run = function(mu = double(0),\n                 theta = double(0)) { # type declarations\n    returnType(double(0))  # return type declaration\n    output &lt;- theta / (theta + mu)\n    return(output)\n  })\nget_p_from_mu(18, 12) # Works as a usual R function\n\n[1] 0.4\n\n\n\ncode_alternatif &lt;- nimbleCode({\n  # Observation model\n  for(i in 1:n){# n is never defined before, it will be a constant\n    y[i] ~ dnbinom(prob, theta)\n  }\n  # Alternative vectorized formulation \n  # y[1:n] ~ dnbinom(prob, theta)\n  # PRIORS\n  log_mu ~ dnorm(0, 1)\n  theta ~ dexp(0.1)\n  # Quantites deterministes\n  mu &lt;- exp(log_mu)\n  prob &lt;- get_p_from_mu(mu = mu, theta = theta)\n})\n\nmodel_alternatif &lt;- nimbleModel(code = code_alternatif, \n                                name = \"Alternative negative binomial\", \n                                constants = list(n = length(data_ex1)),\n                                data = list(y = data_ex1),\n                                inits = list(mu = 0.5, theta = 1))\n\nDefining model\n\n\nBuilding model\n\n\nSetting data and initial values\n\n\nRunning calculate on model\n  [Note] Any error reports that follow may simply reflect missing values in model variables.\n\n\nChecking model sizes and dimensions\n\n\n  [Note] This model is not fully initialized. This is not an error.\n         To see which variables are not initialized, use model$initializeInfo().\n         For more information on model initialization, see help(modelInitialization).\n\nposterior_samples_alternatif &lt;- nimbleMCMC(model_alternatif, \n                                           nchains = 2, \n                                           niter = 10000, \n                                           thin = 10, \n                                           nburnin = 1000,\n                                           monitors = c(\"prob\", \"theta\"),\n                                           samplesAsCodaMCMC = TRUE)\n\nCompiling\n  [Note] This may take a minute.\n  [Note] Use 'showCompilerOutput = TRUE' to see C++ compilation details.\n\n\nrunning chain 1...\n\n\n|-------------|-------------|-------------|-------------|\n|-------------------------------------------------------|\n\n\nrunning chain 2...\n\n\n|-------------|-------------|-------------|-------------|\n|-------------------------------------------------------|"
  },
  {
    "objectID": "01_nimble.html#defining-new-distribution",
    "href": "01_nimble.html#defining-new-distribution",
    "title": "Introduction to nimble",
    "section": "Defining new distribution",
    "text": "Defining new distribution\nAn alternative is to define a new distribution.\n\ndmynegbin &lt;- nimbleFunction(\n  run = function(x = double(0), \n                 mu = double(0),\n                 theta = double(0),\n                 log = integer(0, default = 0)) {\n    returnType(double(0))\n    prob = get_p_from_mu(mu, theta)\n    output &lt;- dnbinom(x, size = theta, prob = prob, log = log)\n    return(output)\n  })\nregisterDistributions(list(\n  dmynegbin = list(BUGSdist = \"dmynegbin(mu, theta)\",\n                   discrete = TRUE, pqAvail = FALSE)\n))\n\n  [Warning] Random generation function for dmynegbin is not available. NIMBLE is generating a placeholder function, rmynegbin, that will invoke an error if an algorithm needs to simulate from this distribution. Some algorithms (such as random-walk Metropolis MCMC sampling) will work without the ability to simulate from the distribution.  If simulation is needed, provide a nimbleFunction (with no setup code) to do it.\n\n\n\ncode_with_my_dist &lt;- nimbleCode({\n  # Observation model\n  for(i in 1:n){# n is never defined before, it will be a constant\n    y[i] ~ dmynegbin(mu, theta) # my distribution\n  }\n  # PRIORS\n  log_mu ~ dnorm(0, 1)\n  mu &lt;- exp(log_mu)\n  theta ~ dexp(0.1)\n})\n\nmodel_with_my_dist &lt;- nimbleModel(code = code_with_my_dist, \n                                  name = \"Alternative negative binomial\", \n                                  constants = list(n = length(data_ex1)),\n                                  data = list(y = data_ex1),\n                                  inits = list(log_mu = 0.5, theta = 1))\n\nDefining model\n\n\nBuilding model\n\n\nSetting data and initial values\n\n\nRunning calculate on model\n  [Note] Any error reports that follow may simply reflect missing values in model variables.\n\n\nChecking model sizes and dimensions\n\ncompileNimble(model_with_my_dist)\n\nCompiling\n  [Note] This may take a minute.\n  [Note] Use 'showCompilerOutput = TRUE' to see C++ compilation details.\n\n\nDerived CmodelBaseClass created by buildModelInterface for model Alternative negative binomial\n\nposterior_samples_alternatif &lt;- nimbleMCMC(model_with_my_dist, \n                                           nchains = 2, \n                                           niter = 10000, \n                                           thin = 10, \n                                           nburnin = 1000, \n                                           monitors = c(\"mu\", \"theta\"),\n                                           samplesAsCodaMCMC = TRUE)\n\nCompiling\n  [Note] This may take a minute.\n  [Note] Use 'showCompilerOutput = TRUE' to see C++ compilation details.\n\n\nrunning chain 1...\n\n\n|-------------|-------------|-------------|-------------|\n|-------------------------------------------------------|\n\n\nrunning chain 2...\n\n\n|-------------|-------------|-------------|-------------|\n|-------------------------------------------------------|\n\n\n\nposterior_samples_alternatif %&gt;% \n  ggs() %&gt;% \n  ggplot() +\n  aes(x = Iteration,\n      y = value, color = factor(Chain)) +\n  facet_wrap(~Parameter, scales = \"free\") +\n  geom_line() +\n  labs(x = \"Iteration\", y = \"Parameter value\", color = \"\")"
  },
  {
    "objectID": "01_nimble.html#alternative-mcmc-sampler",
    "href": "01_nimble.html#alternative-mcmc-sampler",
    "title": "Introduction to nimble",
    "section": "Alternative MCMC sampler",
    "text": "Alternative MCMC sampler\nOne big strength of nimble are the several samplers that are available in the package."
  },
  {
    "objectID": "01_nimble.html#conjuguate-priors",
    "href": "01_nimble.html#conjuguate-priors",
    "title": "Introduction to nimble",
    "section": "Conjuguate priors",
    "text": "Conjuguate priors\nFirst, nimble is able to identify conjugate priors and make the exact computation of the posterior link."
  },
  {
    "objectID": "01_nimble.html#hmc-algorithm",
    "href": "01_nimble.html#hmc-algorithm",
    "title": "Introduction to nimble",
    "section": "HMC algorithm",
    "text": "HMC algorithm\nnimble provides support for Hamiltonian Monte Carlo (HMC) and compute the derivatives of the likelihood through automatic differentiation. The nimbleHMC package implement two versions of No-U-Turn (NUTS) HMC sampling: the standard one developed in Hoffman and Gelman (link) and an updated one with improved adaptation routines and convergence criteria, which matches the HMC sampler of STAN.\nIn order to allow an algorithm to use AD for a specific model, that model must be created with buildDerivs = TRUE.\n\n# Build model with nimble\nmodel_neg_bin_HMC &lt;- nimbleModel(code = code_neg_bin, \n                                 name = \"Negative binomial\", \n                                 constants = list(n = length(data_ex1)),\n                                 data = list(y = data_ex1),\n                                 inits = list(prob = 0.5, theta = 1),\n                                 calculate = FALSE, buildDerivs = TRUE) # This is the line required for running HMC\n\nDefining model\n\n\nBuilding model\n\n\nSetting data and initial values\n\n\nChecking model sizes and dimensions\n\nC_model_neg_bin_HMC &lt;- compileNimble(model_neg_bin_HMC) # Compile the model (they require this for the compilation of the HMC object)\n\nCompiling\n  [Note] This may take a minute.\n  [Note] Use 'showCompilerOutput = TRUE' to see C++ compilation details.\n\n# Build the MCMC algorithm which applies HMC sampling\nHMC &lt;- buildHMC(C_model_neg_bin_HMC)\n\n===== Monitors =====\nthin = 1: prob, theta\n===== Samplers =====\nNUTS sampler (1)\n  - prob, theta \n\n# Careful here, when the model has random effects\n# HMC requires to set values in the model before running the algorithm\n# One solution is to simulate with the model and set the model with these values\n# See : https://r-nimble.org/html_manual/cha-mcmc.html#subsec:HMC-example\n# Here, as the model is simple, there is no need for this and everything is handled withing nimble/nimbleHMC\n\n## Then everything is standard in nimble\nCHMC &lt;- compileNimble(HMC) # Compile the HMC model/algo\n\nCompiling\n  [Note] This may take a minute.\n  [Note] Use 'showCompilerOutput = TRUE' to see C++ compilation details.\n\nsamples &lt;- runMCMC(CHMC, niter = 1000, nburnin = 500) # Short run for illustration\n\nrunning chain 1...\n\n\n  [Note] NUTS sampler (nodes: prob, theta) is using 500 warmup iterations.\n         Since `warmupMode` is 'default' and `nburnin` &gt; 0,\n         the number of warmup iterations is equal to `nburnin`.\n         The burnin samples will be discarded, and all samples returned will be post-warmup.\n|-------------|-------------|-------------|-------------|\n|-------------------------------------------------------|\n\nsummary(coda::as.mcmc(samples)) # Summary of the estimates\n\n\nIterations = 1:500\nThinning interval = 1 \nNumber of chains = 1 \nSample size per chain = 500 \n\n1. Empirical mean and standard deviation for each variable,\n   plus standard error of the mean:\n\n         Mean      SD Naive SE Time-series SE\nprob   0.3714 0.04763  0.00213       0.005035\ntheta 10.9433 2.20934  0.09880       0.232706\n\n2. Quantiles for each variable:\n\n       2.5%    25%     50%     75%   97.5%\nprob  0.284 0.3349  0.3756  0.4048  0.4671\ntheta 7.074 9.2270 10.7757 12.3756 15.7634\n\n\nAnd there are plenty of others samplers:\n\nParticle filters / sequential Monte Carlo and iterated filtering (package nimbleSMC)\nMonte Carlo Expectation Maximization (MCEM)\n\nSee link"
  },
  {
    "objectID": "01_nimble.html#the-laplace-approximation",
    "href": "01_nimble.html#the-laplace-approximation",
    "title": "Introduction to nimble",
    "section": "The laplace approximation",
    "text": "The laplace approximation\nnimble also implements the Laplace approximation. But be careful, it performs maximum likelihood estimation. This is not the same as INLA (fully bayesian approach), but more like TMB (or glmmTMB- maximum likelihood estimation through Laplace approximation and automatic differentiation).\n\n# We need the derivatives to build the Laplace algorithm\n# so we take the object model_neg_bin_HMC built previously\nmodel_laplace &lt;- buildLaplace(model_neg_bin_HMC)\nCmodel_laplace &lt;- compileNimble(model_laplace)\n\nCompiling\n  [Note] This may take a minute.\n  [Note] Use 'showCompilerOutput = TRUE' to see C++ compilation details.\n\n# Get the Laplace approximation for one set of parameter values.\nCmodel_laplace$calcLaplace(c(0.5,0.5)) \n\n[1] -1499.737\n\n # Get the corresponding gradient.\nCmodel_laplace$gr_Laplace(c(0.5,0.5))\n\n[1] -3552.0000   409.7602\n\n# Search the (approximate) MLE\nMLE &lt;- Cmodel_laplace$findMLE(c(0.5,0.5)) # Find the (approximate) MLE.\nMLE$par\n\n[1]  0.366619 10.569421\n\n# Get log-likelihood value\nMLE$value\n\n[1] -333.2813\n\n# And output summaries\nCmodel_laplace$summary(MLE)\n\nnimbleList object of type AGHQuad_summary\nField \"params\":\nnimbleList object of type AGHQuad_params\nField \"names\":\n[1] \"prob\"  \"theta\"\nField \"estimates\":\n[1]  0.366619 10.569421\nField \"stdErrors\":\n[1] 0.05242939 2.35119020\nField \"randomEffects\":\nnimbleList object of type AGHQuad_params\nField \"names\":\ncharacter(0)\nField \"estimates\":\nnumeric(0)\nField \"stdErrors\":\nnumeric(0)\nField \"vcov\":\n&lt;0 x 0 matrix&gt;\nField \"scale\":\n[1] \"original\"\n\n\nN.b this example is only for illustration of the code. The Laplace approximation is relevant only when there are random effects in the model (which is not the case here).\nFor a full example see link"
  },
  {
    "objectID": "01_nimble.html#comparing-mcmc-algorithms",
    "href": "01_nimble.html#comparing-mcmc-algorithms",
    "title": "Introduction to nimble",
    "section": "Comparing MCMC algorithms",
    "text": "Comparing MCMC algorithms\nOne can compare several algorithms through the package compareMCMCs. It is possible to compare several algorithms internal to nimble with those from jags (or even STAN) algorithms. An example below for nimble and STAN.\n\n# This model code will be used for both nimble and JAGS\nmodelInfo &lt;- list(\n  code = code_neg_bin,\n  constants = list(n = length(data_ex1)),\n  data = list(y = data_ex1),\n  inits = list(prob = 0.5, theta = 1)\n)\n\n# Here is a custom MCMC configuration function for nimble\nconfigure_nimble_slice &lt;- function(model) {\n  configureMCMC(model, onlySlice = TRUE)\n}\n\n# Here is the call to compareMCMCs\nres &lt;- compareMCMCs(modelInfo,\n                    MCMCs = c('nimble',       # nimble with default samplers\n                              'nimble_slice' # nimble with slice samplers\n                              ),\n                    nimbleMCMCdefs = \n                      list(nimble_slice = 'configure_nimble_slice'),\n                    MCMCcontrol = list(inits = list(prob = 0.5, theta = 1),\n                                       niter = 10000,\n                                       burnin = 1000))\n\nbuilding nimble model...\n\n\nDefining model\n\n\nBuilding model\n\n\nSetting data and initial values\n\n\nRunning calculate on model\n  [Note] Any error reports that follow may simply reflect missing values in model variables.\n\n\nChecking model sizes and dimensions\n\n\n===== Monitors =====\nthin = 1: prob, theta\n===== Samplers =====\nRW sampler (2)\n  - prob\n  - theta\n===== Monitors =====\nthin = 1: prob, theta\n===== Samplers =====\nslice sampler (2)\n  - prob\n  - theta\n\n\nCompiling\n  [Note] This may take a minute.\n  [Note] Use 'showCompilerOutput = TRUE' to see C++ compilation details.\n\n\nCompiling\n  [Note] This may take a minute.\n  [Note] Use 'showCompilerOutput = TRUE' to see C++ compilation details.\n\n\n|-------------|-------------|-------------|-------------|\n|-------------------------------------------------------|\n|-------------|-------------|-------------|-------------|\n|-------------------------------------------------------|\n\nmake_MCMC_comparison_pages(res, modelName = 'code_neg_bin',dir = \"/tmp/\",\n                           control = list(res = 75))\n\nLoading required namespace: xtable"
  },
  {
    "objectID": "01_nimble.html#data-generation",
    "href": "01_nimble.html#data-generation",
    "title": "Introduction to nimble",
    "section": "Data generation",
    "text": "Data generation\nWe consider a simple settings in dimension \\(p=5\\), with Toeplitz-like covariance.\n\nN &lt;- 100\np &lt;- 5\nd &lt;- 1:p\nDsqrt &lt;- diag(sqrt(d))\nSigma &lt;- Dsqrt %*% toeplitz(0.75^(0:(p-1))) %*% Dsqrt\nOmega &lt;- solve(Sigma)\nmu &lt;- 5 + 1:p\npi &lt;- c(0.25, 0, 0.8, 0.1, .5)\n\nHere are some data (100 points):\n\nW &lt;- t(replicate(N, rbinom(p, prob = pi, size = 1)))\nY &lt;- (1 - W) * rmvnorm(N, mu, Sigma)\nggplot(data.frame(y = c(Y))) + aes(x=y) + geom_histogram()"
  },
  {
    "objectID": "01_nimble.html#auxiliary-functions",
    "href": "01_nimble.html#auxiliary-functions",
    "title": "Introduction to nimble",
    "section": "Auxiliary functions",
    "text": "Auxiliary functions\nWe need some auxiliary nimble functions to handle the density and generation of the random binomial vector \\(W\\):\n\ndbinom_vector &lt;- nimbleFunction(\n  run = function( x = double(1),\n                  size = double(1),\n                  prob = double(1), \n                  log = integer(0, default = 0)\n  ) {\n    returnType(double(0))\n    logProb &lt;- sum(dbinom(x, prob = prob, size = size, log = TRUE))\n    if(log) return(logProb) else return(exp(logProb))\n  })\n\nrbinom_vector &lt;- nimbleFunction(\n  run = function( n = integer(0, default = 1),\n                  size = double(1),\n                  prob = double(1)\n  ) {\n    returnType(double(1))\n    return(rbinom(length(size), prob = prob, size = size))\n  })"
  },
  {
    "objectID": "01_nimble.html#nimble-code-and-model-for-zi-normal-v1",
    "href": "01_nimble.html#nimble-code-and-model-for-zi-normal-v1",
    "title": "Introduction to nimble",
    "section": "Nimble code and model for ZI-normal: V1",
    "text": "Nimble code and model for ZI-normal: V1\nRather than defining a probability density function for this model (which is in fact a bit complicated…), we adopt a generative approach:\n\nZInormal_code &lt;- nimbleCode({\n  \n  for (j in 1:p) {\n    mean[j] ~ dnorm(0,1)  \n  }\n  for (j in 1:p) {\n    zeroProb[j] ~ dunif(0,1)\n  }\n  \n  prec[1:p,1:p] ~ dwish(Ip[1:p,1:p], p)\n\n  for (i in 1:N) {\n    w[i, 1:p] ~ dbinom_vector(onep[1:p], zeroProb[1:p])\n    z[i, 1:p] ~ dmnorm(mean[1:p], prec[1:p,1:p])\n    ytilde[i, 1:p] &lt;- (1 - w[i,1:p]) * z[i,1:p]\n    ## P. Barbillon/M.-P. Étienne: astuce en zero \n    ## a.k.a \"I got a trick at zero\"\n    y[i, 1:p] ~ dmnorm(ytilde[i, 1:p], prec_inf[1:p,1:p])\n  }\n  \n})\n\nWe can now define the nimble model for the ZI-normal model. We give some sound intial values for the parameters and latent variable, define some constants and provide the data:\n\nZInormal_model &lt;- nimbleModel(\n  ZInormal_code, \n  constants = \n    list(N = N, p = p, Ip = diag(1,p,p),\n         onep = rep(1,p), prec_inf = diag(1e5,p,p)),\n  data = list(y = Y, w = W),\n  inits = list(mean = rep(5,p), prec = diag(1,p,p), zeroProb=rep(0.5,p), z = Y))\n\nDefining model\n\n\n  [Note] Registering 'dbinom_vector' as a distribution based on its use in BUGS code. If you make changes to the nimbleFunctions for the distribution, you must call 'deregisterDistributions' before using the distribution in BUGS code for those changes to take effect.\n\n\nBuilding model\n\n\nSetting data and initial values\n\n\nRunning calculate on model\n  [Note] Any error reports that follow may simply reflect missing values in model variables.\n\n\nChecking model sizes and dimensions"
  },
  {
    "objectID": "01_nimble.html#mcmc-estimation",
    "href": "01_nimble.html#mcmc-estimation",
    "title": "Introduction to nimble",
    "section": "MCMC estimation",
    "text": "MCMC estimation\nLet us run a simple 2-chain MCMC estimation\n\nmy_MCMC &lt;- nimbleMCMC(\n  ZInormal_model, \n  monitors = c(\"mean\", \"prec\", \"zeroProb\"),\n  nchains = 2, \n  niter = 1000, \n  samplesAsCodaMCMC = TRUE,\n  nburnin=100)\n\nCompiling\n  [Note] This may take a minute.\n  [Note] Use 'showCompilerOutput = TRUE' to see C++ compilation details.\n\n\nrunning chain 1...\n\n\n|-------------|-------------|-------------|-------------|\n|-------------------------------------------------------|\n\n\nrunning chain 2...\n\n\n|-------------|-------------|-------------|-------------|\n|-------------------------------------------------------|\n\n\n\n\n\n\n\nEstimation of the mean \\(\\mu\\)\n\n\n\n\n\nprint(mu)\n\n[1]  6  7  8  9 10\n\n\n\n\n\n\n\nEstimation of the zero inflation probabilities \\(\\pi\\)\n\n\n\n\n\nprint(pi)\n\n[1] 0.25 0.00 0.80 0.10 0.50\n\n\n\n\n\n\n\nEstimation of the precision matrix \\(\\Omega\\)\n\n\n\n\n\nprint(round(Omega,3))\n\n       [,1]   [,2]   [,3]   [,4]   [,5]\n[1,]  2.286 -1.212  0.000  0.000  0.000\n[2,] -1.212  1.786 -0.700  0.000  0.000\n[3,]  0.000 -0.700  1.190 -0.495  0.000\n[4,]  0.000  0.000 -0.495  0.893 -0.383\n[5,]  0.000  0.000  0.000 -0.383  0.457"
  },
  {
    "objectID": "instructions.html",
    "href": "instructions.html",
    "title": "Instructions pour le dépot sur le site web",
    "section": "",
    "text": "Protocole https :\ngit clone https://github.com/StateOfTheR/finistR2024.git\nAvec clés SSH : git clone git@github.com:git@github.com:StateOfTheR/finistR2024.git\n\n\n(Lien vers une doc complète)[https://docs.github.com/fr/get-started/getting-started-with-git/managing-remote-repositories]."
  },
  {
    "objectID": "instructions.html#cloner-le-dépôt-git-du-bootcamp",
    "href": "instructions.html#cloner-le-dépôt-git-du-bootcamp",
    "title": "Instructions pour le dépot sur le site web",
    "section": "",
    "text": "Protocole https :\ngit clone https://github.com/StateOfTheR/finistR2024.git\nAvec clés SSH : git clone git@github.com:git@github.com:StateOfTheR/finistR2024.git\n\n\n(Lien vers une doc complète)[https://docs.github.com/fr/get-started/getting-started-with-git/managing-remote-repositories]."
  },
  {
    "objectID": "instructions.html#processus-de-mise-en-commun-des-ateliers",
    "href": "instructions.html#processus-de-mise-en-commun-des-ateliers",
    "title": "Instructions pour le dépot sur le site web",
    "section": "Processus de mise en commun des ateliers",
    "text": "Processus de mise en commun des ateliers\n\nCréer une branche propre à l’atelier nommée explicitement mon_nom_parlant et basculer dessus\n\ngit checkout -b mon_nom_parlant\n\nCréer un fichier Rmarkdown de restitution de votre atelier fichier.Rmd dans votre branche\n\ngit add fichier.Rmd\ngit commit -m \"restitution atelier\"\n\nPousser vos modifications sur le serveur distant\n\ngit  push --set-upstream origin mon_nom_parlant ou\ngit  push\n\nFaire une pull request (PR) sur github\nindiquer dans le message de la PR la liste des packages ou autres besoins\nQuand la PR passe les tests, demander le merge.\ncorriger les erreurs éventuelles dans la compilation du Rmarkdown\nles admins peuvent avoir à mettre à jour l’image docker"
  },
  {
    "objectID": "instructions.html#détails-du-fonctionnement",
    "href": "instructions.html#détails-du-fonctionnement",
    "title": "Instructions pour le dépot sur le site web",
    "section": "Détails du fonctionnement",
    "text": "Détails du fonctionnement\n\nLe docker\n(Lien vers la fiche pense-bête)[https://www.docker.com/sites/default/files/d8/2019-09/docker-cheat-sheet.pdf]\nPour créer des images Docker en local sur sa machine, voici une liste de commandes utiles\n\nPour construire une image docker, il faut créer un fichier Dockerfile qui contient la recette du Docker. Pour ce site le ficher Dockerfile a la forme suivante\n\n\n\n\nFROM rocker/geospatial:4.4\nRUN export DEBIAN_FRONTEND=noninteractive; apt-get -y update \\\n && apt-get install -y pandoc \\\n    pandoc-citeproc\nRUN R -e \"install.packages('remotes')\"\nRUN R -e \"install.packages('microbenchmark')\"\nRUN R -e \"install.packages('purrr')\" # map function\nENV R_CRAN_WEB=\"https://cran.rstudio.com/\"\nRUN R -e \"install.packages('cowplot')\" # GET function\nRUN R -e \"install.packages('torch')\"\nRUN R -e \"torch::install_torch(type = 'cpu')\"\nRUN R -e \"install.packages('PLNmodels')\"\nRUN R -e \"install.packages('torchvision')\"\n\nRUN apt-get update \\\n && apt-get install -y --no-install-recommends \\\n  mercurial gdal-bin libgdal-dev gsl-bin libgsl-dev \\\n  libc6-i386\n\nRUN R -e \"install.packages('reticulate')\"\nRUN R -e \"install.packages(c('inlabru', 'lme4', 'ggpolypath', 'RColorBrewer', 'geoR'))\"\nRUN R -e \"install.packages(c('poissonreg'))\"\nRUN apt-get install -y --no-install-recommends unzip python3-pip dvipng pandoc wget git make python3-venv && \\\n    pip3 install jupyter jupyter-cache flatlatex matplotlib && \\\n    apt-get --purge -y remove texlive.\\*-doc$ && \\\n    apt-get clean\n\n\npuis demander la construction de l’image à l’aide de la commande\n\n docker build -t nom_depot_dockerhub/nom_du_repo:version  . ## avec un nom\n\net enfin pousser sur Dockerhub\n\n docker push nom_depot_dockerhub/nom_du_repo:version\n\n\n\nLes actions\nDans les action de Github, on peut spécifier un container docker à utiliser, c’est ce que fait la ligne container du fichier d’action suivant, utiliser pour créer ce site web\n\n\nname: website\non:\n  push:\n    branches:\n      - main\n\njobs:\n  build:\n    name: Build website with rmarkdown\n    runs-on: ubuntu-latest\n    container: stateofther/r-finistr2024:0.1\n\n    steps:\n      - name: Checkout repository\n        uses: actions/checkout@v2\n      - name: Additional R packages\n        run: |\n          Rscript -e \"install.packages(c('tictoc', 'nimble', 'ggmcmc', 'compareMCMCs', 'nimbleHMC', 'mvtnorm'))\"\n      - name: Additional Python packages\n        run: pip install torch torch_geometric numpy scikit-learn scikit-network networkx matplotlib tqdm openpyxl pandas\n      - name: Generate slides\n        run: \"quarto render\"\n      - name: GitHub Pages action\n        uses: peaceiris/actions-gh-pages@v3\n        with:\n          github_token: ${{ secrets.GITHUB_TOKEN }}\n          publish_dir: ./_site"
  },
  {
    "objectID": "Readme.html",
    "href": "Readme.html",
    "title": "Ateliers Finist’R 2024",
    "section": "",
    "text": "Ateliers Finist’R 2024\n\n\n\nwebsite\n\n\nL’atelier Finist’R 2024 – ou bootcamp R s’est déroulé à la station biologique de Roscoff du 19 au 23 août 2024.\nIl s’agit de la huitième édition de l’atelier Finist’R. Cet atelier réunit annuellement un groupe de chercheurs, ingénieurs, doctorants, tous utilisateurs avancés de R et dévelopeurs de paquets pour explorer les dernières fonctionalités du logiciel et les nouvelles pratiques de développement. A l’issu de l’atelier le collectif produit une synthèse de cette veille logiciel de manière à progresser collectivement dans l’utilisation du logiciel mais surtout dans la production d’outils statistiques à destination de la communauté.\nLa restitution se fait sous forme de site web. Le site de l’édition 2024 sera disponible ici"
  }
]