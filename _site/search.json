[
  {
    "objectID": "shiny-deployment.html",
    "href": "shiny-deployment.html",
    "title": "Solutions institutionnelles de déploiement d’applications shiny avec kubernetes",
    "section": "",
    "text": "besoin de déploiement d’appli shiny pour utilisation sans programmation\nsolution proposée par shinyapps.io: limitation à 25h/mois et 5 applications concurrentes pour la version gratuite, et 1Gb de RAM. Les étapes du déploiement sont illustrées dans la Section 1.6\nsolution proposée par Posit (anciennement par Shiny Server Pro): PositConnect: payant (cher)\nintérêt d’avoir une solution institutionnelle\n\n\n\n\n\n\nOutil\nInstitution\nRéférences\n\n\n\n\nplmshift\nCNRS\n\n\n\nSK8\nINRAE\nMaigné et al. (2023)\n\n\nShiny-K8s\nInstitut Pasteur\nBrancotte and Chapeaublanc (2024)\n\n\n\n\n\n\nCes trois outils sont dédiés au déploiement d’applications shiny via Kubernetes (aka K8s). Le développeur de l’application shiny doit fournir un dépôt git contenant le code source de l’application et spécifier les dépendances (via un fichier csv dédié pour shiny-K8s et plmshift, ou automatiquement via renv pour SK8).\n\n\n\nEtapes pour le déploiement d’une application shiny via SK8 (INRAE)\n\n\n\n\n\nC’est ici que les trois solutions se différencient:\n\nPour plmshift, on demande également au développeur de l’application de configurer et d’administrer lui-même son instance ShinyServer, via l’interface d’OpenShift. Ces étapes sont documentées ici\n\nIdem pour Shiny-K8s, avec (semble-t-il) moins de compétences techniques requises. Ces étapes sont documentées ici\nSK8 propose une interface simplifiée pour la configuration du serveur shiny, qui permet au développeur de l’application shiny spécifier directement les paramètres (RAM, CPU) sans avoir besoin de compétences en déploiement.\n\n\n\n\nplmshift, SK8 et Shiny-K8s sont respectivement accessibles seulement pour des projets développés par le CNRS, INRAE et l’Institut Pasteur.\nAujourd’hui, SK8 semble la solution la plus simple d’utilisation pour le développeur shiny. Les paramètres de configuration sont relativement proches de ceux demandés pour le dépoiements sur shinyapps.io (voir Section 1.6). Afin de rendre ce type d’outil accessible à d’autres institutions qu’’INRAE, on peut envisager soit l’ouverture d’un des services existants à ces institutions, soit la mise à disposition de ce type de service directement par chaque institution. Les deux solutions nécessitent des ressources matérielles et humaines; la première solution peut permettre des économies d’échelle mais peut poser des questions sur le partage des données de recherche entre institutions.\n\n\n\n\ncode d’une application démo pour déploiement avec shiny-K8s\nprésentation d’Elise Maigné aux rencontres R 2024\n\n\n\n\n\n\n\nVue d’ensemble\n\n\n\n\n\nConfiguration: paramètres de base\n\n\n\n\n\nConfiguration: paramètres avancés\n\n\n\n\n\nStatistiques d’utilisation"
  },
  {
    "objectID": "shiny-deployment.html#outils-institutionnels-existants",
    "href": "shiny-deployment.html#outils-institutionnels-existants",
    "title": "Solutions institutionnelles de déploiement d’applications shiny avec kubernetes",
    "section": "",
    "text": "Outil\nInstitution\nRéférences\n\n\n\n\nplmshift\nCNRS\n\n\n\nSK8\nINRAE\nMaigné et al. (2023)\n\n\nShiny-K8s\nInstitut Pasteur\nBrancotte and Chapeaublanc (2024)"
  },
  {
    "objectID": "shiny-deployment.html#préparation-de-lappli-au-déploiement",
    "href": "shiny-deployment.html#préparation-de-lappli-au-déploiement",
    "title": "Solutions institutionnelles de déploiement d’applications shiny avec kubernetes",
    "section": "",
    "text": "Ces trois outils sont dédiés au déploiement d’applications shiny via Kubernetes (aka K8s). Le développeur de l’application shiny doit fournir un dépôt git contenant le code source de l’application et spécifier les dépendances (via un fichier csv dédié pour shiny-K8s et plmshift, ou automatiquement via renv pour SK8).\n\n\n\nEtapes pour le déploiement d’une application shiny via SK8 (INRAE)"
  },
  {
    "objectID": "shiny-deployment.html#configuration-du-serveur-shiny",
    "href": "shiny-deployment.html#configuration-du-serveur-shiny",
    "title": "Solutions institutionnelles de déploiement d’applications shiny avec kubernetes",
    "section": "",
    "text": "C’est ici que les trois solutions se différencient:\n\nPour plmshift, on demande également au développeur de l’application de configurer et d’administrer lui-même son instance ShinyServer, via l’interface d’OpenShift. Ces étapes sont documentées ici\n\nIdem pour Shiny-K8s, avec (semble-t-il) moins de compétences techniques requises. Ces étapes sont documentées ici\nSK8 propose une interface simplifiée pour la configuration du serveur shiny, qui permet au développeur de l’application shiny spécifier directement les paramètres (RAM, CPU) sans avoir besoin de compétences en déploiement."
  },
  {
    "objectID": "shiny-deployment.html#accessibilité",
    "href": "shiny-deployment.html#accessibilité",
    "title": "Solutions institutionnelles de déploiement d’applications shiny avec kubernetes",
    "section": "",
    "text": "plmshift, SK8 et Shiny-K8s sont respectivement accessibles seulement pour des projets développés par le CNRS, INRAE et l’Institut Pasteur.\nAujourd’hui, SK8 semble la solution la plus simple d’utilisation pour le développeur shiny. Les paramètres de configuration sont relativement proches de ceux demandés pour le dépoiements sur shinyapps.io (voir Section 1.6). Afin de rendre ce type d’outil accessible à d’autres institutions qu’’INRAE, on peut envisager soit l’ouverture d’un des services existants à ces institutions, soit la mise à disposition de ce type de service directement par chaque institution. Les deux solutions nécessitent des ressources matérielles et humaines; la première solution peut permettre des économies d’échelle mais peut poser des questions sur le partage des données de recherche entre institutions."
  },
  {
    "objectID": "shiny-deployment.html#autres-ressources",
    "href": "shiny-deployment.html#autres-ressources",
    "title": "Solutions institutionnelles de déploiement d’applications shiny avec kubernetes",
    "section": "",
    "text": "code d’une application démo pour déploiement avec shiny-K8s\nprésentation d’Elise Maigné aux rencontres R 2024"
  },
  {
    "objectID": "shiny-deployment.html#sec-shinyapps.io",
    "href": "shiny-deployment.html#sec-shinyapps.io",
    "title": "Solutions institutionnelles de déploiement d’applications shiny avec kubernetes",
    "section": "",
    "text": "Vue d’ensemble\n\n\n\n\n\nConfiguration: paramètres de base\n\n\n\n\n\nConfiguration: paramètres avancés\n\n\n\n\n\nStatistiques d’utilisation"
  },
  {
    "objectID": "Readme.html",
    "href": "Readme.html",
    "title": "Ateliers Finist’R 2024",
    "section": "",
    "text": "Ateliers Finist’R 2024\n\n\n\nwebsite\n\n\nL’atelier Finist’R 2024 – ou bootcamp R s’est déroulé à la station biologique de Roscoff du 19 au 23 août 2024.\nIl s’agit de la huitième édition de l’atelier Finist’R. Cet atelier réunit annuellement un groupe de chercheurs, ingénieurs, doctorants, tous utilisateurs avancés de R et dévelopeurs de paquets pour explorer les dernières fonctionalités du logiciel et les nouvelles pratiques de développement. A l’issu de l’atelier le collectif produit une synthèse de cette veille logiciel de manière à progresser collectivement dans l’utilisation du logiciel mais surtout dans la production d’outils statistiques à destination de la communauté.\nLa restitution se fait sous forme de site web. Le site de l’édition 2024 sera disponible ici"
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "FinistR : bootcamp R à Roscoff",
    "section": "",
    "text": "L’atelier Finist’R 2024 – ou bootcamp R du groupe State Of The R s’est déroulé à la station biologique de Roscoff du 19 au 23 août 2024.\nStateoftheR est un réseau du département MathNum INRAE.\n\n\nIl s’agit de la huitième édition de l’atelier Finist’R. Cet atelier réunit annuellement un groupe de chercheurs, ingénieurs, doctorants, tous utilisateurs avancés de R et développeurs de paquets pour explorer les dernières fonctionnalités du logiciel et les nouvelles pratiques de développement. A l’issue de l’atelier le collectif produit une synthèse de cette veille logiciel de manière à progresser collectivement dans l’utilisation du logiciel mais surtout dans la production d’outils statistiques à destination de la communauté.\nLe résultat de cette semaine est disponible sur cette page"
  },
  {
    "objectID": "index.html#où-quand",
    "href": "index.html#où-quand",
    "title": "FinistR : bootcamp R à Roscoff",
    "section": "",
    "text": "L’atelier Finist’R 2024 – ou bootcamp R du groupe State Of The R s’est déroulé à la station biologique de Roscoff du 19 au 23 août 2024.\nStateoftheR est un réseau du département MathNum INRAE.\n\n\nIl s’agit de la huitième édition de l’atelier Finist’R. Cet atelier réunit annuellement un groupe de chercheurs, ingénieurs, doctorants, tous utilisateurs avancés de R et développeurs de paquets pour explorer les dernières fonctionnalités du logiciel et les nouvelles pratiques de développement. A l’issue de l’atelier le collectif produit une synthèse de cette veille logiciel de manière à progresser collectivement dans l’utilisation du logiciel mais surtout dans la production d’outils statistiques à destination de la communauté.\nLe résultat de cette semaine est disponible sur cette page"
  },
  {
    "objectID": "index.html#programme",
    "href": "index.html#programme",
    "title": "FinistR : bootcamp R à Roscoff",
    "section": "Programme",
    "text": "Programme\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nGroupe 1\nGroupe 2\nGroupe 3\nGroupe 4\nGroupe 5\nGroupe 6\n\n\n\n\n\n\nLundi Après midi\nDébut en Python\n{{Simulator}}\nGraphical Neural Network\nNimble\nCalling C++ from Python\n\n\n\n\n\nMardi Matin 1\nCours future\n\n\n\n\n\n\n\n\n\nMardi Matin 2\nPackaging/Testing\nJulia\nDiffusion\nNimble\n\n\n\n\n\n\nMardi Après midi\nPackaging/Testing\nJulia\nDiffusion\nNimble\n\n\n\n\n\n\nMercredi Matin 1\nCours future\n\n\n\n\n\n\n\n\n\nMercredi Matin 2\nRestitution\n\n\n\n\n\n\n\n\n\nJeudi Matin\n{{Rix}}\nShiny Dev\nEnergy and Optimisation\nPINNS\nCTView Network\nEnseignement\n\n\n\n\nJeudi Après Midi\n{{Rix}}\nShiny Dev\nEnergy and Optimisation\nPINNS\nCTView Network\nEnseignement\n\n\n\n\nVendredi Matin\nRestitution"
  },
  {
    "objectID": "index.html#participants",
    "href": "index.html#participants",
    "title": "FinistR : bootcamp R à Roscoff",
    "section": "Participants",
    "text": "Participants\nBaptiste Alglave, Emré Anakok, Julie Aubert, Pierre Barbillon, Julien Chiquet, Lucia Clarotto, Caroline Cognot, Annaïg De Walsche, Sophie Donnet, Marie-Pierre Etienne, Armand Favrot, Hugo Gangloff, Pierre Gloaguen, Adeline Leclercq Samson, Tristan Mary-Huard, Cédric Midoux, Pierre Neuvial, Aymeric Stamm, Florian Teste, François Victor, Emily Walker."
  },
  {
    "objectID": "index.html#soutien",
    "href": "index.html#soutien",
    "title": "FinistR : bootcamp R à Roscoff",
    "section": "Soutien",
    "text": "Soutien"
  },
  {
    "objectID": "c_python.html",
    "href": "c_python.html",
    "title": "Du C++ depuis Python",
    "section": "",
    "text": "On propose dans ce tutoriel une méthode pour l’utilisation de code C / C++ depuis Python. Les ressources à ce sujet sont très nombreuses, aussi nous allons nous placer dans un cas un peu particulier et moins étudié, c’est à dire :\n\nNous découvrirons bazel comme outil de compilation.\nNous utiliserons la bibliothèque pybind11_bazel et plus précisément les objets PyCapsule de cette bibliothèque.\nNous ouvrirons la PyCapsule côté Python en la reconstruisant avec la bibliothèque ctypes.\n\nNote: Ces choix sont motivés par l’objectif à plus long terme d’étendre la bibliothèque JAX avec du code C / C++ personnel, non couvert dans ce tutoriel. Voir par exemple https://github.com/dfm/extending-jax pour l’ancienne pipeline. Depuis JAX 0.4.31 sortie le 29 juillet 2024, l’intégration d’appel à du code C / C++ perso a été simplifié par jax.extend.ffi, voir par exemple https://jax.readthedocs.io/en/latest/ffi.html.\n\n\n\nNous allons travailler dans un projet structuré tel que :\nc_python/\n|___bazel-bin/\n||______ ...\n|___bazel-c_python/\n||______ ...\n|___bazel-out/\n||______ ...\n|___bazel-testlogs/\n||______ ...\n|___lib/\n||______BUILD.bazel\n||______loop.cpp\n|___loop.py\n|___MODULE.bazel\n|___WORKSPACE.bazel\nNous allons détailler la création et le contenu de chacun des éléments de l’arborescence.\n\n\n\n\nNous avons besoin d’un environnement Python simple dont nous ne détaillons pas l’installation.\nPour les utilisateurs linux, bazelisk est l’approche la plus simple pour installer bazel.\npybind11_bazel fournira pybind11.\n\n\n\n\nSoit le fichier loop.cpp :\n#include &lt;pybind11/pybind11.h&gt;\n#include &lt;cstdint&gt;\n#include &lt;cmath&gt;\n\ntemplate &lt;typename T&gt;\nvoid loop_a_lot(const std::int64_t L, T* result) {\n    *result = 0;\n    for (int l1 = 0; l1 &lt; L; ++l1) {\n        for (int l2 = 0; l2 &lt; L; ++l2) {\n            for (int l3 = 0; l3 &lt; L; ++l3) {\n                for (int l4 = 0; l4 &lt; L; ++l4) {\n                    *result += exp(3.14);\n                }\n            }\n        }\n    }\n  }\n\npybind11::dict Registrations() {\n  pybind11::dict dict;\n  dict[\"loop_f32_plain\"] = pybind11::capsule(reinterpret_cast&lt;void*&gt;(loop_a_lot&lt;float&gt;), \"loop_plain\");\n  dict[\"loop_f64_plain\"] = pybind11::capsule(reinterpret_cast&lt;void*&gt;(loop_a_lot&lt;double&gt;), \"loop_plain\");\n  return dict;\n}\n\nPYBIND11_MODULE(pyloop, m) {   // please match the pybind_extension target name\n  m.def(\"registrations\", &Registrations); \n}\nLes premières lignes définissent la fonction loop_a_lot simpliste que nous voulons appeler depuis Python. La deuxième partie du code utilise la bibliothèque pybind11. Nous créons un module pyloop auquel on donne une fonction registrations qui retournera un dictionnaire avec deux entrées : une fonction loop_a_lot pour chacun des types float et double. Au détail près que nous encapsulons ces fonctions dans des PyCapsules, un object Python opaque, que Python ne semble pas être censé lire (…useful for C extension modules who need to pass an opaque value (as a void * pointer) through Python code to other C code… https://docs.python.org/3/c-api/capsule.html)\n\n\n\nNous donnons l’origine des règles de compilations bazel dans le fichier WORKSPACE.bazel :\nload(\"@bazel_tools//tools/build_defs/repo:http.bzl\", \"http_archive\")\nhttp_archive(\n  name = \"pybind11_bazel\",\n  strip_prefix = \"pybind11_bazel-2.12.0\",\n  urls = [\"https://github.com/pybind/pybind11_bazel/archive/refs/tags/v2.12.0.zip\"],\n)\n# We still require the pybind library.\nhttp_archive(\n  name = \"pybind11\",\n  build_file = \"@pybind11_bazel//:pybind11-BUILD.bazel\",\n  strip_prefix = \"pybind11-2.13.0\",\n  urls = [\"https://github.com/pybind/pybind11/archive/refs/tags/v2.13.0.zip\"],\n)\nMODULE.bazel contient :\nbazel_dep(name = \"rules_python\", version = \"0.33.2\")\nLe fichier BUILD.bazel utilise la règle pybind_extension de pybind11_bazel :\nload(\"@pybind11_bazel//:build_defs.bzl\", \"pybind_extension\")\n\npybind_extension(\n    name = \"pyloop\", # please match the PYBIND MODULE NAME\n    srcs = [\"loop.cpp\"],\n)\nEn se plaçant à la racine du projet et en exécutant bazel build //lib:pyloop nous obtenons directement le module Python voulu. Toute la complexité de la compilation est cachée par bazel. On voit que l’appel à build crée les quatre fichiers bazel-bin, bazel-c_python, bazel-out et bazel-testlogs. En particulier, le module d’intêret se situe dans bazel-bin/lib/.\n\n\n\nNous allons maintenant ouvrir les PyCapsules que nous avons à disposition dans le module pyloop fraîchement compilé, avec l’aide de la bibliothèque ctypes.\n\nOn rappelle que nous nous imposons les PyCapsules car ce sont les objets que nous devons manipuler pour exposer des fonctions C / C++ à JAX (notre objectif futur !). Voir par exemple (https://jax.readthedocs.io/en/latest/_autosummary/jax.extend.ffi.register_ffi_target.html)[https://jax.readthedocs.io/en/latest/_autosummary/jax.extend.ffi.register_ffi_target.html].\nOn note d’emblée que la manipulation de PyCapsule dans Python est compliquée par rapport à d’autres méthodes par lesquelles nous pouvons exposer des objets C / C++ à Python avec pybind11 (voir les tutoriels dans https://github.com/tdegeus/pybind11_examples). En effet, ces objets ne semblent pas être voués à être utilisés dans Python. Ouvrir la capsule avec ctypes constitue néanmoins un bon exercice avec cette bibliothèque.\n\nimport sys\nsys.path.insert(0, 'bazel-bin/lib/')\n\nimport ctypes\nimport numpy as np\n\nimport pyloop\n\nregistrations = pyloop.registrations()\n\nloop_f32_plain_capsule = registrations[\"loop_f32_plain\"]\nloop_f64_plain_capsule = registrations[\"loop_f64_plain\"]\n\n# Following is adapted from https://stackoverflow.com/questions/59887319/python-c-extension-exposing-a-capsule-to-ctypes-in-order-to-use-third-party-c-co\nPyCapsule_GetPointer = ctypes.pythonapi.PyCapsule_GetPointer\nPyCapsule_GetPointer.restype = ctypes.c_void_p\nPyCapsule_GetPointer.argtypes = [ctypes.py_object, ctypes.c_char_p]\n\nloop_f32_plain_ptr = PyCapsule_GetPointer(loop_f32_plain_capsule, b\"loop_plain\")\nloop_f64_plain_ptr = PyCapsule_GetPointer(loop_f64_plain_capsule, b\"loop_plain\")\n\n# This defines the functions signature\nloop_f32_plain_fn_c = ctypes.CFUNCTYPE(None, ctypes.c_int64,\n        ctypes.POINTER(ctypes.c_float))(loop_f32_plain_ptr)\n\nloop_f64_plain_fn_c = ctypes.CFUNCTYPE(None, ctypes.c_int64,\n        ctypes.POINTER(ctypes.c_double))(loop_f64_plain_ptr)\n\nL = ctypes.c_int64(10)\n\nresult_f32 = ctypes.c_float()\nresult_f64 = ctypes.c_double()\n\nout_buf_f32 = ctypes.pointer(result_f32)\nout_buf_f64 = ctypes.pointer(result_f64)\n\nloop_f32_plain_fn_c(L, out_buf_f32)\nloop_f64_plain_fn_c(L, out_buf_f64)\n\n# Print the results\nprint(\"Result (float):\", result_f32.value)\nprint(\"Result (double):\", result_f64.value)\n    Result (float): 231057.875\n    Result (double): 231038.66858726053"
  },
  {
    "objectID": "c_python.html#objectifs",
    "href": "c_python.html#objectifs",
    "title": "Du C++ depuis Python",
    "section": "",
    "text": "On propose dans ce tutoriel une méthode pour l’utilisation de code C / C++ depuis Python. Les ressources à ce sujet sont très nombreuses, aussi nous allons nous placer dans un cas un peu particulier et moins étudié, c’est à dire :\n\nNous découvrirons bazel comme outil de compilation.\nNous utiliserons la bibliothèque pybind11_bazel et plus précisément les objets PyCapsule de cette bibliothèque.\nNous ouvrirons la PyCapsule côté Python en la reconstruisant avec la bibliothèque ctypes.\n\nNote: Ces choix sont motivés par l’objectif à plus long terme d’étendre la bibliothèque JAX avec du code C / C++ personnel, non couvert dans ce tutoriel. Voir par exemple https://github.com/dfm/extending-jax pour l’ancienne pipeline. Depuis JAX 0.4.31 sortie le 29 juillet 2024, l’intégration d’appel à du code C / C++ perso a été simplifié par jax.extend.ffi, voir par exemple https://jax.readthedocs.io/en/latest/ffi.html."
  },
  {
    "objectID": "c_python.html#arborescence-du-projet",
    "href": "c_python.html#arborescence-du-projet",
    "title": "Du C++ depuis Python",
    "section": "",
    "text": "Nous allons travailler dans un projet structuré tel que :\nc_python/\n|___bazel-bin/\n||______ ...\n|___bazel-c_python/\n||______ ...\n|___bazel-out/\n||______ ...\n|___bazel-testlogs/\n||______ ...\n|___lib/\n||______BUILD.bazel\n||______loop.cpp\n|___loop.py\n|___MODULE.bazel\n|___WORKSPACE.bazel\nNous allons détailler la création et le contenu de chacun des éléments de l’arborescence."
  },
  {
    "objectID": "c_python.html#installations",
    "href": "c_python.html#installations",
    "title": "Du C++ depuis Python",
    "section": "",
    "text": "Nous avons besoin d’un environnement Python simple dont nous ne détaillons pas l’installation.\nPour les utilisateurs linux, bazelisk est l’approche la plus simple pour installer bazel.\npybind11_bazel fournira pybind11."
  },
  {
    "objectID": "c_python.html#code-c",
    "href": "c_python.html#code-c",
    "title": "Du C++ depuis Python",
    "section": "",
    "text": "Soit le fichier loop.cpp :\n#include &lt;pybind11/pybind11.h&gt;\n#include &lt;cstdint&gt;\n#include &lt;cmath&gt;\n\ntemplate &lt;typename T&gt;\nvoid loop_a_lot(const std::int64_t L, T* result) {\n    *result = 0;\n    for (int l1 = 0; l1 &lt; L; ++l1) {\n        for (int l2 = 0; l2 &lt; L; ++l2) {\n            for (int l3 = 0; l3 &lt; L; ++l3) {\n                for (int l4 = 0; l4 &lt; L; ++l4) {\n                    *result += exp(3.14);\n                }\n            }\n        }\n    }\n  }\n\npybind11::dict Registrations() {\n  pybind11::dict dict;\n  dict[\"loop_f32_plain\"] = pybind11::capsule(reinterpret_cast&lt;void*&gt;(loop_a_lot&lt;float&gt;), \"loop_plain\");\n  dict[\"loop_f64_plain\"] = pybind11::capsule(reinterpret_cast&lt;void*&gt;(loop_a_lot&lt;double&gt;), \"loop_plain\");\n  return dict;\n}\n\nPYBIND11_MODULE(pyloop, m) {   // please match the pybind_extension target name\n  m.def(\"registrations\", &Registrations); \n}\nLes premières lignes définissent la fonction loop_a_lot simpliste que nous voulons appeler depuis Python. La deuxième partie du code utilise la bibliothèque pybind11. Nous créons un module pyloop auquel on donne une fonction registrations qui retournera un dictionnaire avec deux entrées : une fonction loop_a_lot pour chacun des types float et double. Au détail près que nous encapsulons ces fonctions dans des PyCapsules, un object Python opaque, que Python ne semble pas être censé lire (…useful for C extension modules who need to pass an opaque value (as a void * pointer) through Python code to other C code… https://docs.python.org/3/c-api/capsule.html)"
  },
  {
    "objectID": "c_python.html#compilation-en-un-module-accessible-depuis-python",
    "href": "c_python.html#compilation-en-un-module-accessible-depuis-python",
    "title": "Du C++ depuis Python",
    "section": "",
    "text": "Nous donnons l’origine des règles de compilations bazel dans le fichier WORKSPACE.bazel :\nload(\"@bazel_tools//tools/build_defs/repo:http.bzl\", \"http_archive\")\nhttp_archive(\n  name = \"pybind11_bazel\",\n  strip_prefix = \"pybind11_bazel-2.12.0\",\n  urls = [\"https://github.com/pybind/pybind11_bazel/archive/refs/tags/v2.12.0.zip\"],\n)\n# We still require the pybind library.\nhttp_archive(\n  name = \"pybind11\",\n  build_file = \"@pybind11_bazel//:pybind11-BUILD.bazel\",\n  strip_prefix = \"pybind11-2.13.0\",\n  urls = [\"https://github.com/pybind/pybind11/archive/refs/tags/v2.13.0.zip\"],\n)\nMODULE.bazel contient :\nbazel_dep(name = \"rules_python\", version = \"0.33.2\")\nLe fichier BUILD.bazel utilise la règle pybind_extension de pybind11_bazel :\nload(\"@pybind11_bazel//:build_defs.bzl\", \"pybind_extension\")\n\npybind_extension(\n    name = \"pyloop\", # please match the PYBIND MODULE NAME\n    srcs = [\"loop.cpp\"],\n)\nEn se plaçant à la racine du projet et en exécutant bazel build //lib:pyloop nous obtenons directement le module Python voulu. Toute la complexité de la compilation est cachée par bazel. On voit que l’appel à build crée les quatre fichiers bazel-bin, bazel-c_python, bazel-out et bazel-testlogs. En particulier, le module d’intêret se situe dans bazel-bin/lib/."
  },
  {
    "objectID": "c_python.html#code-python",
    "href": "c_python.html#code-python",
    "title": "Du C++ depuis Python",
    "section": "",
    "text": "Nous allons maintenant ouvrir les PyCapsules que nous avons à disposition dans le module pyloop fraîchement compilé, avec l’aide de la bibliothèque ctypes.\n\nOn rappelle que nous nous imposons les PyCapsules car ce sont les objets que nous devons manipuler pour exposer des fonctions C / C++ à JAX (notre objectif futur !). Voir par exemple (https://jax.readthedocs.io/en/latest/_autosummary/jax.extend.ffi.register_ffi_target.html)[https://jax.readthedocs.io/en/latest/_autosummary/jax.extend.ffi.register_ffi_target.html].\nOn note d’emblée que la manipulation de PyCapsule dans Python est compliquée par rapport à d’autres méthodes par lesquelles nous pouvons exposer des objets C / C++ à Python avec pybind11 (voir les tutoriels dans https://github.com/tdegeus/pybind11_examples). En effet, ces objets ne semblent pas être voués à être utilisés dans Python. Ouvrir la capsule avec ctypes constitue néanmoins un bon exercice avec cette bibliothèque.\n\nimport sys\nsys.path.insert(0, 'bazel-bin/lib/')\n\nimport ctypes\nimport numpy as np\n\nimport pyloop\n\nregistrations = pyloop.registrations()\n\nloop_f32_plain_capsule = registrations[\"loop_f32_plain\"]\nloop_f64_plain_capsule = registrations[\"loop_f64_plain\"]\n\n# Following is adapted from https://stackoverflow.com/questions/59887319/python-c-extension-exposing-a-capsule-to-ctypes-in-order-to-use-third-party-c-co\nPyCapsule_GetPointer = ctypes.pythonapi.PyCapsule_GetPointer\nPyCapsule_GetPointer.restype = ctypes.c_void_p\nPyCapsule_GetPointer.argtypes = [ctypes.py_object, ctypes.c_char_p]\n\nloop_f32_plain_ptr = PyCapsule_GetPointer(loop_f32_plain_capsule, b\"loop_plain\")\nloop_f64_plain_ptr = PyCapsule_GetPointer(loop_f64_plain_capsule, b\"loop_plain\")\n\n# This defines the functions signature\nloop_f32_plain_fn_c = ctypes.CFUNCTYPE(None, ctypes.c_int64,\n        ctypes.POINTER(ctypes.c_float))(loop_f32_plain_ptr)\n\nloop_f64_plain_fn_c = ctypes.CFUNCTYPE(None, ctypes.c_int64,\n        ctypes.POINTER(ctypes.c_double))(loop_f64_plain_ptr)\n\nL = ctypes.c_int64(10)\n\nresult_f32 = ctypes.c_float()\nresult_f64 = ctypes.c_double()\n\nout_buf_f32 = ctypes.pointer(result_f32)\nout_buf_f64 = ctypes.pointer(result_f64)\n\nloop_f32_plain_fn_c(L, out_buf_f32)\nloop_f64_plain_fn_c(L, out_buf_f64)\n\n# Print the results\nprint(\"Result (float):\", result_f32.value)\nprint(\"Result (double):\", result_f64.value)\n    Result (float): 231057.875\n    Result (double): 231038.66858726053"
  },
  {
    "objectID": "Bipartite_GNN.html",
    "href": "Bipartite_GNN.html",
    "title": "Graph Neural Networks for bipartite graphs with pytorch_geometric",
    "section": "",
    "text": "library(reticulate)\n\nThe notebook shows a classical use of the package pytorch_numeric which develops Graph Neural Networks based on the logics of pytorch.\nHere we show a basic graph with the library networkx.\nWe use the dataset KarateClub() which is organized as the typical object used by pytorch_geometric: it is a list of graphs where each graph must have an object x, that represents the features of the nodes, and an object edge_index, a 2-row tensor which defines the links between the nodes (plus other possible information about the graph).\n\nimport torch\nimport networkx as nx\nimport matplotlib.pyplot as plt\nimport numpy as np\n\ndef visualize_graph(G, color):\n    plt.figure(figsize=(7,7))\n    plt.xticks([])\n    plt.yticks([])\n    nx.draw_networkx(G, pos=nx.spring_layout(G, seed=42), with_labels=False,\n                     node_color=color, cmap=\"Set2\")\n    plt.show()\n\n\ndef visualize_embedding(h, color, epoch=None, loss=None):\n    plt.figure(figsize=(7,7))\n    plt.xticks([])\n    plt.yticks([])\n    h = h.detach().cpu().numpy()\n    plt.scatter(h[:, 0], h[:, 1], s=140, c=color, cmap=\"Set2\")\n    if epoch is not None and loss is not None:\n        plt.xlabel(f'Epoch: {epoch}, Loss: {loss.item():.4f}', fontsize=16)\n    plt.show()\n\n\nfrom torch_geometric.datasets import KarateClub\n\ndataset = KarateClub()\nprint(f'Dataset: {dataset}:')\n\nDataset: KarateClub():\n\nprint(f'Number of graphs: {len(dataset)}')\n\nNumber of graphs: 1\n\nprint(f'Number of features: {dataset.num_features}')\n\nNumber of features: 34\n\nprint(f'Number of classes: {dataset.num_classes}')\n\nNumber of classes: 4\n\ndata = dataset[0]  # Get the first graph object.\n\nprint(data)\n\nData(x=[34, 34], edge_index=[2, 156], y=[34], train_mask=[34])\n\n# Gather some statistics about the graph.\nprint(f'Number of nodes: {data.num_nodes}')\n\nNumber of nodes: 34\n\nprint(f'Number of edges: {data.num_edges}')\n\nNumber of edges: 156\n\nprint(f'Average node degree: {data.num_edges / data.num_nodes:.2f}')\n\nAverage node degree: 4.59\n\nprint(f'Number of training nodes: {data.train_mask.sum()}')\n\nNumber of training nodes: 4\n\nprint(f'Training node label rate: {int(data.train_mask.sum()) / data.num_nodes:.2f}')\n\nTraining node label rate: 0.12\n\nprint(f'Has isolated nodes: {data.has_isolated_nodes()}')\n\nHas isolated nodes: False\n\nprint(f'Has self-loops: {data.has_self_loops()}')\n\nHas self-loops: False\n\nprint(f'Is undirected: {data.is_undirected()}')\n\nIs undirected: True\n\nedge_index = data.edge_index # the objet to give to torch_geometric, along with the features\nprint(edge_index)\n\ntensor([[ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  1,  1,\n          1,  1,  1,  1,  1,  1,  1,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  3,\n          3,  3,  3,  3,  3,  4,  4,  4,  5,  5,  5,  5,  6,  6,  6,  6,  7,  7,\n          7,  7,  8,  8,  8,  8,  8,  9,  9, 10, 10, 10, 11, 12, 12, 13, 13, 13,\n         13, 13, 14, 14, 15, 15, 16, 16, 17, 17, 18, 18, 19, 19, 19, 20, 20, 21,\n         21, 22, 22, 23, 23, 23, 23, 23, 24, 24, 24, 25, 25, 25, 26, 26, 27, 27,\n         27, 27, 28, 28, 28, 29, 29, 29, 29, 30, 30, 30, 30, 31, 31, 31, 31, 31,\n         31, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 33, 33, 33, 33, 33,\n         33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33],\n        [ 1,  2,  3,  4,  5,  6,  7,  8, 10, 11, 12, 13, 17, 19, 21, 31,  0,  2,\n          3,  7, 13, 17, 19, 21, 30,  0,  1,  3,  7,  8,  9, 13, 27, 28, 32,  0,\n          1,  2,  7, 12, 13,  0,  6, 10,  0,  6, 10, 16,  0,  4,  5, 16,  0,  1,\n          2,  3,  0,  2, 30, 32, 33,  2, 33,  0,  4,  5,  0,  0,  3,  0,  1,  2,\n          3, 33, 32, 33, 32, 33,  5,  6,  0,  1, 32, 33,  0,  1, 33, 32, 33,  0,\n          1, 32, 33, 25, 27, 29, 32, 33, 25, 27, 31, 23, 24, 31, 29, 33,  2, 23,\n         24, 33,  2, 31, 33, 23, 26, 32, 33,  1,  8, 32, 33,  0, 24, 25, 28, 32,\n         33,  2,  8, 14, 15, 18, 20, 22, 23, 29, 30, 31, 33,  8,  9, 13, 14, 15,\n         18, 19, 20, 22, 23, 26, 27, 28, 29, 30, 31, 32]])\n\nfrom torch_geometric.utils import to_networkx\n\nG = to_networkx(data, to_undirected=True)\nvisualize_graph(G, color=data.y)"
  },
  {
    "objectID": "Bipartite_GNN.html#graph-class",
    "href": "Bipartite_GNN.html#graph-class",
    "title": "Graph Neural Networks for bipartite graphs with pytorch_geometric",
    "section": "",
    "text": "library(reticulate)\n\nThe notebook shows a classical use of the package pytorch_numeric which develops Graph Neural Networks based on the logics of pytorch.\nHere we show a basic graph with the library networkx.\nWe use the dataset KarateClub() which is organized as the typical object used by pytorch_geometric: it is a list of graphs where each graph must have an object x, that represents the features of the nodes, and an object edge_index, a 2-row tensor which defines the links between the nodes (plus other possible information about the graph).\n\nimport torch\nimport networkx as nx\nimport matplotlib.pyplot as plt\nimport numpy as np\n\ndef visualize_graph(G, color):\n    plt.figure(figsize=(7,7))\n    plt.xticks([])\n    plt.yticks([])\n    nx.draw_networkx(G, pos=nx.spring_layout(G, seed=42), with_labels=False,\n                     node_color=color, cmap=\"Set2\")\n    plt.show()\n\n\ndef visualize_embedding(h, color, epoch=None, loss=None):\n    plt.figure(figsize=(7,7))\n    plt.xticks([])\n    plt.yticks([])\n    h = h.detach().cpu().numpy()\n    plt.scatter(h[:, 0], h[:, 1], s=140, c=color, cmap=\"Set2\")\n    if epoch is not None and loss is not None:\n        plt.xlabel(f'Epoch: {epoch}, Loss: {loss.item():.4f}', fontsize=16)\n    plt.show()\n\n\nfrom torch_geometric.datasets import KarateClub\n\ndataset = KarateClub()\nprint(f'Dataset: {dataset}:')\n\nDataset: KarateClub():\n\nprint(f'Number of graphs: {len(dataset)}')\n\nNumber of graphs: 1\n\nprint(f'Number of features: {dataset.num_features}')\n\nNumber of features: 34\n\nprint(f'Number of classes: {dataset.num_classes}')\n\nNumber of classes: 4\n\ndata = dataset[0]  # Get the first graph object.\n\nprint(data)\n\nData(x=[34, 34], edge_index=[2, 156], y=[34], train_mask=[34])\n\n# Gather some statistics about the graph.\nprint(f'Number of nodes: {data.num_nodes}')\n\nNumber of nodes: 34\n\nprint(f'Number of edges: {data.num_edges}')\n\nNumber of edges: 156\n\nprint(f'Average node degree: {data.num_edges / data.num_nodes:.2f}')\n\nAverage node degree: 4.59\n\nprint(f'Number of training nodes: {data.train_mask.sum()}')\n\nNumber of training nodes: 4\n\nprint(f'Training node label rate: {int(data.train_mask.sum()) / data.num_nodes:.2f}')\n\nTraining node label rate: 0.12\n\nprint(f'Has isolated nodes: {data.has_isolated_nodes()}')\n\nHas isolated nodes: False\n\nprint(f'Has self-loops: {data.has_self_loops()}')\n\nHas self-loops: False\n\nprint(f'Is undirected: {data.is_undirected()}')\n\nIs undirected: True\n\nedge_index = data.edge_index # the objet to give to torch_geometric, along with the features\nprint(edge_index)\n\ntensor([[ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  1,  1,\n          1,  1,  1,  1,  1,  1,  1,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  3,\n          3,  3,  3,  3,  3,  4,  4,  4,  5,  5,  5,  5,  6,  6,  6,  6,  7,  7,\n          7,  7,  8,  8,  8,  8,  8,  9,  9, 10, 10, 10, 11, 12, 12, 13, 13, 13,\n         13, 13, 14, 14, 15, 15, 16, 16, 17, 17, 18, 18, 19, 19, 19, 20, 20, 21,\n         21, 22, 22, 23, 23, 23, 23, 23, 24, 24, 24, 25, 25, 25, 26, 26, 27, 27,\n         27, 27, 28, 28, 28, 29, 29, 29, 29, 30, 30, 30, 30, 31, 31, 31, 31, 31,\n         31, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 33, 33, 33, 33, 33,\n         33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33],\n        [ 1,  2,  3,  4,  5,  6,  7,  8, 10, 11, 12, 13, 17, 19, 21, 31,  0,  2,\n          3,  7, 13, 17, 19, 21, 30,  0,  1,  3,  7,  8,  9, 13, 27, 28, 32,  0,\n          1,  2,  7, 12, 13,  0,  6, 10,  0,  6, 10, 16,  0,  4,  5, 16,  0,  1,\n          2,  3,  0,  2, 30, 32, 33,  2, 33,  0,  4,  5,  0,  0,  3,  0,  1,  2,\n          3, 33, 32, 33, 32, 33,  5,  6,  0,  1, 32, 33,  0,  1, 33, 32, 33,  0,\n          1, 32, 33, 25, 27, 29, 32, 33, 25, 27, 31, 23, 24, 31, 29, 33,  2, 23,\n         24, 33,  2, 31, 33, 23, 26, 32, 33,  1,  8, 32, 33,  0, 24, 25, 28, 32,\n         33,  2,  8, 14, 15, 18, 20, 22, 23, 29, 30, 31, 33,  8,  9, 13, 14, 15,\n         18, 19, 20, 22, 23, 26, 27, 28, 29, 30, 31, 32]])\n\nfrom torch_geometric.utils import to_networkx\n\nG = to_networkx(data, to_undirected=True)\nvisualize_graph(G, color=data.y)"
  },
  {
    "objectID": "Bipartite_GNN.html#unipartite-gnn",
    "href": "Bipartite_GNN.html#unipartite-gnn",
    "title": "Graph Neural Networks for bipartite graphs with pytorch_geometric",
    "section": "2 Unipartite GNN",
    "text": "2 Unipartite GNN\nWe create the architecture of the GNN for a unipartite graph. The architecture is made of a list of graph convolutional layers (GCL, chosen among a list of possible types of convolutions) and a MLP as last layer, which performs the learning task (node classification here). All the layers are followed by an activation function.\nPossible types of graph convolutional layers\nThe init size of the first layer is the number of features and the output size of the last layer depends on the learning task.\nEach GCL is defined as a function of two parameters : input size and output size. When defining the forward function, the GCL is called with two input parameters : x and edge_index.\nWe show the embedding (after the GCLs and before the MLP) after one pass forward to control that no error occurs.\n\nfrom torch.nn import Linear\nfrom torch_geometric.nn import GCNConv\n\nclass GCN(torch.nn.Module):\n    def __init__(self):\n        super().__init__()\n        torch.manual_seed(1234)\n        self.conv1 = GCNConv(dataset.num_features, 4) # num_features here is 34 (because of identity matrix), but can be 1 (for example with degree of nodes)\n        self.conv2 = GCNConv(4, 4)\n        self.conv3 = GCNConv(4, 2)\n        self.classifier = Linear(2, dataset.num_classes)\n\n    def forward(self, x, edge_index): # here the two objects needed by pytorch_geometric\n        h = self.conv1(x, edge_index)\n        h = h.tanh()\n        h = self.conv2(h, edge_index)\n        h = h.tanh()\n        h = self.conv3(h, edge_index)\n        h = h.tanh()  # Final GNN embedding space.\n        \n        # Apply a final (linear) classifier.\n        out = self.classifier(h)\n\n        return out, h\n\nmodel = GCN()\nprint(model)\n\nGCN(\n  (conv1): GCNConv(34, 4)\n  (conv2): GCNConv(4, 4)\n  (conv3): GCNConv(4, 2)\n  (classifier): Linear(in_features=2, out_features=4, bias=True)\n)\n\n_, h = model(data.x, data.edge_index)\nprint(f'Embedding shape: {list(h.shape)}')\n\nEmbedding shape: [34, 2]\n\nvisualize_embedding(h, color=data.y)\n\n\n\n\n\n\n\n\nWe then train the model with using the classical pytorch workflow defining a loss (here Cross Entropy), an optimizer (here Adam) and the number of epochs (here 151). We show the embedding every 50 epochs.\n\nimport time\n\n# Exactly the same as in torch\n\ncriterion = torch.nn.CrossEntropyLoss()  # Define loss criterion --&gt; for classification.\noptimizer = torch.optim.Adam(model.parameters(), lr=0.01)  # Define optimizer.\n\ndef train(data):\n    optimizer.zero_grad()  # Clear gradients.\n    out, h = model(data.x, data.edge_index)  # Perform a single forward pass.\n    loss = criterion(out[data.train_mask], data.y[data.train_mask])  # Compute the loss solely based on the training nodes.\n    loss.backward()  # Derive gradients.\n    optimizer.step()  # Update parameters based on gradients.\n    return loss, h\n\nfor epoch in range(151):\n    loss, h = train(data)\n    if epoch % 50 == 0:\n        visualize_embedding(h, color=data.y, epoch=epoch, loss=loss)\n        time.sleep(0.3)"
  },
  {
    "objectID": "Bipartite_GNN.html#bipartite-gnn",
    "href": "Bipartite_GNN.html#bipartite-gnn",
    "title": "Graph Neural Networks for bipartite graphs with pytorch_geometric",
    "section": "3 Bipartite GNN",
    "text": "3 Bipartite GNN\nTu generalize GNN to bipartite graphs, we first need to define the type of data as BipartiteData which inherits from Data. The two types of nodes will be called source nodes and target nodes. The new object creates the source nodes and target nodes with their respective features (x_s and x_t), possibly different in size. The 2 rows in edges_index correspond to the source and target nodes, respectively.\n\nfrom torch_geometric.data import Data\nfrom torch_geometric.loader import DataLoader\nfrom torch_geometric.nn import SAGEConv\n\nclass BipartiteData(Data):\n    def __inc__(self, key, value, *args, **kwargs):\n        if key == 'edge_index':\n            return torch.tensor([[self.x_s.size(0)], [self.x_t.size(0)]])  # source and target (two classes of bipartite graph)\n        return super().__inc__(key, value, *args, **kwargs)\n\n\nx_s = torch.randn(2, 4)  # 2 nodes, 4 features.\nx_t = torch.randn(3, 2)  # 3 nodes, 2 features.\n\nedge_index = torch.tensor([\n    [0, 0, 1, 1],\n    [0, 1, 1, 2],\n])\n\ndata = BipartiteData(x_s=x_s, x_t=x_t, edge_index=edge_index)\n\n# Plot of graph\nedge_list = list(zip(edge_index[0].tolist(),(edge_index[1]+1+max(edge_index[0])).tolist()))\nG=nx.from_edgelist(edge_list)\n\nnx.draw_networkx(G, pos=nx.bipartite_layout(G,edge_index[0].tolist(),aspect_ratio=2), with_labels=False)\n\n\n\n\n\n\n\n\nThe convolution layer is directed, hence it must be defined with the tuple of feature size of source and target nodes and the size of output of the layer, which will be given as new features to the nodes of the target.\nWe call the function with the tuple of features (x_s, x_t) and the `edge_index`.\nTo perform the inverse convolution from the target nodes to the source nodes, we must invert the values of the tuple but also invert the rows in the `edge_index`.\nOnly some of the GCLs are adapted to this configuration (look at the cheatsheet).\n\n# Direct and inverse convolutions\nConv_s_t = SAGEConv((4,2),7) # num of features is the tuple (s,t) and output is the num of features of target\n\nprint(Conv_s_t((x_s,x_t),edge_index))\n\ntensor([[ 0.5198,  0.5703,  0.6759,  0.1716, -0.6514,  0.0479, -0.5577],\n        [-0.0901,  1.5395,  0.3465,  0.0784, -1.5599,  1.1494, -0.5391],\n        [-1.0943,  0.7638,  0.2591,  0.4076, -0.5398,  0.6612, -2.2322]],\n       grad_fn=&lt;AddBackward0&gt;)\n\nConv_t_s = SAGEConv((2,4),7,aggr = \"max\")\nprint(Conv_t_s((x_t,x_s),edge_index[[1,0]])) # I need to invert the order of edge_index\n\ntensor([[-0.4040,  0.4052, -0.1868,  0.9336,  0.0030,  0.6546,  1.0335],\n        [ 0.5958, -0.1849,  0.2907,  1.4262, -0.9557,  0.4383,  0.6614]],\n       grad_fn=&lt;AddBackward0&gt;)\n\n\n\n3.1 Case study\nLatent Block Model for classification task\nTwo groups in sources, two groups in targets, with corresponding probability of connection.\nEach node has two features: 1 and its degree.\n\nn1= 25\nn2 = 50 \n\nW1 = np.random.randint(2,size=n1)\nW2 = np.random.randint(2,size=n2)\nP = np.array([[0.9,0.8],[0.5,0.1]])\nM = P[:,W2][W1,:]\n\nm = np.random.binomial(1, M)\nplt.imshow(m[np.argsort(W1),:][:,np.argsort(W2)],cmap=\"gray_r\")\n\n&lt;matplotlib.image.AxesImage object at 0x17f778580&gt;\n\nedge_index = torch.LongTensor(([np.where(m)[0],np.where(m)[1]]))\n\n&lt;string&gt;:2: UserWarning: Creating a tensor from a list of numpy.ndarrays is extremely slow. Please consider converting the list to a single numpy.ndarray with numpy.array() before converting to a tensor. (Triggered internally at /Users/runner/work/pytorch/pytorch/pytorch/torch/csrc/utils/tensor_new.cpp:281.)\n\n\n# 1 (to count for how many neighbors) + degree  (random choice, but good when we have no other information on the network)\n\nx_s = torch.Tensor(m.sum(1).reshape(-1,1))\nx_s = torch.concat((x_s,torch.ones(x_s.shape[0],1)),1)\nx_t = torch.Tensor(m.sum(0).reshape(-1,1))\nx_t = torch.concat((x_t,torch.ones(x_t.shape[0],1)),1)\n\ndata = Data(x_s=x_s, x_t=x_t, edge_index=edge_index)\n\n\n\n\n\n\n\n\nWe define an architecture for the bipartite GNN.\n\nclass BGCN(torch.nn.Module):\n    def __init__(self):\n        super().__init__()\n        torch.manual_seed(1234)\n        self.conv1 = SAGEConv((x_s.shape[1],x_t.shape[1]),5) \n        self.conv2 = SAGEConv((x_t.shape[1],x_s.shape[1]),10)\n        \n        self.conv3 = SAGEConv((5,10), 4)\n        self.conv4 = SAGEConv((10,5), 4) \n\n        self.classifier1 = Linear(4,2)\n        self.classifier2 = Linear(4,2)\n\n    def forward(self, x, edge_index):\n        x_1,x_2 = x\n        h1 = self.conv1((x_1,x_2), edge_index) #n2 x 5\n        h1 = h1.tanh()\n        \n        h2 = self.conv2((x_2,x_1), edge_index[[1,0]]) #n1 x 10 # invert edge_index for the inverse convolution\n        h2 = h2.tanh()\n        \n        h3 = self.conv3((h1,h2), edge_index[[1,0]])  #n1 x 4\n        h3_2 = h3.tanh()\n        \n        h4 = self.conv4((h2,h1), edge_index) #n2 x 4\n        h4_2 = h4.tanh() # Final GNN embedding space.\n        \n        # Apply a final (linear) classifier.\n        out1 = self.classifier1(h3_2) #n1 x 4\n        out2 = self.classifier2(h4_2) #n2 x 4\n\n        return out1,out2, h3,h4\n\nBGCN1 = BGCN()\nout1,out2, h3,h4= BGCN1((x_s,x_t),edge_index) \n\nH =torch.concat([h3,h4])\ncolor0 = np.concatenate([W1,W2+2])\n\nvisualize_embedding(H, color=color0)\n\n\n\n\n\n\n\n\nWe train the model as above and print the AUC for the classes of sources and targets.\n\nimport time\nfrom sklearn.metrics import roc_auc_score\nfrom sklearn.model_selection import train_test_split\n\ncriterion = torch.nn.CrossEntropyLoss()  # Define loss criterion.\noptimizer = torch.optim.Adam(BGCN1.parameters(), lr=0.01)  # Define optimizer.\n\ntrain_mask,test_mask = train_test_split(np.arange(n1),test_size = 0.2,stratify = W1)\ntrain_mask2,test_mask2 = train_test_split(np.arange(n2),test_size = 0.2,stratify = W2)\n\ndef train():\n    optimizer.zero_grad()  # Clear gradients.\n    out1,out2, h3,h4= BGCN1((x_s,x_t),edge_index)  # Perform a single forward pass.\n    loss1 = criterion(out1[train_mask], torch.LongTensor(W1)[train_mask])  # Compute the loss solely based on the training nodes.\n    loss2 = criterion(out2[train_mask2], torch.LongTensor(W2)[train_mask2])\n    loss = loss1+loss2\n    loss.backward()  # Derive gradients.\n    optimizer.step()  # Update parameters based on gradients.\n    return loss,out1,out2, h3,h4\n\nfor epoch in range(101):\n    loss,out1,out2, h3,h4 = train()\n    if epoch % 50 == 0:\n        H =torch.concat([h3,h4])\n        color0 = np.concatenate([W1,W2+2])\n        visualize_embedding(H, color=color0, epoch=epoch, loss=loss)\n        time.sleep(0.3)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\ny_pred1 = out1[test_mask].argmax(1).detach().numpy()\ny_pred2 = out2[test_mask2].argmax(1).detach().numpy()\nprint(\"AUC 1 : \",roc_auc_score(W1[test_mask],y_pred1))\n\nAUC 1 :  1.0\n\nprint(\"AUC 2 : \",roc_auc_score(W2[test_mask2],y_pred2))\n\nAUC 2 :  0.8"
  },
  {
    "objectID": "Bipartite_GNN.html#mini-batches-for-pooling-operation-in-gnns",
    "href": "Bipartite_GNN.html#mini-batches-for-pooling-operation-in-gnns",
    "title": "Graph Neural Networks for bipartite graphs with pytorch_geometric",
    "section": "4 Mini-batches for pooling operation in GNNs",
    "text": "4 Mini-batches for pooling operation in GNNs\nThe function DataLoader called with a list of graphs and the parameter batch_size creates a new UNCONNECTED graph with the as many different graphs as given in batch_size.\nOften, it is useful to be able to distinguish nodes from one graph to the other for different objectives such as graph classification. To keep track of which nodes belong to which graph, we can use batch.batch, that returns a vector of indices pairing each target node to its graph.\n\nfrom torch_geometric.nn import  pool\nfrom torch_geometric.loader import DataLoader\n\nx_s = torch.randn(2, 16)  # 2 nodes.\nx_t = torch.randn(3, 10)  # 3 nodes.\nedge_index = torch.tensor([\n    [0, 0, 1, 1],\n    [0, 1, 1, 2],\n])\n\ndata = BipartiteData(x_s=x_s, x_t=x_t, edge_index=edge_index,num_nodes = x_t.shape[0])\n    \ndata_list = [data, data, data, data, data, data] # 6 identical graphs (but can be different in size, features, ...\nloader = DataLoader(data_list, batch_size=3) # the dataloader creates a new UNCONNECTED graph with the 3 different graphs\nbatch = next(iter(loader))\n\nprint(\"batch \", batch)\n\nbatch  BipartiteDataBatch(edge_index=[2, 12], x_s=[6, 16], x_t=[9, 10], num_nodes=9, batch=[9], ptr=[4])\n\nprint(\"edge_index \", batch.edge_index)\n\nedge_index  tensor([[0, 0, 1, 1, 2, 2, 3, 3, 4, 4, 5, 5],\n        [0, 1, 1, 2, 3, 4, 4, 5, 6, 7, 7, 8]])\n\nprint(\"node index \", batch.batch) # these are batches for target nodes (ONLY), vector of indexes\n\nnode index  tensor([0, 0, 0, 1, 1, 1, 2, 2, 2])\n\n\n\nedge_list = list(zip(batch.edge_index[0].tolist(),(batch.edge_index[1]+1+max(batch.edge_index[0])).tolist()))\nG=nx.from_edgelist(edge_list)\n\nnx.draw_networkx(G, pos=nx.bipartite_layout(G,batch.edge_index[0].tolist(),aspect_ratio=2), with_labels=False)\n\n\n\n\n\n\n\n\nIf we want to pair also the source nodes, we can use the following code.\n\n# code for creating batches for source nodes, vector of indexes\nbatch_s = torch.cat([torch.full((data.x_s.size(0),), i, dtype=torch.long) for i, data in enumerate(batch.to_data_list())])\n\nprint(pool.global_add_pool(batch.x_t,batch.batch).shape)\n\ntorch.Size([3, 10])\n\nprint(pool.global_add_pool(batch.x_s,batch_s).shape)\n\ntorch.Size([3, 16])\n\n\n\n4.1 Real case study\nData are a list of interactions between plants and insects collected from different studies. We also know how data were collected for each study : Transect or Timed observation. This information is encoded in the boolean TO (= 1 for Timed observation). The objective is to retrieve the variable TO from the networks (graph classification).\n\n#%% Exemple on real dataset\nimport pandas as pandas\nfrom sknetwork.data import from_edge_list\nfrom torch_geometric.utils import degree\nfrom sklearn.model_selection import train_test_split\n\nNetworks = pandas.read_csv(\"Interaction data Mael.txt\", encoding=\"latin-1\",sep=\"\\t\")\nNetworks[\"plant\"] = Networks['plantgenus'] + \"_\"+ Networks['plantspecies']\nNetworks[\"insects\"] = Networks[\"insectgenus\"]+ \"_\"+ Networks[\"insectspecies\"]\n\nsupinfo = pandas.read_excel(\"supinfo.xlsx\",1)\n#torch.Tensor((supinfo[supinfo[\"Idweb\"]==k][\"Sampling_type\"]==\"TO\").values*1)\n\ndata_list = []\nid_network_aggreg= Networks[\"id_network_aggreg\"].unique()\nfor k in id_network_aggreg:\n    Networks2 =Networks[[\"plant\",\"insects\"]][Networks[\"id_network_aggreg\"]==k]\n    graph = from_edge_list(edge_list=list(Networks2.itertuples(index=False)),bipartite=True)\n    biadjacency = graph.biadjacency.tocoo()\n    edge_index = torch.LongTensor([graph.biadjacency.tocoo().row,graph.biadjacency.tocoo().col])\n    TO =  torch.Tensor((supinfo[supinfo[\"Idweb\"]==k][\"Sampling_type\"]==\"TO\").values)*1\n    \n    # we can add arguments in the function to add for example the class of the graph\n    data = BipartiteData(x_s=degree(edge_index[0],num_nodes=biadjacency.shape[0]).reshape(-1,1),\n                         x_t=degree(edge_index[1],num_nodes=biadjacency.shape[1]).reshape(-1,1),\n                         edge_index=edge_index,\n                         TO = TO,\n                         num_nodes =biadjacency.shape[1] ) # number of tartet nodes\n    data_list.append(data)\n\n\nprint(data_list[0])\n\nBipartiteData(edge_index=[2, 544], x_s=[131, 1], x_t=[113, 1], TO=[1], num_nodes=113)\n\nprint(\"data_list len : \", len(data_list))\n\ndata_list len :  123\n\n\nWe define the model architecture. Poolings layers are described here.\nWe add a pooling layer between the CGLs and the MLP in order to agregate the features from target nodes belonging to the same graph in one feature vector for each graph.\nThe pooling is made thanks to the indices vector batch.batch.\n\nfrom torch_geometric.nn import GATConv\n\nclass BGCN(torch.nn.Module):\n    def __init__(self):\n        super().__init__()\n        torch.manual_seed(1234)\n        self.conv1 = GATConv((1,1),5)\n        self.conv2 = SAGEConv((1,1),10)\n        self.conv3 = SAGEConv((self.conv2.out_channels,self.conv1.out_channels), 4)\n        \n        self.classifier1 = Linear(9,15) # 9 because 5 + 4 in the concatanation of h1 and h3\n        self.classifier2 = Linear(15,10)\n        self.classifier3 = Linear(10,1)\n        self.ReLU = torch.nn.ReLU()\n\n    def forward(self, x, edge_index,batch): #  batch is given here as input\n        x_1,x_2 = x\n        h1 = self.conv1((x_1,x_2), edge_index) \n        h1 = h1.tanh()\n        h2 = self.conv2((x_2,x_1), edge_index[[1,0]])\n        h2 = h2.tanh()\n        h3 = self.conv3((h2,h1), edge_index)\n\n        h4 = torch.concat([h1,h3],1) # concatenation in order to have only targets and use batch as indexes \n        \n        #H = pool.global_add_pool(h4,batch) ##Pooling layer ! \n        #H = pool.global_mean_pool(h4,batch)  \n        H = pool.global_max_pool(h4,batch)  # the pooling is made graph after graph (thanks to the argument batch) \n        \n         \n        H1 = self.classifier1(H)\n        H1 = self.ReLU(H1)\n        H1 = self.classifier2(H1)\n        H1 = self.ReLU(H1)\n        H1 = self.classifier3(H1)\n        \n        H1 = torch.nn.Sigmoid()(H1)\n        \n        return H1\n    \n    \nloader = DataLoader(data_list, batch_size=10)\nbatch = next(iter(loader))\nprint(x_t.shape)\n\ntorch.Size([3, 10])\n\nprint(batch.batch.shape)\n\ntorch.Size([1355])\n\n\nBGCN2 = BGCN()\nbatch_s = torch.cat([torch.full((data.x_s.size(0),), i, dtype=torch.long) for i, data in enumerate(batch.to_data_list())])\n\nH=BGCN2((batch.x_s,batch.x_t),batch.edge_index,batch.batch) # don't forget the argument batch.batch (on targets)\n\nWe train the model and show the AUC.\n\ny=[x.TO.item() for x in data_list]\ndata_train,data_test =train_test_split(data_list,stratify = y,test_size = 0.2,random_state=5)\n\nfrom tqdm import tqdm\nBGCN2 = BGCN()\ncriterion = torch.nn.BCELoss() # Binary Cross Entropy\noptimizer = torch.optim.Adam(BGCN2.parameters(), lr=0.01) # Define optimizer.\nloader = DataLoader(data_train, batch_size=10)\n\nloss_list = []\nfor K in tqdm(range(20)):\n    for batch in loader:\n        optimizer.zero_grad()  # Clear gradients.\n        H=BGCN2((batch.x_s,batch.x_t),batch.edge_index,batch.batch)   # Perform a single forward pass.\n        loss = criterion(H,batch.TO.reshape(-1,1))\n        loss.backward() \n        optimizer.step()\n        loss_list.append(loss.item()) # Derive gradients.\n\n\n  0%|          | 0/20 [00:00&lt;?, ?it/s]\n 20%|##        | 4/20 [00:00&lt;00:00, 34.89it/s]\n 40%|####      | 8/20 [00:00&lt;00:00, 36.77it/s]\n 60%|######    | 12/20 [00:00&lt;00:00, 37.96it/s]\n 80%|########  | 16/20 [00:00&lt;00:00, 38.57it/s]\n100%|##########| 20/20 [00:00&lt;00:00, 38.34it/s]\n\nplt.plot(loss_list)\n\n[&lt;matplotlib.lines.Line2D object at 0x33dc7b400&gt;]\n\nloader_train = DataLoader(data_train, batch_size=len(data_train))\nfor batch in loader_train:\n    H=BGCN2((batch.x_s,batch.x_t),batch.edge_index,batch.batch)\n    \nprint(\"AUC train \",roc_auc_score(batch.TO.numpy(),H.detach().numpy()))\n\nAUC train  0.7997448979591836\n\n    \nloader_test = DataLoader(data_test, batch_size=len(data_test))\nfor batch in loader_test:\n    H=BGCN2((batch.x_s,batch.x_t),batch.edge_index,batch.batch)\n\nprint(\"AUC test \",roc_auc_score(batch.TO.numpy(),H.detach().numpy()))\n\nAUC test  0.6753246753246753"
  },
  {
    "objectID": "01_nimble.html",
    "href": "01_nimble.html",
    "title": "Introduction to nimble",
    "section": "",
    "text": "library(compareMCMCs)\nlibrary(ggmcmc)\nlibrary(mvtnorm)\nlibrary(nimble)\nlibrary(nimbleHMC)\nlibrary(tidyverse)"
  },
  {
    "objectID": "01_nimble.html#toy-model",
    "href": "01_nimble.html#toy-model",
    "title": "Introduction to nimble",
    "section": "Toy model",
    "text": "Toy model\nWe observe a sample \\(Y_1,\\dots, Y_n\\) of i.i.d. random variables having a negative binomial distribution with parameter \\(p \\in [0, 1]\\) and \\(\\theta \\in \\mathbb{R}_+^*\\). Formally, for \\(i \\in \\lbrace 1,\\dots, n\\rbrace\\), and \\(k \\in \\mathbb{N}\\), we have that:\n\\[\n\\mathbb{P}\\left(Y_i = k \\vert p, \\theta\\right) = \\frac{\\Gamma(k + \\theta)}{k!\\Gamma(\\theta)}p^\\theta(1 - p)^k\\,.\n\\]\nLet’s simulate data from this model with \\(n = 100, p = 0.4\\) and \\(\\theta = 12\\):\n\nset.seed(123) # For reproducibility\ndata_ex1 &lt;- rnbinom(n = 100, prob = 0.4, size = 12)\n\nOur goal is to estimate \\(p\\) and \\(\\theta\\) from these observations, within a Bayesian framework. For this tutorial, we assume the following priors: \\[\\begin{align*}\n\\theta &\\sim \\mathcal{E}(0.1)\\,,\\\\\np &\\sim \\mathcal{U}\\left[0, 1\\right]\\,.\\\\\n\\end{align*}\\]"
  },
  {
    "objectID": "01_nimble.html#defining-a-negative-binomial-model-in-nimble",
    "href": "01_nimble.html#defining-a-negative-binomial-model-in-nimble",
    "title": "Introduction to nimble",
    "section": "Defining a negative binomial model in nimble",
    "text": "Defining a negative binomial model in nimble\nBasically, as in BUGSor JAGS, the user’s role is to write the way to simulate the data and to give the prior distributions of the unkown. This is done within the nimbleCode function. This function will typically need to use built-in distributions that can be seen in the native documentation. All random variables must be assigned using the ~ symbol while deterministic quantities are assigned using the &lt;- or = as in R. Overall, the syntax is quite similar to R.\n\ncode_neg_bin &lt;- nimbleCode({\n  # Observation model\n  for(i in 1:n){# n is never defined before, it will be a constant\n    y[i] ~ dnbinom(prob, theta)\n  }\n  # PRIORS\n  prob ~ dunif(0, 1)\n  theta ~ dexp(0.1)\n})\n\nNote that in this code, nothing distinguishes observed data from unknown (or latent variables). The order of lines has no importance as everything will be compiled afterwards."
  },
  {
    "objectID": "01_nimble.html#defining-the-nimble-model",
    "href": "01_nimble.html#defining-the-nimble-model",
    "title": "Introduction to nimble",
    "section": "Defining the nimble model",
    "text": "Defining the nimble model\nNow that the code exists, we define the model. That’s here that data and constants will be provided. Typically, data are quantities which are considered as realizations of random variables in the code, while constants are not.\n\nmodel_neg_bin &lt;- nimbleModel(code = code_neg_bin, \n                             name = \"Negative binomial\", \n                             constants = list(n = length(data_ex1)),\n                             data = list(y = data_ex1))\n\nDefining model\n\n\nBuilding model\n\n\nSetting data and initial values\n\n\nRunning calculate on model\n  [Note] Any error reports that follow may simply reflect missing values in model variables.\n\n\nChecking model sizes and dimensions\n\n\n  [Note] This model is not fully initialized. This is not an error.\n         To see which variables are not initialized, use model$initializeInfo().\n         For more information on model initialization, see help(modelInitialization).\n\n\nNote that the code points that we did not give initial guesses (which would typically be starting points for MCMC sampling algorithms). We will do it in the sampling step."
  },
  {
    "objectID": "01_nimble.html#basic-mcmc-sampling",
    "href": "01_nimble.html#basic-mcmc-sampling",
    "title": "Introduction to nimble",
    "section": "Basic MCMC sampling",
    "text": "Basic MCMC sampling\nA direct way to proceed is to use the nimbleMCMC function that provides basic Metropolis Hastings within Gibbs sampling.\n\nposterior_samples_neg_bin &lt;- nimbleMCMC(model_neg_bin,\n                                        inits = list(prob = 0.5, theta = 1),\n                                        nchains = 2, # Number of independent chains \n                                        niter = 10000, # Number of it. per chain\n                                        thin = 10, # Thinning\n                                        nburnin = 1000) # Number of initial iterations discarded\n\nCompiling\n  [Note] This may take a minute.\n  [Note] Use 'showCompilerOutput = TRUE' to see C++ compilation details.\n\n\nrunning chain 1...\n\n\n|-------------|-------------|-------------|-------------|\n|-------------------------------------------------------|\n\n\nrunning chain 2...\n\n\n|-------------|-------------|-------------|-------------|\n|-------------------------------------------------------|"
  },
  {
    "objectID": "01_nimble.html#exploring-the-results",
    "href": "01_nimble.html#exploring-the-results",
    "title": "Introduction to nimble",
    "section": "Exploring the results",
    "text": "Exploring the results\nNow that we have performed MCMC sampling, we can access the results, which are lists (one element per chain) of matrices having \\(n_{\\text{iter}}\\) rows and \\(n_{\\text{parameters}}\\) columns.\n\nstr(posterior_samples_neg_bin)\n\nList of 2\n $ chain1: num [1:900, 1:2] 0.334 0.328 0.333 0.334 0.315 ...\n  ..- attr(*, \"dimnames\")=List of 2\n  .. ..$ : NULL\n  .. ..$ : chr [1:2] \"prob\" \"theta\"\n $ chain2: num [1:900, 1:2] 0.343 0.363 0.379 0.336 0.352 ...\n  ..- attr(*, \"dimnames\")=List of 2\n  .. ..$ : NULL\n  .. ..$ : chr [1:2] \"prob\" \"theta\"\n\n\nTo perform any post processing or plotting results, a bit of formatting must be done.\n\nformatted_results &lt;- imap_dfr(posterior_samples_neg_bin, \n                              function(x, nm){\n                                as.data.frame(x) %&gt;% \n                                  rowid_to_column(var = \"Iteration\") %&gt;% \n                                  mutate(Chain = str_remove(nm, \"chain\"))\n                              }) %&gt;% \n  pivot_longer(cols = -c(\"Iteration\", \"Chain\"),\n               names_to = \"Parameter\", \n               values_to = \"value\")\n\nWe can then perform usual plots.\n\nggplot(formatted_results) +\n  aes(x = Iteration,\n      y = value, color = Chain) +\n  facet_wrap(~Parameter, scales = \"free\") +\n  geom_line() +\n  labs(x = \"Sample ID\", y = \"Parameter value\", color = \"\")\n\n\n\n\n\n\n\n\n\nPackage for automatic formatting of results\nFor ggplotusers, the ggmcmc package provide useful tools for plots and formatting of MCMC outputs in R (not necessarily for the nimble package). This package is suited for any coda object, which is an historic format for MCMC outputs in R. We can specify during the sampling that we want outputs to be in coda.\n\nposterior_samples_neg_bin &lt;- nimbleMCMC(model_neg_bin, \n                                        nchains = 2, \n                                        niter = 10000, \n                                        thin = 10, \n                                        nburnin = 1000,\n                                        samplesAsCodaMCMC = TRUE)\n\nCompiling\n  [Note] This may take a minute.\n  [Note] Use 'showCompilerOutput = TRUE' to see C++ compilation details.\n\n\nrunning chain 1...\n\n\n|-------------|-------------|-------------|-------------|\n|-------------------------------------------------------|\n\n\nrunning chain 2...\n\n\n|-------------|-------------|-------------|-------------|\n|-------------------------------------------------------|\n\n\nWe can see that this modifies the type of output:\n\nstr(posterior_samples_neg_bin)\n\nList of 2\n $ chain1: 'mcmc' num [1:900, 1:2] 0.286 0.31 0.301 0.304 0.348 ...\n  ..- attr(*, \"dimnames\")=List of 2\n  .. ..$ : NULL\n  .. ..$ : chr [1:2] \"prob\" \"theta\"\n  ..- attr(*, \"mcpar\")= num [1:3] 1 900 1\n $ chain2: 'mcmc' num [1:900, 1:2] 0.398 0.412 0.419 0.429 0.433 ...\n  ..- attr(*, \"dimnames\")=List of 2\n  .. ..$ : NULL\n  .. ..$ : chr [1:2] \"prob\" \"theta\"\n  ..- attr(*, \"mcpar\")= num [1:3] 1 900 1\n - attr(*, \"class\")= chr \"mcmc.list\"\n\n\nNow, we can use the ggsfunction which performs the post processing that we made above.\n\nformatted_results &lt;- ggs(posterior_samples_neg_bin)\nformatted_results # same as above\n\n# A tibble: 3,600 × 4\n   Iteration Chain Parameter value\n       &lt;int&gt; &lt;int&gt; &lt;fct&gt;     &lt;dbl&gt;\n 1         1     1 prob      0.286\n 2         2     1 prob      0.310\n 3         3     1 prob      0.301\n 4         4     1 prob      0.304\n 5         5     1 prob      0.348\n 6         6     1 prob      0.325\n 7         7     1 prob      0.308\n 8         8     1 prob      0.346\n 9         9     1 prob      0.358\n10        10     1 prob      0.383\n# ℹ 3,590 more rows\n\n\nThen, everything works as before!."
  },
  {
    "objectID": "01_nimble.html#defining-a-nimblefunction",
    "href": "01_nimble.html#defining-a-nimblefunction",
    "title": "Introduction to nimble",
    "section": "Defining a nimbleFunction",
    "text": "Defining a nimbleFunction\nWhat makes nimble’s popularity is it suitability for statistical programming.\nAs your specific model will certainly requires specific functions, we cannot expect to find all our tools in the built-in function.\nHowever, we can define new functions in a syntax which is pretty similar to R.\n\nAlternative parameterization of the negative binomial\nSuppose now we want to perform negative binomial regression. In this context, we model the expectation (typically through a link to some covariates) of the response variable. Typically, if we denote, for all \\(1\\leq i \\leq n\\), \\(\\mu = \\mathbb{E}\\left[Y_i\\right]\\), we assume the following prior:\n\\[\n\\ln \\mu \\sim \\mathcal{N}\\left(0, 1\\right)\\,.\n\\] Sadly, in nimble, we do not have access to an implementation of the negative binomial distribution parameterized by \\((\\mu,  \\theta)\\). However, we know that: \\[\n\\mu = \\theta \\times \\frac{1 - p}{p}\\,,\n\\] or, equivalently, that: \\[\np = \\frac{\\theta}{\\theta + \\mu}\n\\]\n\nget_p_from_mu &lt;- nimbleFunction(\n  run = function(mu = double(0),\n                 theta = double(0)) { # type declarations\n    returnType(double(0))  # return type declaration\n    output &lt;- theta / (theta + mu)\n    return(output)\n  })\nget_p_from_mu(18, 12) # Works as a usual R function\n\n[1] 0.4\n\n\n\ncode_alternatif &lt;- nimbleCode({\n  # Observation model\n  for(i in 1:n){# n is never defined before, it will be a constant\n    y[i] ~ dnbinom(prob, theta)\n  }\n  # Alternative vectorized formulation \n  # y[1:n] ~ dnbinom(prob, theta)\n  # PRIORS\n  log_mu ~ dnorm(0, 1)\n  theta ~ dexp(0.1)\n  # Quantites deterministes\n  mu &lt;- exp(log_mu)\n  prob &lt;- get_p_from_mu(mu = mu, theta = theta)\n})\n\nmodel_alternatif &lt;- nimbleModel(code = code_alternatif, \n                                name = \"Alternative negative binomial\", \n                                constants = list(n = length(data_ex1)),\n                                data = list(y = data_ex1),\n                                inits = list(mu = 0.5, theta = 1))\n\nDefining model\n\n\nBuilding model\n\n\nSetting data and initial values\n\n\nRunning calculate on model\n  [Note] Any error reports that follow may simply reflect missing values in model variables.\n\n\nChecking model sizes and dimensions\n\n\n  [Note] This model is not fully initialized. This is not an error.\n         To see which variables are not initialized, use model$initializeInfo().\n         For more information on model initialization, see help(modelInitialization).\n\nposterior_samples_alternatif &lt;- nimbleMCMC(model_alternatif, \n                                           nchains = 2, \n                                           niter = 10000, \n                                           thin = 10, \n                                           nburnin = 1000,\n                                           monitors = c(\"prob\", \"theta\"),\n                                           samplesAsCodaMCMC = TRUE)\n\nCompiling\n  [Note] This may take a minute.\n  [Note] Use 'showCompilerOutput = TRUE' to see C++ compilation details.\n\n\nrunning chain 1...\n\n\n|-------------|-------------|-------------|-------------|\n|-------------------------------------------------------|\n\n\nrunning chain 2...\n\n\n|-------------|-------------|-------------|-------------|\n|-------------------------------------------------------|"
  },
  {
    "objectID": "01_nimble.html#defining-new-distribution",
    "href": "01_nimble.html#defining-new-distribution",
    "title": "Introduction to nimble",
    "section": "Defining new distribution",
    "text": "Defining new distribution\nAn alternative is to define a new distribution.\n\ndmynegbin &lt;- nimbleFunction(\n  run = function(x = double(0), \n                 mu = double(0),\n                 theta = double(0),\n                 log = integer(0, default = 0)) {\n    returnType(double(0))\n    prob = get_p_from_mu(mu, theta)\n    output &lt;- dnbinom(x, size = theta, prob = prob, log = log)\n    return(output)\n  })\nregisterDistributions(list(\n  dmynegbin = list(BUGSdist = \"dmynegbin(mu, theta)\",\n                   discrete = TRUE, pqAvail = FALSE)\n))\n\n  [Warning] Random generation function for dmynegbin is not available. NIMBLE is generating a placeholder function, rmynegbin, that will invoke an error if an algorithm needs to simulate from this distribution. Some algorithms (such as random-walk Metropolis MCMC sampling) will work without the ability to simulate from the distribution.  If simulation is needed, provide a nimbleFunction (with no setup code) to do it.\n\n\n\ncode_with_my_dist &lt;- nimbleCode({\n  # Observation model\n  for(i in 1:n){# n is never defined before, it will be a constant\n    y[i] ~ dmynegbin(mu, theta) # my distribution\n  }\n  # PRIORS\n  log_mu ~ dnorm(0, 1)\n  mu &lt;- exp(log_mu)\n  theta ~ dexp(0.1)\n})\n\nmodel_with_my_dist &lt;- nimbleModel(code = code_with_my_dist, \n                                  name = \"Alternative negative binomial\", \n                                  constants = list(n = length(data_ex1)),\n                                  data = list(y = data_ex1),\n                                  inits = list(log_mu = 0.5, theta = 1))\n\nDefining model\n\n\nBuilding model\n\n\nSetting data and initial values\n\n\nRunning calculate on model\n  [Note] Any error reports that follow may simply reflect missing values in model variables.\n\n\nChecking model sizes and dimensions\n\ncompileNimble(model_with_my_dist)\n\nCompiling\n  [Note] This may take a minute.\n  [Note] Use 'showCompilerOutput = TRUE' to see C++ compilation details.\n\n\nDerived CmodelBaseClass created by buildModelInterface for model Alternative negative binomial\n\nposterior_samples_alternatif &lt;- nimbleMCMC(model_with_my_dist, \n                                           nchains = 2, \n                                           niter = 10000, \n                                           thin = 10, \n                                           nburnin = 1000, \n                                           monitors = c(\"mu\", \"theta\"),\n                                           samplesAsCodaMCMC = TRUE)\n\nCompiling\n  [Note] This may take a minute.\n  [Note] Use 'showCompilerOutput = TRUE' to see C++ compilation details.\n\n\nrunning chain 1...\n\n\n|-------------|-------------|-------------|-------------|\n|-------------------------------------------------------|\n\n\nrunning chain 2...\n\n\n|-------------|-------------|-------------|-------------|\n|-------------------------------------------------------|\n\n\n\nposterior_samples_alternatif %&gt;% \n  ggs() %&gt;% \n  ggplot() +\n  aes(x = Iteration,\n      y = value, color = factor(Chain)) +\n  facet_wrap(~Parameter, scales = \"free\") +\n  geom_line() +\n  labs(x = \"Iteration\", y = \"Parameter value\", color = \"\")"
  },
  {
    "objectID": "01_nimble.html#alternative-mcmc-sampler",
    "href": "01_nimble.html#alternative-mcmc-sampler",
    "title": "Introduction to nimble",
    "section": "Alternative MCMC sampler",
    "text": "Alternative MCMC sampler\nOne big strength of nimble are the several samplers that are available in the package."
  },
  {
    "objectID": "01_nimble.html#conjuguate-priors",
    "href": "01_nimble.html#conjuguate-priors",
    "title": "Introduction to nimble",
    "section": "Conjuguate priors",
    "text": "Conjuguate priors\nFirst, nimble is able to identify conjugate priors and make the exact computation of the posterior link."
  },
  {
    "objectID": "01_nimble.html#hmc-algorithm",
    "href": "01_nimble.html#hmc-algorithm",
    "title": "Introduction to nimble",
    "section": "HMC algorithm",
    "text": "HMC algorithm\nnimble provides support for Hamiltonian Monte Carlo (HMC) and compute the derivatives of the likelihood through automatic differentiation. The nimbleHMC package implement two versions of No-U-Turn (NUTS) HMC sampling: the standard one developed in Hoffman and Gelman (link) and an updated one with improved adaptation routines and convergence criteria, which matches the HMC sampler of STAN.\nIn order to allow an algorithm to use AD for a specific model, that model must be created with buildDerivs = TRUE.\n\n# Build model with nimble\nmodel_neg_bin_HMC &lt;- nimbleModel(code = code_neg_bin, \n                                 name = \"Negative binomial\", \n                                 constants = list(n = length(data_ex1)),\n                                 data = list(y = data_ex1),\n                                 inits = list(prob = 0.5, theta = 1),\n                                 calculate = FALSE, buildDerivs = TRUE) # This is the line required for running HMC\n\nDefining model\n\n\nBuilding model\n\n\nSetting data and initial values\n\n\nChecking model sizes and dimensions\n\nC_model_neg_bin_HMC &lt;- compileNimble(model_neg_bin_HMC) # Compile the model (they require this for the compilation of the HMC object)\n\nCompiling\n  [Note] This may take a minute.\n  [Note] Use 'showCompilerOutput = TRUE' to see C++ compilation details.\n\n# Build the MCMC algorithm which applies HMC sampling\nHMC &lt;- buildHMC(C_model_neg_bin_HMC)\n\n===== Monitors =====\nthin = 1: prob, theta\n===== Samplers =====\nNUTS sampler (1)\n  - prob, theta \n\n# Careful here, when the model has random effects\n# HMC requires to set values in the model before running the algorithm\n# One solution is to simulate with the model and set the model with these values\n# See : https://r-nimble.org/html_manual/cha-mcmc.html#subsec:HMC-example\n# Here, as the model is simple, there is no need for this and everything is handled withing nimble/nimbleHMC\n\n## Then everything is standard in nimble\nCHMC &lt;- compileNimble(HMC) # Compile the HMC model/algo\n\nCompiling\n  [Note] This may take a minute.\n  [Note] Use 'showCompilerOutput = TRUE' to see C++ compilation details.\n\nsamples &lt;- runMCMC(CHMC, niter = 1000, nburnin = 500) # Short run for illustration\n\nrunning chain 1...\n\n\n  [Note] NUTS sampler (nodes: prob, theta) is using 500 warmup iterations.\n         Since `warmupMode` is 'default' and `nburnin` &gt; 0,\n         the number of warmup iterations is equal to `nburnin`.\n         The burnin samples will be discarded, and all samples returned will be post-warmup.\n|-------------|-------------|-------------|-------------|\n|-------------------------------------------------------|\n\nsummary(coda::as.mcmc(samples)) # Summary of the estimates\n\n\nIterations = 1:500\nThinning interval = 1 \nNumber of chains = 1 \nSample size per chain = 500 \n\n1. Empirical mean and standard deviation for each variable,\n   plus standard error of the mean:\n\n         Mean      SD Naive SE Time-series SE\nprob   0.3689 0.05454 0.002439       0.006061\ntheta 10.8975 2.68722 0.120176       0.314028\n\n2. Quantiles for each variable:\n\n        2.5%   25%     50%     75%   97.5%\nprob  0.2687 0.333  0.3607  0.4031  0.5027\ntheta 6.7786 9.121 10.4386 12.2158 17.9053\n\n\nAnd there are plenty of others samplers:\n\nParticle filters / sequential Monte Carlo and iterated filtering (package nimbleSMC)\nMonte Carlo Expectation Maximization (MCEM)\n\nSee link"
  },
  {
    "objectID": "01_nimble.html#the-laplace-approximation",
    "href": "01_nimble.html#the-laplace-approximation",
    "title": "Introduction to nimble",
    "section": "The laplace approximation",
    "text": "The laplace approximation\nnimble also implements the Laplace approximation. But be careful, it performs maximum likelihood estimation. This is not the same as INLA (fully bayesian approach), but more like TMB (or glmmTMB- maximum likelihood estimation through Laplace approximation and automatic differentiation).\n\n# We need the derivatives to build the Laplace algorithm\n# so we take the object model_neg_bin_HMC built previously\nmodel_laplace &lt;- buildLaplace(model_neg_bin_HMC)\nCmodel_laplace &lt;- compileNimble(model_laplace)\n\nCompiling\n  [Note] This may take a minute.\n  [Note] Use 'showCompilerOutput = TRUE' to see C++ compilation details.\n\n# Get the Laplace approximation for one set of parameter values.\nCmodel_laplace$calcLaplace(c(0.5,0.5)) \n\n[1] -1499.737\n\n # Get the corresponding gradient.\nCmodel_laplace$gr_Laplace(c(0.5,0.5))\n\n[1] -3552.0000   409.7602\n\n# Search the (approximate) MLE\nMLE &lt;- Cmodel_laplace$findMLE(c(0.5,0.5)) # Find the (approximate) MLE.\nMLE$par\n\n[1]  0.366619 10.569421\n\n# Get log-likelihood value\nMLE$value\n\n[1] -333.2813\n\n# And output summaries\nCmodel_laplace$summary(MLE)\n\nnimbleList object of type AGHQuad_summary\nField \"params\":\nnimbleList object of type AGHQuad_params\nField \"names\":\n[1] \"prob\"  \"theta\"\nField \"estimates\":\n[1]  0.366619 10.569421\nField \"stdErrors\":\n[1] 0.05242939 2.35119020\nField \"randomEffects\":\nnimbleList object of type AGHQuad_params\nField \"names\":\ncharacter(0)\nField \"estimates\":\nnumeric(0)\nField \"stdErrors\":\nnumeric(0)\nField \"vcov\":\n&lt;0 x 0 matrix&gt;\nField \"scale\":\n[1] \"original\"\n\n\nN.b this example is only for illustration of the code. The Laplace approximation is relevant only when there are random effects in the model (which is not the case here).\nFor a full example see link"
  },
  {
    "objectID": "01_nimble.html#comparing-mcmc-algorithms",
    "href": "01_nimble.html#comparing-mcmc-algorithms",
    "title": "Introduction to nimble",
    "section": "Comparing MCMC algorithms",
    "text": "Comparing MCMC algorithms\nOne can compare several algorithms through the package compareMCMCs. It is possible to compare several algorithms internal to nimble with those from jags (or even STAN) algorithms. An example below for nimble and STAN.\n\n# This model code will be used for both nimble and JAGS\nmodelInfo &lt;- list(\n  code = code_neg_bin,\n  constants = list(n = length(data_ex1)),\n  data = list(y = data_ex1),\n  inits = list(prob = 0.5, theta = 1)\n)\n\n# Here is a custom MCMC configuration function for nimble\nconfigure_nimble_slice &lt;- function(model) {\n  configureMCMC(model, onlySlice = TRUE)\n}\n\n# Here is the call to compareMCMCs\nres &lt;- compareMCMCs(modelInfo,\n                    MCMCs = c('nimble',       # nimble with default samplers\n                              'nimble_slice' # nimble with slice samplers\n                              ),\n                    nimbleMCMCdefs = \n                      list(nimble_slice = 'configure_nimble_slice'),\n                    MCMCcontrol = list(inits = list(prob = 0.5, theta = 1),\n                                       niter = 10000,\n                                       burnin = 1000))\n\nbuilding nimble model...\n\n\nDefining model\n\n\nBuilding model\n\n\nSetting data and initial values\n\n\nRunning calculate on model\n  [Note] Any error reports that follow may simply reflect missing values in model variables.\n\n\nChecking model sizes and dimensions\n\n\n===== Monitors =====\nthin = 1: prob, theta\n===== Samplers =====\nRW sampler (2)\n  - prob\n  - theta\n===== Monitors =====\nthin = 1: prob, theta\n===== Samplers =====\nslice sampler (2)\n  - prob\n  - theta\n\n\nCompiling\n  [Note] This may take a minute.\n  [Note] Use 'showCompilerOutput = TRUE' to see C++ compilation details.\n\n\nCompiling\n  [Note] This may take a minute.\n  [Note] Use 'showCompilerOutput = TRUE' to see C++ compilation details.\n\n\n|-------------|-------------|-------------|-------------|\n|-------------------------------------------------------|\n|-------------|-------------|-------------|-------------|\n|-------------------------------------------------------|\n\nmake_MCMC_comparison_pages(res, modelName = 'code_neg_bin',dir = \"/tmp/\",\n                           control = list(res = 75))\n\nLoading required namespace: xtable"
  },
  {
    "objectID": "01_nimble.html#data-generation",
    "href": "01_nimble.html#data-generation",
    "title": "Introduction to nimble",
    "section": "Data generation",
    "text": "Data generation\nWe consider a simple settings in dimension \\(p=5\\), with Toeplitz-like covariance.\n\nN &lt;- 100\np &lt;- 5\nd &lt;- 1:p\nDsqrt &lt;- diag(sqrt(d))\nSigma &lt;- Dsqrt %*% toeplitz(0.75^(0:(p-1))) %*% Dsqrt\nOmega &lt;- solve(Sigma)\nmu &lt;- 5 + 1:p\npi &lt;- c(0.25, 0, 0.8, 0.1, .5)\n\nHere are some data (100 points):\n\nW &lt;- t(replicate(N, rbinom(p, prob = pi, size = 1)))\nY &lt;- (1 - W) * rmvnorm(N, mu, Sigma)\nggplot(data.frame(y = c(Y))) + aes(x=y) + geom_histogram()"
  },
  {
    "objectID": "01_nimble.html#auxiliary-functions",
    "href": "01_nimble.html#auxiliary-functions",
    "title": "Introduction to nimble",
    "section": "Auxiliary functions",
    "text": "Auxiliary functions\nWe need some auxiliary nimble functions to handle the density and generation of the random binomial vector \\(W\\):\n\ndbinom_vector &lt;- nimbleFunction(\n  run = function( x = double(1),\n                  size = double(1),\n                  prob = double(1), \n                  log = integer(0, default = 0)\n  ) {\n    returnType(double(0))\n    logProb &lt;- sum(dbinom(x, prob = prob, size = size, log = TRUE))\n    if(log) return(logProb) else return(exp(logProb))\n  })\n\nrbinom_vector &lt;- nimbleFunction(\n  run = function( n = integer(0, default = 1),\n                  size = double(1),\n                  prob = double(1)\n  ) {\n    returnType(double(1))\n    return(rbinom(length(size), prob = prob, size = size))\n  })"
  },
  {
    "objectID": "01_nimble.html#nimble-code-and-model-for-zi-normal-v1",
    "href": "01_nimble.html#nimble-code-and-model-for-zi-normal-v1",
    "title": "Introduction to nimble",
    "section": "Nimble code and model for ZI-normal: V1",
    "text": "Nimble code and model for ZI-normal: V1\nRather than defining a probability density function for this model (which is in fact a bit complicated…), we adopt a generative approach:\n\nZInormal_code &lt;- nimbleCode({\n  \n  for (j in 1:p) {\n    mean[j] ~ dnorm(0,1)  \n  }\n  for (j in 1:p) {\n    zeroProb[j] ~ dunif(0,1)\n  }\n  \n  prec[1:p,1:p] ~ dwish(Ip[1:p,1:p], p)\n\n  for (i in 1:N) {\n    w[i, 1:p] ~ dbinom_vector(onep[1:p], zeroProb[1:p])\n    z[i, 1:p] ~ dmnorm(mean[1:p], prec[1:p,1:p])\n    ytilde[i, 1:p] &lt;- (1 - w[i,1:p]) * z[i,1:p]\n    ## P. Barbillon/M.-P. Étienne: astuce en zero \n    ## a.k.a \"I got a trick at zero\"\n    y[i, 1:p] ~ dmnorm(ytilde[i, 1:p], prec_inf[1:p,1:p])\n  }\n  \n})\n\nWe can now define the nimble model for the ZI-normal model. We give some sound intial values for the parameters and latent variable, define some constants and provide the data:\n\nZInormal_model &lt;- nimbleModel(\n  ZInormal_code, \n  constants = \n    list(N = N, p = p, Ip = diag(1,p,p),\n         onep = rep(1,p), prec_inf = diag(1e5,p,p)),\n  data = list(y = Y, w = W),\n  inits = list(mean = rep(5,p), prec = diag(1,p,p), zeroProb=rep(0.5,p), z = Y))\n\nDefining model\n\n\n  [Note] Registering 'dbinom_vector' as a distribution based on its use in BUGS code. If you make changes to the nimbleFunctions for the distribution, you must call 'deregisterDistributions' before using the distribution in BUGS code for those changes to take effect.\n\n\nBuilding model\n\n\nSetting data and initial values\n\n\nRunning calculate on model\n  [Note] Any error reports that follow may simply reflect missing values in model variables.\n\n\nChecking model sizes and dimensions"
  },
  {
    "objectID": "01_nimble.html#mcmc-estimation",
    "href": "01_nimble.html#mcmc-estimation",
    "title": "Introduction to nimble",
    "section": "MCMC estimation",
    "text": "MCMC estimation\nLet us run a simple 2-chain MCMC estimation\n\nmy_MCMC &lt;- nimbleMCMC(\n  ZInormal_model, \n  monitors = c(\"mean\", \"prec\", \"zeroProb\"),\n  nchains = 2, \n  niter = 1000, \n  samplesAsCodaMCMC = TRUE,\n  nburnin=100)\n\nCompiling\n  [Note] This may take a minute.\n  [Note] Use 'showCompilerOutput = TRUE' to see C++ compilation details.\n\n\nrunning chain 1...\n\n\n|-------------|-------------|-------------|-------------|\n|-------------------------------------------------------|\n\n\nrunning chain 2...\n\n\n|-------------|-------------|-------------|-------------|\n|-------------------------------------------------------|\n\n\n\n\n\n\n\nEstimation of the mean \\(\\mu\\)\n\n\n\n\n\nprint(mu)\n\n[1]  6  7  8  9 10\n\n\n\n\n\n\n\nEstimation of the zero inflation probabilities \\(\\pi\\)\n\n\n\n\n\nprint(pi)\n\n[1] 0.25 0.00 0.80 0.10 0.50\n\n\n\n\n\n\n\nEstimation of the precision matrix \\(\\Omega\\)\n\n\n\n\n\nprint(round(Omega,3))\n\n       [,1]   [,2]   [,3]   [,4]   [,5]\n[1,]  2.286 -1.212  0.000  0.000  0.000\n[2,] -1.212  1.786 -0.700  0.000  0.000\n[3,]  0.000 -0.700  1.190 -0.495  0.000\n[4,]  0.000  0.000 -0.495  0.893 -0.383\n[5,]  0.000  0.000  0.000 -0.383  0.457"
  },
  {
    "objectID": "instructions.html",
    "href": "instructions.html",
    "title": "Instructions pour le dépot sur le site web",
    "section": "",
    "text": "Protocole https :\ngit clone https://github.com/StateOfTheR/finistR2024.git\nAvec clés SSH : git clone git@github.com:git@github.com:StateOfTheR/finistR2024.git\n\n\n(Lien vers une doc complète)[https://docs.github.com/fr/get-started/getting-started-with-git/managing-remote-repositories]."
  },
  {
    "objectID": "instructions.html#cloner-le-dépôt-git-du-bootcamp",
    "href": "instructions.html#cloner-le-dépôt-git-du-bootcamp",
    "title": "Instructions pour le dépot sur le site web",
    "section": "",
    "text": "Protocole https :\ngit clone https://github.com/StateOfTheR/finistR2024.git\nAvec clés SSH : git clone git@github.com:git@github.com:StateOfTheR/finistR2024.git\n\n\n(Lien vers une doc complète)[https://docs.github.com/fr/get-started/getting-started-with-git/managing-remote-repositories]."
  },
  {
    "objectID": "instructions.html#processus-de-mise-en-commun-des-ateliers",
    "href": "instructions.html#processus-de-mise-en-commun-des-ateliers",
    "title": "Instructions pour le dépot sur le site web",
    "section": "Processus de mise en commun des ateliers",
    "text": "Processus de mise en commun des ateliers\n\nCréer une branche propre à l’atelier nommée explicitement mon_nom_parlant et basculer dessus\n\ngit checkout -b mon_nom_parlant\n\nCréer un fichier Rmarkdown de restitution de votre atelier fichier.Rmd dans votre branche\n\ngit add fichier.Rmd\ngit commit -m \"restitution atelier\"\n\nPousser vos modifications sur le serveur distant\n\ngit  push --set-upstream origin mon_nom_parlant ou\ngit  push\n\nFaire une pull request (PR) sur github\nindiquer dans le message de la PR la liste des packages ou autres besoins\nQuand la PR passe les tests, demander le merge.\ncorriger les erreurs éventuelles dans la compilation du Rmarkdown\nles admins peuvent avoir à mettre à jour l’image docker"
  },
  {
    "objectID": "instructions.html#détails-du-fonctionnement",
    "href": "instructions.html#détails-du-fonctionnement",
    "title": "Instructions pour le dépot sur le site web",
    "section": "Détails du fonctionnement",
    "text": "Détails du fonctionnement\n\nLe docker\n(Lien vers la fiche pense-bête)[https://www.docker.com/sites/default/files/d8/2019-09/docker-cheat-sheet.pdf]\nPour créer des images Docker en local sur sa machine, voici une liste de commandes utiles\n\nPour construire une image docker, il faut créer un fichier Dockerfile qui contient la recette du Docker. Pour ce site le ficher Dockerfile a la forme suivante\n\n\n\n\nFROM rocker/geospatial:4.4\nRUN export DEBIAN_FRONTEND=noninteractive; apt-get -y update \\\n && apt-get install -y pandoc \\\n    pandoc-citeproc\nRUN R -e \"install.packages('remotes')\"\nRUN R -e \"install.packages('microbenchmark')\"\nRUN R -e \"install.packages('purrr')\" # map function\nENV R_CRAN_WEB=\"https://cran.rstudio.com/\"\nRUN R -e \"install.packages('cowplot')\" # GET function\nRUN R -e \"install.packages('torch')\"\nRUN R -e \"torch::install_torch(type = 'cpu')\"\nRUN R -e \"install.packages('PLNmodels')\"\nRUN R -e \"install.packages('torchvision')\"\n\nRUN apt-get update \\\n && apt-get install -y --no-install-recommends \\\n  mercurial gdal-bin libgdal-dev gsl-bin libgsl-dev \\\n  libc6-i386\n\nRUN R -e \"install.packages('reticulate')\"\nRUN R -e \"install.packages(c('inlabru', 'lme4', 'ggpolypath', 'RColorBrewer', 'geoR'))\"\nRUN R -e \"install.packages(c('poissonreg'))\"\nRUN apt-get install -y --no-install-recommends unzip python3-pip dvipng pandoc wget git make python3-venv && \\\n    pip3 install jupyter jupyter-cache flatlatex matplotlib && \\\n    apt-get --purge -y remove texlive.\\*-doc$ && \\\n    apt-get clean\n\n\npuis demander la construction de l’image à l’aide de la commande\n\n docker build -t nom_depot_dockerhub/nom_du_repo:version  . ## avec un nom\n\net enfin pousser sur Dockerhub\n\n docker push nom_depot_dockerhub/nom_du_repo:version\n\n\n\nLes actions\nDans les action de Github, on peut spécifier un container docker à utiliser, c’est ce que fait la ligne container du fichier d’action suivant, utiliser pour créer ce site web\n\n\nname: website\non:\n  push:\n    branches:\n      - main\n\njobs:\n  build:\n    name: Build website with rmarkdown\n    runs-on: ubuntu-latest\n    container: stateofther/r-finistr2024:0.1\n\n    steps:\n      - name: Checkout repository\n        uses: actions/checkout@v2\n      - name: Additional R packages\n        run: |\n          Rscript -e \"install.packages(c('tictoc', 'nimble', 'ggmcmc', 'compareMCMCs', 'nimbleHMC', 'mvtnorm'))\"\n      - name: Additional Python packages\n        run: |\n          pip install torch torch_geometric \n          pip install numpy==1.26.1\n          pip install scikit-learn scikit-network networkx matplotlib tqdm openpyxl pandas\n      - name: Generate slides\n        run: \"quarto render\"\n      - name: GitHub Pages action\n        uses: peaceiris/actions-gh-pages@v3\n        with:\n          github_token: ${{ secrets.GITHUB_TOKEN }}\n          publish_dir: ./_site"
  },
  {
    "objectID": "simulator_equality_test/writeup.html",
    "href": "simulator_equality_test/writeup.html",
    "title": "My Simulation",
    "section": "",
    "text": "This is a knitr report generated by the simulator to describe your simulation. Knitting this file will rerun the simulation if any of the code files have been modified since the simulation object was last created."
  },
  {
    "objectID": "simulator_equality_test/writeup.html#models",
    "href": "simulator_equality_test/writeup.html#models",
    "title": "My Simulation",
    "section": "Models",
    "text": "Models\n\nmake_my_model_normal &lt;- function(n, mu1, mu2, sig) {\n  new_model(\n    name = \"normal\", \n    label = sprintf(\"normal\"), \n    params = list(n = n, mu1 = mu1, mu2 = mu2, sig = sig),\n    simulate = function(n, mu1,mu2, sig, nsim) {\n      # this function must return a list of length nsim\n      x1 &lt;- mu1 + sig * matrix(rnorm(nsim * n), n, nsim)\n      x2 &lt;- mu2 + sig * matrix(rnorm(nsim * n), n, nsim)\n      li1 &lt;- split(x1, col(x1))\n      li2 &lt;- split(x2, col(x2))\n      lapply(1:nsim, function(i) {\n        cbind(li1[[i]], li2[[i]])\n      })\n    }\n  )\n}"
  },
  {
    "objectID": "simulator_equality_test/writeup.html#methods",
    "href": "simulator_equality_test/writeup.html#methods",
    "title": "My Simulation",
    "section": "Methods",
    "text": "Methods\n\nt_test &lt;- new_method(\n  name = \"t-test\", \n  label = \"Mean equality test\",\n  method = function(model, draw) {\n    list(pvalue = t.test(draw[, 1], draw[, 2], paired = TRUE)$p.value)\n  }\n)"
  },
  {
    "objectID": "simulator_equality_test/writeup.html#metrics",
    "href": "simulator_equality_test/writeup.html#metrics",
    "title": "My Simulation",
    "section": "Metrics",
    "text": "Metrics\n\npval_loss &lt;- new_metric(\n  name = \"p_value\", \n  label = \"pval&lt;0.05\",\n  metric = function(model, out) {\n    mean(out$pvalue &lt; 0.05)\n  }\n)"
  },
  {
    "objectID": "simulator.html",
    "href": "simulator.html",
    "title": "Setting up simulations in R",
    "section": "",
    "text": "We explore several R packages for generate or structure simulations. Most statistical simulations studies includes different steps : generate data/ run one or several methods using simulated data / compare results.\nWe identified the following list of packages for data simulation:\n\n{simulator}: A framework for performing simulations such as those common in methodological statistics papers. The design principles of this package are described in greater depth in Bien, J. (2016) “The simulator: An Engine to Streamline Simulations,” which is available at doi:10.48550/arXiv.1607.00021.\n{simpr}: A general, ‘tidyverse’-friendly framework for simulation studies, design analysis, and power analysis. Specify data generation, define varying parameters, generate data, fit models, and tidy model results in a single pipeline, without needing loops or custom functions.\n{DeclareDesign}: Researchers can characterize and learn about the properties of research designs before implementation using ‘DeclareDesign’. Ex ante declaration and diagnosis of designs can help researchers clarify the strengths and limitations of their designs and to improve their properties, and can help readers evaluate a research strategy prior to implementation and without access to results. It can also make it easier for designs to be shared, replicated, and critiqued.\n{MonteCarlo}: Simplifies Monte Carlo simulation studies by automatically setting up loops to run over parameter grids and parallelising the Monte Carlo repetitions. It also generates LaTeX tables.\n{simChef}: The goal is to help you quickly cook up a fully-realized, high-quality, reproducible, and transparently-documented simulation study in a flexible, efficient, and low-code manner. It removes many of the administrative burdens of simulation design through:\n\nAn intuitive tidy grammar of data science simulations\nPowerful abstractions for distributed simulation processing backed by future\nAutomated generation of interactive R Markdown simulation documentation, situating results next to the workflows needed to reproduce them.\n\n{simEngine}: An open-source R package for structuring, maintaining, running, and debugging statistical simulations on both local and cluster-based computing environments. See full documentation at https://avi-kenny.github.io/SimEngine/."
  },
  {
    "objectID": "simulator.html#overview",
    "href": "simulator.html#overview",
    "title": "Setting up simulations in R",
    "section": "",
    "text": "We explore several R packages for generate or structure simulations. Most statistical simulations studies includes different steps : generate data/ run one or several methods using simulated data / compare results.\nWe identified the following list of packages for data simulation:\n\n{simulator}: A framework for performing simulations such as those common in methodological statistics papers. The design principles of this package are described in greater depth in Bien, J. (2016) “The simulator: An Engine to Streamline Simulations,” which is available at doi:10.48550/arXiv.1607.00021.\n{simpr}: A general, ‘tidyverse’-friendly framework for simulation studies, design analysis, and power analysis. Specify data generation, define varying parameters, generate data, fit models, and tidy model results in a single pipeline, without needing loops or custom functions.\n{DeclareDesign}: Researchers can characterize and learn about the properties of research designs before implementation using ‘DeclareDesign’. Ex ante declaration and diagnosis of designs can help researchers clarify the strengths and limitations of their designs and to improve their properties, and can help readers evaluate a research strategy prior to implementation and without access to results. It can also make it easier for designs to be shared, replicated, and critiqued.\n{MonteCarlo}: Simplifies Monte Carlo simulation studies by automatically setting up loops to run over parameter grids and parallelising the Monte Carlo repetitions. It also generates LaTeX tables.\n{simChef}: The goal is to help you quickly cook up a fully-realized, high-quality, reproducible, and transparently-documented simulation study in a flexible, efficient, and low-code manner. It removes many of the administrative burdens of simulation design through:\n\nAn intuitive tidy grammar of data science simulations\nPowerful abstractions for distributed simulation processing backed by future\nAutomated generation of interactive R Markdown simulation documentation, situating results next to the workflows needed to reproduce them.\n\n{simEngine}: An open-source R package for structuring, maintaining, running, and debugging statistical simulations on both local and cluster-based computing environments. See full documentation at https://avi-kenny.github.io/SimEngine/."
  },
  {
    "objectID": "simulator.html#how-to-choose",
    "href": "simulator.html#how-to-choose",
    "title": "Setting up simulations in R",
    "section": "How to choose?",
    "text": "How to choose?\nHere is a comparison of the different packages summarised in a table:\n\n\n\nName\nVersion\n#deps\n#rev deps\nLatest commit\nLatest release\nDoc\nOn CRAN?\nDevelopers\n\n\n\n\n{DeclareDesign}\n1.0.10\n2\n1\n2024-04-13\n2024-04-21\n\nYes\nGraeme Blair\n\n\n{MonteCarlo}\n1.0.6\n6\n0\n2019-01-31\n2019-01-31\n\nYes\nChristian Hendrik Leschinski\n\n\n{simChef}\n0.1.0\n22\n0\n2024-03-20\nNA\n\nNo\nTiffany Tang, James Duncan\n\n\n{simEngine}\n1.4.0\n6\n0\n2024-04-13\n2024-04-04\n\nYes\nAvi Kenny, Charles Wolock\n\n\n{simpr}\n0.2.6\n11\n0\n2024-07-16\n2023-04-26\n\nYes\nEthan Brown\n\n\n{simulator}\n0.2.5\n1\n0\n2023-02-02\n2023-02-04\n\nYes\nJacob Bien\n\n\n\nThis table shows that all packages are on CRAN, except for {simChef}. The latest release of {simChef} is not available, but the latest commit was in March 2024 so it is actively maintained. The number of dependencies is quite high for {simChef} and {simpr}. The number of reverse dependencies is low for all packages. The package {MonteCarlo} seams not to be maintained anymore.\nAlso, in terms of philosophy, the {DeclareDesign} package is dedicated to experimental design. It also makes it possible to simulate an experimental design of interest, in order to understand the properties of this design. As its goal is not to evaluate computational methods via simulations, it does not address the question of interest and we did not evaluate it further. The underlying experimental design principles are described in the companion book: https://book.declaredesign.org/.\nIn the following, we will therefore focus on the packages {simEngine}, {simChef}, {simpr}, and {simulator}. The next section describes the common simulation problem we will use to compare the packages. Then, we will show how to solve this problem with each package. Finally, we will compare the packages based on the code, the output, and the ease of use."
  },
  {
    "objectID": "simulator.html#a-common-simulation-problem-power-curve-for-test-calibration",
    "href": "simulator.html#a-common-simulation-problem-power-curve-for-test-calibration",
    "title": "Setting up simulations in R",
    "section": "A common simulation problem: power curve for test calibration",
    "text": "A common simulation problem: power curve for test calibration\nWe consider a common simulation problem: power curve estimation for hypothesis test calibration.\nWe consider a two-sample paired t-test simple example. The first sample is generated from a normal distribution with mean 0 and standard deviation sd. The second sample is generated from a normal distribution with mean mean_diff and standard deviation sd. The sample size is n. We want to estimate the power of the paired t-test for different values of mean_diff and ds. Specifically, we will use the following parameters:\n\nn: 100, 150, 200;\nmean_diff: 10, 20, 30;\nsd: 50, 100.\n\nWe will estimate the power by simulating the paired t-test for each combination of parameters. We will repeat the simulation 10 times for each combination of parameters.\nThe base R solution for this problem can look like this:\n\n## Set up parameters\nns &lt;- c(100L, 150L, 200L)\nmean_diffs &lt;- c(10, 20, 30)\nsds &lt;- c(50, 100)\nreps &lt;- 10L\n\n## Bring together into data frame\nresults_template &lt;- expand.grid(\n  n = ns, \n  mean_diff = mean_diffs, \n  sd = sds, \n  p.value = NA_real_\n)\nbase_r_sim &lt;- results_template[rep(1:nrow(results_template), each = reps), ]\n\n## Loop over rows of the data frame and calculate the p-value\nfor (i in 1:nrow(results_template)) {\n  params &lt;- base_r_sim[i,]\n  pre &lt;- rnorm(params$n, 0, params$sd)\n  post &lt;- pre + rnorm(params$n, params$mean_diff, params$sd)\n  base_r_sim$p.value[i] &lt;- t.test(pre, post)$p.value\n}\n\n## Display table output\nDT::datatable(base_r_sim)"
  },
  {
    "objectID": "simulator.html#simpr",
    "href": "simulator.html#simpr",
    "title": "Setting up simulations in R",
    "section": "{simpr}",
    "text": "{simpr}\nWhat is bad in the base R solution according to {simpr} authors:\n\nMost important pieces (data generating process, model specification, definitions, varying parameters) are hidden;\nWhat if there is an error?\nWhat about parallelization?\nIs this code sufficiently readable? Without the comments?\n\n\n{simpr} solution\n\nsimpr_tbl &lt;- specify(\n  pre  = ~ rnorm(n, 0, sd),\n  post = ~ pre + rnorm(n, mean_diff, sd)\n) |&gt; \n  define(n = ns, mean_diff = mean_diffs, sd = sds) |&gt; \n  generate(reps, .progress = TRUE) |&gt; \n  fit(t = ~ t.test(post, pre, paired = TRUE)) |&gt; \n  tidy_fits()\n\n\nAttaching package: 'purrr'\n\n\nThe following object is masked from 'package:magrittr':\n\n    set_names\n\nDT::datatable(simpr_tbl)\n\n\n\n\nsimpr_tbl |&gt; \n  dplyr::group_by(n, mean_diff, sd) |&gt; \n  dplyr::summarize(Power = mean(p.value &lt; 0.05)) |&gt; \n  dplyr::ungroup() |&gt; \n  ggplot(aes(n, Power)) + \n  geom_col() + \n  facet_grid(rows = dplyr::vars(sd), cols = dplyr::vars(mean_diff)) + \n  theme_bw()\n\n`summarise()` has grouped output by 'n', 'mean_diff'. You can override using\nthe `.groups` argument.\n\n\n\n\n\n\n\n\n\n\n\nPhilosophy\nThe {simpr} workflow, inspired by the {infer} package, distills a simulation study into five primary steps:\n\nspecify() your data-generating process;\ndefine() parameters that you want to systematically vary across your simulation design (e.g. n, effect size);\ngenerate() the simulation data;\nfit() models to your data (e.g. lm());\ntidy_fits() for consolidating results using broom::tidy(), such as computing power or Type I Error rates.\n\n\n\nReproducible workflows\n\nSame seed, same results;\nCan regenerate just a specific subset to see what happened in that particular dataset or fit;\nUseful in debugging and diagnosing unexpected results, etc.\n\n\nFiltering full simulation\n\nwithr::with_seed(500, {\n  specify(a = ~ runif(6)) |&gt; \n    generate(3) |&gt; \n    dplyr::filter(.sim_id == 3)\n})\n\nfull tibble\n--------------------------\n# A tibble: 1 × 3\n  .sim_id   rep sim             \n    &lt;int&gt; &lt;int&gt; &lt;list&gt;          \n1       3     3 &lt;tibble [6 × 1]&gt;\n\nsim[[1]]\n--------------------------\n# A tibble: 6 × 1\n      a\n  &lt;dbl&gt;\n1 0.371\n2 0.959\n3 0.633\n4 0.177\n5 0.803\n6 0.133\n\n\n\n\nSimulate subset only\n\nwithr::with_seed(500, {\n  specify(a = ~ runif(6)) |&gt; \n    generate(3, .sim_id == 3)\n})\n\nfull tibble\n--------------------------\n# A tibble: 1 × 3\n  .sim_id   rep sim             \n    &lt;int&gt; &lt;int&gt; &lt;list&gt;          \n1       3     3 &lt;tibble [6 × 1]&gt;\n\nsim[[1]]\n--------------------------\n# A tibble: 6 × 1\n      a\n  &lt;dbl&gt;\n1 0.371\n2 0.959\n3 0.633\n4 0.177\n5 0.803\n6 0.133\n\n\n\n\nBenchmarking\n\nbench::mark(\n  all = specify(a = ~ runif(6)) |&gt; \n    generate(1000) |&gt; \n    dplyr::filter(.sim_id == 1000),\n  subset = specify(a = ~ runif(6)) |&gt; \n    generate(1000, .sim_id == 1000),\n  check = FALSE, min_iterations = 10L, relative = TRUE\n)\n\nWarning: Some expressions had a GC in every iteration; so filtering is\ndisabled.\n\n\n# A tibble: 2 × 6\n  expression   min median `itr/sec` mem_alloc `gc/sec`\n  &lt;bch:expr&gt; &lt;dbl&gt;  &lt;dbl&gt;     &lt;dbl&gt;     &lt;dbl&gt;    &lt;dbl&gt;\n1 all         57.3   51.9       1        1        1   \n2 subset       1      1        52.8      1.28     1.30\n\n\n\n\n\nOther features\n\n\n\n\n\n\nData munging\n\n\n\nAdd per_sim() |&gt; after generate() in your simulation pipeline and then any tidyverse function that will apply to every simulation dataset:\n\nspecify(\n  pre  = ~ rnorm(n, 0, sd), \n  post = ~ pre + rnorm(n, mean_diff, sd)\n) |&gt; \n  define(n = ns, mean_diff = mean_diffs, sd = sds) |&gt; \n  generate(reps, .progress = TRUE) |&gt; \n  ## Apply tidyverse functions to every simulation dataset\n  per_sim() |&gt; \n  ## Mutate to add a range restriction\n  dplyr::mutate(dplyr::across(dplyr::everything(), dplyr::case_when(\n    pre &gt;  100 ~ 100,\n    pre &lt; -100 ~ -100,\n    .default   ~ pre\n  ))) |&gt; \n  fit(t = ~ t.test(post, pre, paired = TRUE)) |&gt; \n  tidy_fits()\n\n\n\n\n\n\n\n\n\nError handling\n\n\n\n\nCan change error handling to keep going with simulation, stop simulation, or to skip warnings;\nDebug and recovery options to enter into simulation during error.\n\n\n\n\n\n\n\n\n\nBuilt-in parallelization\n\n\n\nJust add\n\nlibrary(future)\nplan(multisession, workers = 6) # or however many cores are reasonable to use\n\nand your simulation pipeline (actually the generate() function) will run in parallel.\n\n\n\n\nPros & cons\n\n\n\n\n\n\n\n\nPros\n\n\n\n\ntidyverse friendly;\nbeginner friendly;\nReproducibility, error handling built in;\nGeneral-purpose, customizable and can handle arbitrary R code.\n\n\n\n\n\n\n\n\n\n\nCons\n\n\n\n\nLikely not as fast/optimized as some alternatives;\nNot as customizable/powerful as DeclareDesign;\nNot specifically set up for any particular application (no MC errors, plots, reports, specific models…)."
  },
  {
    "objectID": "simulator.html#simulator",
    "href": "simulator.html#simulator",
    "title": "Setting up simulations in R",
    "section": "{simulator}",
    "text": "{simulator}\nThis is a package on the CRAN. It is described in a 2016 paper by Jacob Bien. Last update on GitHub : last year (so, 2023).\n\nGetting started\nThe function create(), with a directory that does not exist, will create the directory with 5 files and 1 folder:\n\neval_functions.R: contains metrics to be evaluated;\nfiles/: directory to store results;\nmain.R: main code to run;\nmethod_functions.R: methods to run;\nmodel_functions.R: define the models;\nwriteup.Rmd.\n\n\nsimulator_dir &lt;- \"./sims_simulator\"\nif (!file.exists(simulator_dir))\n  create(simulator_dir)\n\nNew simulation template created!  Go to ./sims_simulator/main.R to get started.\n\n\n\nwithr::with_dir(simulator_dir, {\n  list.files()\n})\n\n[1] \"eval_functions.R\"   \"main.R\"             \"method_functions.R\"\n[4] \"model_functions.R\"  \"writeup.Rmd\"       \n\n\n\nOn a typical project, one starts by defining a model in model_functions.R, one or two methods in method_functions.R, and a few metrics in eval_functions.R, and then one runs the code in main.R. After looking at some of the results, one might add an additional model or method or metric. One then returns to main.R, adds some additional lines specifying that the additional components should be run as well and looks at some more results.\nThe simplest way to look at results is by using the plot functions plot_eval(), plot_evals() and plot_evals_by(). In situations where you wish to investigate results more deeply than just looking at aggregated plots, one can use the functions model(), draws(), output(), and evals() to get at all objects generated through the course of the simulation.\n\nThe create() function also creates the template in the different files:\n\nContent of model_functions.R\n\nmake_my_model &lt;- function(n, prob) {\n  new_model(\n    name = \"contaminated-normal\", \n    label = sprintf(\"Contaminated normal (n = %s, prob = %s)\", n, prob), \n    params = list(n = n, mu = 2, prob = prob), \n    simulate = function(n, mu, prob, nsim) {\n      # this function must return a list of length nsim\n      contam &lt;- runif(n * nsim) &lt; prob\n      x &lt;- matrix(rep(NA, n * nsim), n, nsim)\n      x[contam] &lt;- rexp(sum(contam))\n      x[!contam] &lt;- rnorm(sum(!contam))\n      x &lt;- mu + x # true mean is mu\n      return(split(x, col(x))) # make each col its own list element\n    }\n  )\n}\n\nDefine a model from its different components with new_model():\n\nname;\nlabel: what will be printed in the tables later probably?\nparam: a list of different parameters for the model;\nsimulate: a function of the parameters that returns nsim simulations.\n\n\n\nContent of method_functions.R\n\nmy_method &lt;- new_method(\n  name = \"my-method\", \n  label = \"My Method\", \n  method = function(model, draw) {\n    list(fit = median(draw))\n  }\n)\n\ntheir_method &lt;- new_method(\n  name = \"their-method\", \n  label = \"Their Method\",\n  method = function(model, draw) {\n    list(fit = mean(draw))\n  }\n)\n\nDefine methods to be used on the model. The function new_method() has for arguments a name (for R) name, a pretty name label, and the method named arg for the computation we want.\n\n\nContent of eval_functions.R\n\nhis_loss &lt;- new_metric(\n  name = \"hisloss\", \n  label = \"His loss function\",\n  metric = function(model, out) {\n    return((model$mu - out$fit)^2)\n  }\n)\n\nher_loss &lt;- new_metric(\n  name = \"herloss\", \n  label = \"Her loss function\",\n  metric = function(model, out) {\n    return(abs(model$mu - out$fit))\n  }\n)\n\nMetric objects: shows how to compare model object and output of the method (method used on sim) object.\n\n\nContent of main.R\n\nsetwd(simulator_dir)\n\nsource(\"model_functions.R\")\nsource(\"method_functions.R\")\nsource(\"eval_functions.R\")\n\n## @knitr init\n\nname_of_simulation &lt;- \"normal-mean-estimation-with-contamination\"\n\n## @knitr main\n\nsim &lt;- new_simulation(\n  name = name_of_simulation,\n  label = \"Mean estimation under contaminated normal\"\n) %&gt;%\n  generate_model(\n    make_model = make_my_model, \n    seed = 123,\n    n = 50,\n    prob = as.list(seq(0, 1, length = 6)),\n    vary_along = \"prob\"\n  ) %&gt;%\n  simulate_from_model(nsim = 10) %&gt;%\n  run_method(list(my_method, their_method)) %&gt;%\n  evaluate(list(his_loss, her_loss))\n\n## @knitr plots\n\nplot_eval_by(sim = sim, metric_name = \"hisloss\", varying = \"prob\")\n\n## @knitr tables\n\ntabulate_eval(\n  object = sim, \n  metric_name = \"herloss\", \n  output_type = \"markdown\",\n  format_args = list(digits = 1)\n)\n\nThe main.R script calls the different files.\nCan plot_eval_by() be used for different metrics at once? Can tabulate_eval() be used for different metrics at once?\n\n\n\nExample: power curve\nHere is the content of the main.R file in the folder simulator_equality_test/.\n\nlibrary(simulator) # this file was created under simulator version 0.2.5\n\nsource(\"simulator_equality_test/model_functions.R\")\nsource(\"simulator_equality_test/method_functions.R\")\nsource(\"simulator_equality_test/eval_functions.R\")\n\n## @knitr init\n\nname_of_simulation &lt;- \"normal-mean-test\"\n\n## @knitr main\n\nsuppressMessages(\n  \n  sim &lt;- new_simulation(\n    name = name_of_simulation, \n    label = \"Test of mean\"\n  ) |&gt; \n    generate_model(\n      make_model = make_my_model_normal, \n      seed = 13, \n      n = 20, \n      mu2 = as.list(seq(0, 10, by = 0.5)), \n      mu1 = 0, \n      sig = 5, \n      vary_along = \"mu2\"\n    ) |&gt; \n    simulate_from_model(nsim = 1000) |&gt; \n    run_method(list(t_test)) |&gt; \n    evaluate(list(pval_loss))\n\n)\n\n..Created model and saved in normal/mu1_0/mu2_0/n_20/sig_5/model.Rdata\n..Created model and saved in normal/mu1_0/mu2_0.5/n_20/sig_5/model.Rdata\n..Created model and saved in normal/mu1_0/mu2_1/n_20/sig_5/model.Rdata\n..Created model and saved in normal/mu1_0/mu2_1.5/n_20/sig_5/model.Rdata\n..Created model and saved in normal/mu1_0/mu2_2/n_20/sig_5/model.Rdata\n..Created model and saved in normal/mu1_0/mu2_2.5/n_20/sig_5/model.Rdata\n..Created model and saved in normal/mu1_0/mu2_3/n_20/sig_5/model.Rdata\n..Created model and saved in normal/mu1_0/mu2_3.5/n_20/sig_5/model.Rdata\n..Created model and saved in normal/mu1_0/mu2_4/n_20/sig_5/model.Rdata\n..Created model and saved in normal/mu1_0/mu2_4.5/n_20/sig_5/model.Rdata\n..Created model and saved in normal/mu1_0/mu2_5/n_20/sig_5/model.Rdata\n..Created model and saved in normal/mu1_0/mu2_5.5/n_20/sig_5/model.Rdata\n..Created model and saved in normal/mu1_0/mu2_6/n_20/sig_5/model.Rdata\n..Created model and saved in normal/mu1_0/mu2_6.5/n_20/sig_5/model.Rdata\n..Created model and saved in normal/mu1_0/mu2_7/n_20/sig_5/model.Rdata\n..Created model and saved in normal/mu1_0/mu2_7.5/n_20/sig_5/model.Rdata\n..Created model and saved in normal/mu1_0/mu2_8/n_20/sig_5/model.Rdata\n..Created model and saved in normal/mu1_0/mu2_8.5/n_20/sig_5/model.Rdata\n..Created model and saved in normal/mu1_0/mu2_9/n_20/sig_5/model.Rdata\n..Created model and saved in normal/mu1_0/mu2_9.5/n_20/sig_5/model.Rdata\n..Created model and saved in normal/mu1_0/mu2_10/n_20/sig_5/model.Rdata\n..Simulated 1000 draws in 0 sec and saved in normal/mu1_0/mu2_0/n_20/sig_5/r1.Rdata\n..Simulated 1000 draws in 0 sec and saved in normal/mu1_0/mu2_0.5/n_20/sig_5/r1.Rdata\n..Simulated 1000 draws in 0 sec and saved in normal/mu1_0/mu2_1/n_20/sig_5/r1.Rdata\n..Simulated 1000 draws in 0 sec and saved in normal/mu1_0/mu2_1.5/n_20/sig_5/r1.Rdata\n..Simulated 1000 draws in 0 sec and saved in normal/mu1_0/mu2_2/n_20/sig_5/r1.Rdata\n..Simulated 1000 draws in 0 sec and saved in normal/mu1_0/mu2_2.5/n_20/sig_5/r1.Rdata\n..Simulated 1000 draws in 0 sec and saved in normal/mu1_0/mu2_3/n_20/sig_5/r1.Rdata\n..Simulated 1000 draws in 0 sec and saved in normal/mu1_0/mu2_3.5/n_20/sig_5/r1.Rdata\n..Simulated 1000 draws in 0 sec and saved in normal/mu1_0/mu2_4/n_20/sig_5/r1.Rdata\n..Simulated 1000 draws in 0 sec and saved in normal/mu1_0/mu2_4.5/n_20/sig_5/r1.Rdata\n..Simulated 1000 draws in 0 sec and saved in normal/mu1_0/mu2_5/n_20/sig_5/r1.Rdata\n..Simulated 1000 draws in 0 sec and saved in normal/mu1_0/mu2_5.5/n_20/sig_5/r1.Rdata\n..Simulated 1000 draws in 0 sec and saved in normal/mu1_0/mu2_6/n_20/sig_5/r1.Rdata\n..Simulated 1000 draws in 0 sec and saved in normal/mu1_0/mu2_6.5/n_20/sig_5/r1.Rdata\n..Simulated 1000 draws in 0.01 sec and saved in normal/mu1_0/mu2_7/n_20/sig_5/r1.Rdata\n..Simulated 1000 draws in 0 sec and saved in normal/mu1_0/mu2_7.5/n_20/sig_5/r1.Rdata\n..Simulated 1000 draws in 0 sec and saved in normal/mu1_0/mu2_8/n_20/sig_5/r1.Rdata\n..Simulated 1000 draws in 0 sec and saved in normal/mu1_0/mu2_8.5/n_20/sig_5/r1.Rdata\n..Simulated 1000 draws in 0 sec and saved in normal/mu1_0/mu2_9/n_20/sig_5/r1.Rdata\n..Simulated 1000 draws in 0 sec and saved in normal/mu1_0/mu2_9.5/n_20/sig_5/r1.Rdata\n..Simulated 1000 draws in 0 sec and saved in normal/mu1_0/mu2_10/n_20/sig_5/r1.Rdata\n..Performed Mean equality test in 0 seconds (on average over 1000 sims)\n..Performed Mean equality test in 0 seconds (on average over 1000 sims)\n..Performed Mean equality test in 0 seconds (on average over 1000 sims)\n..Performed Mean equality test in 0 seconds (on average over 1000 sims)\n..Performed Mean equality test in 0 seconds (on average over 1000 sims)\n..Performed Mean equality test in 0 seconds (on average over 1000 sims)\n..Performed Mean equality test in 0 seconds (on average over 1000 sims)\n..Performed Mean equality test in 0 seconds (on average over 1000 sims)\n..Performed Mean equality test in 0 seconds (on average over 1000 sims)\n..Performed Mean equality test in 0 seconds (on average over 1000 sims)\n..Performed Mean equality test in 0 seconds (on average over 1000 sims)\n..Performed Mean equality test in 0 seconds (on average over 1000 sims)\n..Performed Mean equality test in 0 seconds (on average over 1000 sims)\n..Performed Mean equality test in 0 seconds (on average over 1000 sims)\n..Performed Mean equality test in 0 seconds (on average over 1000 sims)\n..Performed Mean equality test in 0 seconds (on average over 1000 sims)\n..Performed Mean equality test in 0 seconds (on average over 1000 sims)\n..Performed Mean equality test in 0 seconds (on average over 1000 sims)\n..Performed Mean equality test in 0 seconds (on average over 1000 sims)\n..Performed Mean equality test in 0 seconds (on average over 1000 sims)\n..Performed Mean equality test in 0 seconds (on average over 1000 sims)\n..Evaluated Mean equality test in terms of pval&lt;0.05, Computing time (sec)\n..Evaluated Mean equality test in terms of pval&lt;0.05, Computing time (sec)\n..Evaluated Mean equality test in terms of pval&lt;0.05, Computing time (sec)\n..Evaluated Mean equality test in terms of pval&lt;0.05, Computing time (sec)\n..Evaluated Mean equality test in terms of pval&lt;0.05, Computing time (sec)\n..Evaluated Mean equality test in terms of pval&lt;0.05, Computing time (sec)\n..Evaluated Mean equality test in terms of pval&lt;0.05, Computing time (sec)\n..Evaluated Mean equality test in terms of pval&lt;0.05, Computing time (sec)\n..Evaluated Mean equality test in terms of pval&lt;0.05, Computing time (sec)\n..Evaluated Mean equality test in terms of pval&lt;0.05, Computing time (sec)\n..Evaluated Mean equality test in terms of pval&lt;0.05, Computing time (sec)\n..Evaluated Mean equality test in terms of pval&lt;0.05, Computing time (sec)\n..Evaluated Mean equality test in terms of pval&lt;0.05, Computing time (sec)\n..Evaluated Mean equality test in terms of pval&lt;0.05, Computing time (sec)\n..Evaluated Mean equality test in terms of pval&lt;0.05, Computing time (sec)\n..Evaluated Mean equality test in terms of pval&lt;0.05, Computing time (sec)\n..Evaluated Mean equality test in terms of pval&lt;0.05, Computing time (sec)\n..Evaluated Mean equality test in terms of pval&lt;0.05, Computing time (sec)\n..Evaluated Mean equality test in terms of pval&lt;0.05, Computing time (sec)\n..Evaluated Mean equality test in terms of pval&lt;0.05, Computing time (sec)\n..Evaluated Mean equality test in terms of pval&lt;0.05, Computing time (sec)\n\n## @knitr tables\n\ntabulate_eval(\n  sim, \n  metric_name = \"p_value\", \n  output_type = \"markdown\",\n  format_args = list(digits = 5)\n)\n\n&lt;!-- generated by simulator on Thu Aug 22 16:56:10 2024. --&gt;\n\n\n\nA comparison of Mean pval&lt;0.05 (averaged over 1000 replicates).\n\n\n\nMean equality test\n\n\n\n\nnormal\n0.055 (0.0072130)\n\n\nnormal\n0.067 (0.0079103)\n\n\nnormal\n0.100 (0.0094916)\n\n\nnormal\n0.143 (0.0110758)\n\n\nnormal\n0.226 (0.0132325)\n\n\nnormal\n0.327 (0.0148422)\n\n\nnormal\n0.441 (0.0157088)\n\n\nnormal\n0.559 (0.0157088)\n\n\nnormal\n0.671 (0.0148654)\n\n\nnormal\n0.783 (0.0130415)\n\n\nnormal\n0.860 (0.0109782)\n\n\nnormal\n0.907 (0.0091889)\n\n\nnormal\n0.955 (0.0065588)\n\n\nnormal\n0.982 (0.0042064)\n\n\nnormal\n0.992 (0.0028185)\n\n\nnormal\n0.995 (0.0022316)\n\n\nnormal\n0.999 (0.0010000)\n\n\nnormal\n0.999 (0.0010000)\n\n\nnormal\n0.999 (0.0010000)\n\n\nnormal\n1.000 (0.0000000)\n\n\nnormal\n1.000 (0.0000000)\n\n\n\n\n## @knitr plots\n\nplot_eval_by(\n  sim, \n  metric_name = \"p_value\", \n  varying = \"mu2\", \n  main = \"Power curve with mu1=0 and varying mu2\"\n)\n\n\n\n\n\n\n\n\nToDo :\n\nvary n\nvary both n and mu2\n\n\n\nImportant functions\n\nnew_model();\nnew_method();\nnew_metric();\nnew_simulation();\ngenerate_model();\nsimulate_from_model();\nrun_method();\nevaluate();\nplot_eval(), plot_eval_by(), tabulate_eval()."
  },
  {
    "objectID": "simulator.html#pros-cons-1",
    "href": "simulator.html#pros-cons-1",
    "title": "Setting up simulations in R",
    "section": "Pros & cons",
    "text": "Pros & cons\nThis is not really a package that codes a method, but instead it proposes an architecture to store your codes, output simulations, results, etc.\n\n\n\n\n\n\n\n\nPros\n\n\n\n\nany model possible, if you can write it;\npossible to iterate over parameter with pretty pipes;\nparallel possible, because you choose what you use;\nstores all results in the storage with increasing depth:\n\nfiles\n└── name_of_model\n    └── name_of_first_param_value\n        └── name_of2nd_param_value ... model.Rdata out stores all sims\n            └── r?.Rdata\n\n\n\n\n\n\n\n\n\nCons\n\n\n\n\nNot an usual way to code in R, and not easy to explain. Create the directory with the create() function. Then, add the different functions, methods, models, etc., in the corresponding files;\nMixes the code of the package/template with your own code;\nStores all results in this neat way BUT if too many parameters, may exceed the depth allowed."
  },
  {
    "objectID": "simulator.html#simengine",
    "href": "simulator.html#simengine",
    "title": "Setting up simulations in R",
    "section": "{simEngine}",
    "text": "{simEngine}\n{simEngine} is an open-source R package for structuring, maintaining, running, and debugging statistical simulations on both local and cluster-based computing environments. The paper describing the package is available here.\n\nExample\n\nCreate a simulation object SimEngine::new_sim()\n\n\nsim &lt;- new_sim()\n\n\nCreate functions to generate data\n\n\ncreate_data &lt;- function(n) {\n  return(rpois(n = n, lambda = 20))\n}\n\nest_lambda &lt;- function(dat, type) {\n  if (type==\"M\") {\n    return(mean(dat))\n  }\n  if (type==\"V\") {\n    return(var(dat))\n  }\n}\n\n\nSimulation set-up\n\nOne run = one simulation replicate. Features varying across simulation = simulation levels. Possible values = level values. By default, {simEngine} runs one simulation replicate for each combination of level value.\n\nsim &lt;- sim |&gt; \n  set_levels(\n    estimator = c(\"M\", \"V\"),\n    n = c(10, 100, 1000)\n  )\nsim\n\nSimEngine: simulation object (class \"sim_obj\")\n----------------------------------------------\nConfiguration: \n    num_sim: 1\n    parallel: FALSE\n    n_cores: NA\n    packages: NULL\n    stop_at_error: FALSE\n    seed: 528361534\n    progress_bar: TRUE\n    batch_levels: NA\n    return_batch_id: FALSE\nLevels: \n    estimator: c(\"M\", \"V\")\n    n: c(10, 100, 1000)\nState: pre run\n\n\n\nCreate a simulation script\n\ni.e. generation, analysis and return results\n\nsim &lt;- sim |&gt; \n  set_script(function() {\n    dat &lt;- create_data(n = L$n)\n    lambda_hat &lt;- est_lambda(dat = dat, type = L$estimator)\n    return(list(\"lambda_hat\" = lambda_hat))\n  })\n\n\nConfigure and run the simulation\n\nUsing the SimEngine::set_config() it is possible to specify the number of replicates num_sim, the parallelization type n_cores, parallel, … and the required packages packages argument.\nAnd we run the simulation with the SimEngine::run() function.\n\n### Configuration\nsim &lt;- sim |&gt; \n  set_config(\n    num_sim = 100,\n    packages = c(\"ggplot2\", \"stringr\")\n  )\n\n### Run\nsim &lt;- run(sim)\n\nDone. No errors or warnings detected.\n\n\nThe package implements a SimEngine::summarize() function to calculate usual summary statistics such as bias, variance, MSE.\n\nsim |&gt; \n  summarize(\n    list(\n      stat = \"bias\",\n      name = \"bias_lambda\",\n      estimate = \"lambda_hat\",\n      truth = 20\n    ), \n    list(\n      stat = \"mse\",\n      name = \"mse_lambda\",\n      estimate = \"lambda_hat\",\n      truth = 20\n    )\n  )\n\n  level_id estimator    n n_reps bias_lambda  mse_lambda\n1        1         M   10    100  -0.0930000  1.75850000\n2        2         V   10    100   0.3353333 96.23611111\n3        3         M  100    100  -0.0877000  0.20287100\n4        4         V  100    100  -0.3656687  9.04930168\n5        5         M 1000    100   0.0198000  0.02163858\n6        6         V 1000    100   0.1130303  0.75417061\n\n\nWe can have information on individual simulation including runtime.\n\nhead(sim$results)\n\n  sim_uid level_id rep_id estimator  n      runtime lambda_hat\n1       1        1      1         M 10 0.0004298687       20.3\n2       7        1      2         M 10 0.0002479553       20.4\n3       8        1      3         M 10 0.0002479553       19.8\n4       9        1      4         M 10 0.0002460480       19.1\n5      10        1      5         M 10 0.0002470016       19.8\n6      11        1      6         M 10 0.0002501011       20.9\n\n\nIt is possible to update simulation with more replicates or a new level. It keeps the old simulations and run only needed ones.\n\nsim &lt;- sim |&gt; \n  set_config(num_sim = 200) |&gt; \n  set_levels(\n    estimator = c(\"M\", \"V\"),\n    n = c(10, 100, 1000, 10000)\n  ) |&gt; \n  update_sim()\n\nDone. No errors or warnings detected.\n\n\n\n\nParallelization\nA specific vignette is available and the introduction precises the terminology for parallel computing (node, core, task, job, etc.). There are two modes of parallelizing code: local or cluster. The first thing is to specify set_config(parallel = TRUE).\n\nLocal: split calculations on several cores of a single computer. If the user’s computer has \\(n\\) cores available, {simEngine} will use \\(n-1\\) cores by default.\nCluster: function run_on_cluster(). To use the function, the user needs to break the code into three blocks : first (code run only once, set-up simulation object), main (a single call to run()) and last (the code will run after all simulation replicates have finished running and after SimEngine has automatically compiled the results into the simulation object.).\n\n\nrun_on_cluster(\n  first = {\n    create_data &lt;- function(n) {\n      return(rpois(n = n, lambda = 20))\n    }\n    est_lambda &lt;- function(dat, type) {\n      if (type == \"M\") {\n        return(mean(dat))\n      }\n      if (type == \"V\") {\n        return(var(dat))\n      }\n    }\n    sim &lt;- new_sim() |&gt; \n      set_levels(estimator = c(\"M\", \"V\"), n = c(10, 100, 1000)) |&gt; \n      set_script(function() {\n        dat &lt;- create_data(L$n)\n        lambda_hat &lt;- est_lambda(dat = dat, type = L$estimator)\n        return(list(\"lambda_hat\" = lambda_hat))\n      }) |&gt; \n      set_config(num_sim = 100, n_cores = 20)\n  },\n  main = {\n    sim &lt;- run(sim)\n  },\n  last = {\n    sim &lt;- summarize(sim)\n  },\n  cluster_config = list(js = \"slurm\")\n)        \n\nDone. No errors or warnings detected.\n\n\nThe cluster_config argument enables to specify options such as the choice of the scheduler.\nExample on how to give instruction to the job scheduler is on the vignette.\nBe caution: the number of cores cannot exceed the total number of simulation replicates.\nFunction to update simulation on a CSS: update_sim_on_cluster(). Difference is we do not need to create a new simulation config but load the existing simulation using readRDS() and use set_config() or set_levels() and update_sim() in the main block.\nThere is a vignette on advanced functionality such as complex results or simulation levels. It exists the batch() function to share data or objects between simulation replicates."
  },
  {
    "objectID": "simulator.html#pros-cons-2",
    "href": "simulator.html#pros-cons-2",
    "title": "Setting up simulations in R",
    "section": "Pros & cons",
    "text": "Pros & cons\n\n\n\n\n\n\n\n\nPros\n\n\n\n\nbeginner friendly;\nlocal and cluster-based computing environments;\nwell-written documentations and website with vignettes (with stat. formula of terminology for parallel computing);\ninformation-sharing across simulation replicates (not tested);\nautomatic calculation of Monte Carlo error (not tested).\n\n\n\n\n\n\n\n\n\n\nCons\n\n\n\n\n\n\n\n\n\nSimulation-based power calculation\nA [specific vignette] is available on the author’s website."
  },
  {
    "objectID": "simulator.html#simchef",
    "href": "simulator.html#simchef",
    "title": "Setting up simulations in R",
    "section": "{simChef}",
    "text": "{simChef}\nThis document describes a simulation experiment using the {simChef} package in R, including data generation, method application, evaluation, and visualization.\nA specific vignette is available on the author’s website for more detailed instructions and examples on using the {simChef} package.\n\nSetup\nThe {simChef} package is not on CRAN and must therefore be installed from GitHub using the {remotes} package as follows:\n\nremotes::install_github(\"Yu-Group/simChef\")\n\nIn {simChef}, a simulation experiment is divided into four components:\n\nDGP(): the data-generating processes (DGPs) from which to generate data;\nMethod(): the methods (or models) to fit on the data in the experiment;\nEvaluator(): the evaluation metrics used to evaluate the methods’ performance;\nVisualizer(): the visualization procedures used to visualize outputs from the method fits or evaluation results (can be tables, plots, or even R Markdown snippets to display).\n\n\n\nStep 1: Define the Data-Generating Process, Methods, and Evaluation Functions\n\nData-Generating Process\nThe following function generates pre- and post-treatment data:\n\ndgp_fun &lt;- function(n, sd, mean_diff) {\n  pre  &lt;- rnorm(n, 0, sd)\n  post &lt;- pre + rnorm(n, mean_diff, sd)\n  list(pre = pre, post = post)\n}\n\n\n\nMethod\nThe following function applies a paired t-test to the data:\n\nmethod_fun &lt;- function(pre, post) {\n  t.test(post, pre, paired = TRUE)\n}\n\n\n\nEvaluation\nThe following function evaluates the power of the test:\n\nevaluation_fun &lt;- function(fit_results) {\n  Power &lt;- fit_results |&gt; \n    dplyr::group_by(n, mean_diff, sd) |&gt; \n    dplyr::summarize(Power = mean(p.value &lt; 0.05))\n}\n\n\n\nVisualization\nThe following function creates a plot to visualize the power:\n\npower_plot_fun &lt;- function(fit_results, eval_results) {\n  fit_results |&gt; \n    dplyr::group_by(n, mean_diff, sd) |&gt; \n    dplyr::summarize(Power = mean(p.value &lt; 0.05)) |&gt; \n    ggplot(aes(n, Power)) + \n    geom_col() + \n    facet_grid(rows = dplyr::vars(sd), cols = dplyr::vars(mean_diff)) + \n    theme_bw()\n}\n\n\n\n\nStep 2: Convert Functions into {simChef} Class Objects\n\ndgp &lt;- create_dgp(\n  .dgp_fun = dgp_fun, .name = \"DGP\"\n)\n\nmethod &lt;- create_method(\n  .method_fun = method_fun, .name = \"T-test\"\n)\n\nevaluation &lt;- create_evaluator(\n  .eval_fun = evaluation_fun , .name = 'P.value'\n)\n\npower_plot &lt;- create_visualizer(\n  .viz_fun = power_plot_fun, .name = 'Power plot'\n)\n\n\n\nStep 3: Assemble the Simulation Experiment\n\nexperiment &lt;- create_experiment(name = \"Example Experiment\") |&gt; \n  add_dgp(dgp) |&gt; \n  add_method(method) |&gt; \n  add_evaluator(evaluation) |&gt; \n  add_visualizer(power_plot)\n\n## Define the grid of simulation parameters\nexperiment &lt;- experiment |&gt; \n  add_vary_across(.dgp = \"DGP\", n = ns, mean_diff = mean_diffs, sd = sds)\n\nprint(experiment)\n\nExperiment Name: Example Experiment \n   Saved results at: results/Example Experiment \n   DGPs: DGP \n   Methods: T-test \n   Evaluators: P.value \n   Visualizers: Power plot \n   Vary Across: \n      DGP: DGP \n         n:  int [1:3] 100 150 200\n         mean_diff:  num [1:3] 10 20 30\n         sd:  num [1:2] 50 100\n\n\n\n\nStep 4: Run the Experiment\n\nresults &lt;- run_experiment(experiment, n_reps = reps, save = TRUE)\n\nFitting Example Experiment...\nSaving fit results...\nFit results saved | time taken: 0.010858 seconds\n10 reps completed (totals: 10/10) | time taken: 0.430664 minutes\n==============================\nEvaluating Example Experiment...\n`summarise()` has grouped output by 'n', 'mean_diff'. You can override using the `.groups` argument.\nEvaluation completed | time taken: 0.000087 minutes\nSaving eval results...\nEval results saved | time taken: 0.032868 seconds\n==============================\nVisualizing Example Experiment...\n`summarise()` has grouped output by 'n', 'mean_diff'. You can override using the `.groups` argument.\nVisualization completed | time taken: 0.000125 minutes\nSaving viz results...\nViz results saved | time taken: 0.048932 seconds\n==============================\n\nDT::datatable(results$fit_results)\n\n\n\n\nresults$viz_results\n\n$`Power plot`"
  },
  {
    "objectID": "simulator.html#pros-cons-3",
    "href": "simulator.html#pros-cons-3",
    "title": "Setting up simulations in R",
    "section": "Pros & cons",
    "text": "Pros & cons\n\n\n\n\n\n\n\n\nPros\n\n\n\n\nAutomated generation of an interactive R Markdown document (see init_docs() and render_docs() functions);\nBeginner friendly;\nComputing experimental replicates in parallel easily with future by adding plan(multisession, workers = n_workers) before run_experiment(experiment, ...);\nFlexibility of the return fitting results of the simulation (not necessarily the same outputs for all methods);\nWe can change the evaluation metrics and the visualization without re-fitting all the simulations by saving the fit_results tibble.\n\n\n\n\n\n\n\n\n\n\nCons\n\n\n\n\nLikely not as fast/optimized as some alternatives;\nOnly save the simulation results computed from the evaluation functions. We cannot debug a strange simulation result."
  }
]