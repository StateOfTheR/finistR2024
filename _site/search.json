[
  {
    "objectID": "python_practice.html",
    "href": "python_practice.html",
    "title": "Bien démarrer avec Python",
    "section": "",
    "text": "Lorsque l’on utilise Python, une bonne pratique consiste à créer un environnement spécifique par projet. L’environnement contient la version de Python que l’on souhaite utiliser ainsi que les packages/modules utiles au projet. Cette façon de faire permet de faire coexister différentes versions de python ou de packages au sein du même ordinateur. Cette pratique n’est pas spécifique à Python, on pourrait imaginer créer des environnements pour utiliser des versions différentes de R. Si le programme ou la librairie n’est pas installée dans l’environnement mais est disponible dans l’installation globale de la machine, c’est cette version glbale qui sera utilisée. Il faut donc bien vérifier ce qui est dispo dans l’environnement et globalement.\nNous avons exploré deux manières de gérer les environnements soit avec conda soit avec virtual env. Nous avons testé sous Linux et sous Windows."
  },
  {
    "objectID": "python_practice.html#installation-python-et-problèmes-potentiels",
    "href": "python_practice.html#installation-python-et-problèmes-potentiels",
    "title": "Bien démarrer avec Python",
    "section": "Installation python et problèmes potentiels",
    "text": "Installation python et problèmes potentiels\nOn crée un lien symbolique pour que python 3 soit le python par défaut en utilisant les instructions suivantes:\nsudo ln -sf /usr/bin/python3 /usr/bin/python\nOn fait de même pour pip qui est un des installateurs de modules/ packages.\nsudo ln -sf /usr/bin/pip3 /usr/bin/pip"
  },
  {
    "objectID": "python_practice.html#gestion-des-environnements",
    "href": "python_practice.html#gestion-des-environnements",
    "title": "Bien démarrer avec Python",
    "section": "Gestion des Environnements",
    "text": "Gestion des Environnements\n\nAvec conda sous Linux\nCette partie suppose que la commande conda est disponible (installée avec anaconda ou miniconda)\nLa liste des environnement disponible est donnée par\nconda env list\nPour créer un nouvel environnement nommé finistr contenant uniquement python et pip\nIl suffit de lancer la commande conda create --name finistr python=3.11 pip\nEn listant les environnements disponibles, vous devez voir l’environnement finistr créé.\nconda env list\nIl est très important d’installer pip en meme temps, sinon c’est le pip global du systeme qui est utilisé et toutes les commades pip install lancées depuis l’environnement feront en fait des installations globales et non locales à l’environnement ( plus de détails ici )\nPour utiliser cette installation, il faut activer l’environnement\nconda activate finistr\nOn peut maintenant installer les packages de son choix avec des commandes type conda install ou pip install\nPar exemple pip install numpy\nPour avoir la liste des packages installés dans l’environnemnet courant conda list\nOn quitte l’environnement avec la commande conda deactivate\nIl est possible de fournir une liste de packages à installer dans l’environnement sous forme d’un fichier txt.\n\nconda create --name finistrbis python=3.11 pip \nconda activate finistrbis\npip install -r requirements.txt\n\nle fichier requirement.txt a la forme suivante\n\n\njupyter==1.0.0\nnumpy==2.1.0\n\n\nIl est possible de supprimer un environnement avec la commande\nLa liste des commandes conda est disponible dans la cheatsheet conda\n\n\nAvec virtual env sous Windows"
  },
  {
    "objectID": "python_practice.html#utiliser-un-environnement-de-développement-agréable-pour-un-utilisateur-de-r",
    "href": "python_practice.html#utiliser-un-environnement-de-développement-agréable-pour-un-utilisateur-de-r",
    "title": "Bien démarrer avec Python",
    "section": "Utiliser un environnement de développement agréable pour un utilisateur de R",
    "text": "Utiliser un environnement de développement agréable pour un utilisateur de R"
  },
  {
    "objectID": "python_practice.html#avec-visual-studio-code",
    "href": "python_practice.html#avec-visual-studio-code",
    "title": "Bien démarrer avec Python",
    "section": "Avec Visual Studio Code",
    "text": "Avec Visual Studio Code\nipython\n\nAvec Positron\nLe nouvel IDE Positron (disponible en version beta) semble avoir des avantages intéressants pour les gens qui aiment Rstudio mais veulent faire du python. Notamment, il est possible\n\nde choisir facilement son environnement (menu déroulant en haut à droite) et\nd’utiliser la commande Ctr+entr pour éxécuter un code Python ligne à ligne comme on le fera pour un code R dans Rstudio."
  },
  {
    "objectID": "python_practice.html#avec-positron",
    "href": "python_practice.html#avec-positron",
    "title": "Bien démarrer avec Python",
    "section": "Avec Positron",
    "text": "Avec Positron\nLe nouvel IDE Positron (disponible en version beta) semble avoir des avantages intéressants pour les gens qui aiment Rstudio mais veulent faire un python. Notamment, il est possible de choisir facilement son envionnement (menu déroulant en haut à droite) et d’utiliser la commande Ctr+entr pour éxécuter un code Python ligne à ligne comme on le fera pour un code R dans Rstudio."
  },
  {
    "objectID": "instructions.html",
    "href": "instructions.html",
    "title": "Instructions pour le dépot sur le site web",
    "section": "",
    "text": "Protocole https :\ngit clone https://github.com/StateOfTheR/finistR2024.git\nAvec clés SSH : git clone git@github.com:git@github.com:StateOfTheR/finistR2024.git\n\n\n(Lien vers une doc complète)[https://docs.github.com/fr/get-started/getting-started-with-git/managing-remote-repositories]."
  },
  {
    "objectID": "instructions.html#cloner-le-dépôt-git-du-bootcamp",
    "href": "instructions.html#cloner-le-dépôt-git-du-bootcamp",
    "title": "Instructions pour le dépot sur le site web",
    "section": "",
    "text": "Protocole https :\ngit clone https://github.com/StateOfTheR/finistR2024.git\nAvec clés SSH : git clone git@github.com:git@github.com:StateOfTheR/finistR2024.git\n\n\n(Lien vers une doc complète)[https://docs.github.com/fr/get-started/getting-started-with-git/managing-remote-repositories]."
  },
  {
    "objectID": "instructions.html#processus-de-mise-en-commun-des-ateliers",
    "href": "instructions.html#processus-de-mise-en-commun-des-ateliers",
    "title": "Instructions pour le dépot sur le site web",
    "section": "Processus de mise en commun des ateliers",
    "text": "Processus de mise en commun des ateliers\n\nCréer une branche propre à l’atelier nommée explicitement mon_nom_parlant et basculer dessus\n\ngit checkout -b mon_nom_parlant\n\nCréer un fichier Rmarkdown de restitution de votre atelier fichier.Rmd dans votre branche\n\ngit add fichier.Rmd\ngit commit -m \"restitution atelier\"\n\nPousser vos modifications sur le serveur distant\n\ngit  push --set-upstream origin mon_nom_parlant ou\ngit  push\n\nFaire une pull request (PR) sur github\nindiquer dans le message de la PR la liste des packages ou autres besoins\nQuand la PR passe les tests, demander le merge.\ncorriger les erreurs éventuelles dans la compilation du Rmarkdown\nles admins peuvent avoir à mettre à jour l’image docker"
  },
  {
    "objectID": "instructions.html#détails-du-fonctionnement",
    "href": "instructions.html#détails-du-fonctionnement",
    "title": "Instructions pour le dépot sur le site web",
    "section": "Détails du fonctionnement",
    "text": "Détails du fonctionnement\n\nLe docker\n(Lien vers la fiche pense-bête)[https://www.docker.com/sites/default/files/d8/2019-09/docker-cheat-sheet.pdf]\nPour créer des images Docker en local sur sa machine, voici une liste de commandes utiles\n\nPour construire une image docker, il faut créer un fichier Dockerfile qui contient la recette du Docker. Pour ce site le ficher Dockerfile a la forme suivante\n\n\n\n\nFROM rocker/geospatial:4.4\nRUN export DEBIAN_FRONTEND=noninteractive; apt-get -y update \\\n && apt-get install -y pandoc \\\n    pandoc-citeproc\nRUN R -e \"install.packages('remotes')\"\nRUN R -e \"install.packages('microbenchmark')\"\nRUN R -e \"install.packages('purrr')\" # map function\nENV R_CRAN_WEB=\"https://cran.rstudio.com/\"\nRUN R -e \"install.packages('cowplot')\" # GET function\nRUN R -e \"install.packages('torch')\"\nRUN R -e \"torch::install_torch(type = 'cpu')\"\nRUN R -e \"install.packages('PLNmodels')\"\nRUN R -e \"install.packages('torchvision')\"\n\nRUN apt-get update \\\n && apt-get install -y --no-install-recommends \\\n  mercurial gdal-bin libgdal-dev gsl-bin libgsl-dev \\\n  libc6-i386\n\nRUN R -e \"install.packages('reticulate')\"\nRUN R -e \"install.packages(c('inlabru', 'lme4', 'ggpolypath', 'RColorBrewer', 'geoR'))\"\nRUN R -e \"install.packages(c('poissonreg'))\"\nRUN apt-get install -y --no-install-recommends unzip python3-pip dvipng pandoc wget git make python3-venv && \\\n    pip3 install jupyter jupyter-cache flatlatex matplotlib && \\\n    apt-get --purge -y remove texlive.\\*-doc$ && \\\n    apt-get clean\n\n\npuis demander la construction de l’image à l’aide de la commande\n\n docker build -t nom_depot_dockerhub/nom_du_repo:version  . ## avec un nom\n\net enfin pousser sur Dockerhub\n\n docker push nom_depot_dockerhub/nom_du_repo:version\n\n\n\nLes actions\nDans les action de Github, on peut spécifier un container docker à utiliser, c’est ce que fait la ligne container du fichier d’action suivant, utiliser pour créer ce site web\n\n\nname: website\non:\n  push:\n    branches:\n      - main\n\njobs:\n  build:\n    name: Build website with rmarkdown\n    runs-on: ubuntu-latest\n    container: stateofther/r-finistr2024:0.1\n\n    steps:\n      - name: Checkout repository\n        uses: actions/checkout@v2\n      - name: Additional Packages\n        run: Rscript -e \"install.packages(c('tictoc'))\"\n      - name: Generate slides\n        run: \"quarto render\"\n      - name: GitHub Pages action\n        uses: peaceiris/actions-gh-pages@v3\n        with:\n          github_token: ${{ secrets.GITHUB_TOKEN }}\n          publish_dir: ./_site"
  },
  {
    "objectID": "Readme.html",
    "href": "Readme.html",
    "title": "Ateliers Finist’R 2024",
    "section": "",
    "text": "Ateliers Finist’R 2024\n\n\n\nwebsite\n\n\nL’atelier Finist’R 2024 – ou bootcamp R s’est déroulé à la station biologique de Roscoff du 19 au 23 août 2024.\nIl s’agit de la huitième édition de l’atelier Finist’R. Cet atelier réunit annuellement un groupe de chercheurs, ingénieurs, doctorants, tous utilisateurs avancés de R et dévelopeurs de paquets pour explorer les dernières fonctionalités du logiciel et les nouvelles pratiques de développement. A l’issu de l’atelier le collectif produit une synthèse de cette veille logiciel de manière à progresser collectivement dans l’utilisation du logiciel mais surtout dans la production d’outils statistiques à destination de la communauté.\nLa restitution se fait sous forme de site web. Le site de l’édition 2024 sera disponible ici"
  },
  {
    "objectID": "python_practice.html#cérer-un-environnement-avec-conda-sous-linux",
    "href": "python_practice.html#cérer-un-environnement-avec-conda-sous-linux",
    "title": "Bien démarrer avec Python",
    "section": "Cérer un environnement avec conda sous Linux",
    "text": "Cérer un environnement avec conda sous Linux\nCette partie suppose que la commande conda est disponible (installée avec anaconda ou miniconda)\nLa liste des environnement disponible est donnée par\nconda env list\nVous devez avoir au moins l’environnement de base dans cette liste. Vous avez aussi ainsi accès à l’adresse où vous trouverez vos environnements.\nOn souhaite créer un nouvel environnement nommé finistr contenant uniquement python et pip.\nIl suffit de lancer la commande conda create --name finistr python=3.11 pip\nEn listant les environnements disponibles, vous devez voir l’environnement finistr créé.\nconda env list\nIl est très important d’installer pip en meme temps, sinon c’est le pip global du systeme qui est utilisé et toutes les commades pip install lancées depuis l’environnement feront en fait des installations globales et non locales à l’environnement (plus de détails ici )\nPour utiliser cette installation, il faut activer l’environnement\nconda activate finistr\nOn peut maintenant installer les packages de son choix avec des commandes type conda install ou pip install\nPar exemple pip install numpy\nPour avoir la liste des packages installés dans l’environnemnet courant conda list\nOn quitte l’environnement avec la commande conda deactivate. Quand vous reviendrez à votre environnement (conda activate) vous aurez ces packages installés.\nIl est possible de fournir une liste de packages à installer dans l’environnement sous forme d’un fichier txt.\n\nconda create --name finistrbis python=3.11 pip \nconda activate finistrbis\npip install -r requirements.txt\n\nLe fichier requirement.txt a la forme suivante\n\n\njupyter==1.0.0\nnumpy==2.1.0\n\n\n\nAutres commandes\nIl est possible de supprimer un environnement avec la commande\nLa liste des commandes conda est disponible dans la cheatsheet conda"
  },
  {
    "objectID": "python_practice.html#créer-un-environnement-avec-virtual-env-sous-windows",
    "href": "python_practice.html#créer-un-environnement-avec-virtual-env-sous-windows",
    "title": "Bien démarrer avec Python",
    "section": "Créer un environnement avec virtual env sous Windows",
    "text": "Créer un environnement avec virtual env sous Windows"
  }
]