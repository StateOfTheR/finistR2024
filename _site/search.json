[
  {
    "objectID": "simulator.html",
    "href": "simulator.html",
    "title": "Setting up simulations in R",
    "section": "",
    "text": "simulator\nsimpr\nDeclareDesign\nMonteCarlo\nsimChef\nsimEngine"
  },
  {
    "objectID": "Readme.html",
    "href": "Readme.html",
    "title": "Ateliers Finist’R 2024",
    "section": "",
    "text": "Ateliers Finist’R 2024\n\n\n\nwebsite\n\n\nL’atelier Finist’R 2024 – ou bootcamp R s’est déroulé à la station biologique de Roscoff du 19 au 23 août 2024.\nIl s’agit de la huitième édition de l’atelier Finist’R. Cet atelier réunit annuellement un groupe de chercheurs, ingénieurs, doctorants, tous utilisateurs avancés de R et dévelopeurs de paquets pour explorer les dernières fonctionalités du logiciel et les nouvelles pratiques de développement. A l’issu de l’atelier le collectif produit une synthèse de cette veille logiciel de manière à progresser collectivement dans l’utilisation du logiciel mais surtout dans la production d’outils statistiques à destination de la communauté.\nLa restitution se fait sous forme de site web. Le site de l’édition 2024 sera disponible ici"
  },
  {
    "objectID": "instructions.html",
    "href": "instructions.html",
    "title": "Instructions pour le dépot sur le site web",
    "section": "",
    "text": "Protocole https :\ngit clone https://github.com/StateOfTheR/finistR2024.git\nAvec clés SSH : git clone git@github.com:git@github.com:StateOfTheR/finistR2024.git\n\n\n(Lien vers une doc complète)[https://docs.github.com/fr/get-started/getting-started-with-git/managing-remote-repositories]."
  },
  {
    "objectID": "instructions.html#cloner-le-dépôt-git-du-bootcamp",
    "href": "instructions.html#cloner-le-dépôt-git-du-bootcamp",
    "title": "Instructions pour le dépot sur le site web",
    "section": "",
    "text": "Protocole https :\ngit clone https://github.com/StateOfTheR/finistR2024.git\nAvec clés SSH : git clone git@github.com:git@github.com:StateOfTheR/finistR2024.git\n\n\n(Lien vers une doc complète)[https://docs.github.com/fr/get-started/getting-started-with-git/managing-remote-repositories]."
  },
  {
    "objectID": "instructions.html#processus-de-mise-en-commun-des-ateliers",
    "href": "instructions.html#processus-de-mise-en-commun-des-ateliers",
    "title": "Instructions pour le dépot sur le site web",
    "section": "Processus de mise en commun des ateliers",
    "text": "Processus de mise en commun des ateliers\n\nCréer une branche propre à l’atelier nommée explicitement mon_nom_parlant et basculer dessus\n\ngit checkout -b mon_nom_parlant\n\nCréer un fichier Rmarkdown de restitution de votre atelier fichier.Rmd dans votre branche\n\ngit add fichier.Rmd\ngit commit -m \"restitution atelier\"\n\nPousser vos modifications sur le serveur distant\n\ngit  push --set-upstream origin mon_nom_parlant ou\ngit  push\n\nFaire une pull request (PR) sur github\nindiquer dans le message de la PR la liste des packages ou autres besoins\nQuand la PR passe les tests, demander le merge.\ncorriger les erreurs éventuelles dans la compilation du Rmarkdown\nles admins peuvent avoir à mettre à jour l’image docker"
  },
  {
    "objectID": "instructions.html#détails-du-fonctionnement",
    "href": "instructions.html#détails-du-fonctionnement",
    "title": "Instructions pour le dépot sur le site web",
    "section": "Détails du fonctionnement",
    "text": "Détails du fonctionnement\n\nLe docker\n(Lien vers la fiche pense-bête)[https://www.docker.com/sites/default/files/d8/2019-09/docker-cheat-sheet.pdf]\nPour créer des images Docker en local sur sa machine, voici une liste de commandes utiles\n\nPour construire une image docker, il faut créer un fichier Dockerfile qui contient la recette du Docker. Pour ce site le ficher Dockerfile a la forme suivante\n\n\n\n\nFROM rocker/geospatial:4.4\nRUN export DEBIAN_FRONTEND=noninteractive; apt-get -y update \\\n && apt-get install -y pandoc \\\n    pandoc-citeproc\nRUN R -e \"install.packages('remotes')\"\nRUN R -e \"install.packages('microbenchmark')\"\nRUN R -e \"install.packages('purrr')\" # map function\nENV R_CRAN_WEB=\"https://cran.rstudio.com/\"\nRUN R -e \"install.packages('cowplot')\" # GET function\nRUN R -e \"install.packages('torch')\"\nRUN R -e \"torch::install_torch(type = 'cpu')\"\nRUN R -e \"install.packages('PLNmodels')\"\nRUN R -e \"install.packages('torchvision')\"\n\nRUN apt-get update \\\n && apt-get install -y --no-install-recommends \\\n  mercurial gdal-bin libgdal-dev gsl-bin libgsl-dev \\\n  libc6-i386\n\nRUN R -e \"install.packages('reticulate')\"\nRUN R -e \"install.packages(c('inlabru', 'lme4', 'ggpolypath', 'RColorBrewer', 'geoR'))\"\nRUN R -e \"install.packages(c('poissonreg'))\"\nRUN apt-get install -y --no-install-recommends unzip python3-pip dvipng pandoc wget git make python3-venv && \\\n    pip3 install jupyter jupyter-cache flatlatex matplotlib && \\\n    apt-get --purge -y remove texlive.\\*-doc$ && \\\n    apt-get clean\n\n\npuis demander la construction de l’image à l’aide de la commande\n\n docker build -t nom_depot_dockerhub/nom_du_repo:version  . ## avec un nom\n\net enfin pousser sur Dockerhub\n\n docker push nom_depot_dockerhub/nom_du_repo:version\n\n\n\nLes actions\nDans les action de Github, on peut spécifier un container docker à utiliser, c’est ce que fait la ligne container du fichier d’action suivant, utiliser pour créer ce site web\n\n\nname: website\non:\n  push:\n    branches:\n      - main\n\njobs:\n  build:\n    name: Build website with rmarkdown\n    runs-on: ubuntu-latest\n    container: stateofther/r-finistr2024:0.1\n\n    steps:\n      - name: Checkout repository\n        uses: actions/checkout@v2\n      - name: Additional Packages\n        run: Rscript -e \"install.packages(c('tictoc'))\"\n      - name: Generate slides\n        run: \"quarto render\"\n      - name: GitHub Pages action\n        uses: peaceiris/actions-gh-pages@v3\n        with:\n          github_token: ${{ secrets.GITHUB_TOKEN }}\n          publish_dir: ./_site"
  },
  {
    "objectID": "simulator.html#list-of-packages-for-data-simulation",
    "href": "simulator.html#list-of-packages-for-data-simulation",
    "title": "Setting up simulations in R",
    "section": "",
    "text": "simulator\nsimpr\nDeclareDesign\nMonteCarlo\nsimChef\nsimEngine"
  },
  {
    "objectID": "simulator.html#how-to-choose",
    "href": "simulator.html#how-to-choose",
    "title": "Setting up simulations in R",
    "section": "How to choose ?",
    "text": "How to choose ?\n\nNumber of dependencies\nNumber of reverse dependencies\nDate of latest commit\nDate of last release\nIs it on CRAN or only on Github?\nWho developed it?\nPhilosophy\n\n\n\n\n\nVersion\nNumber of dependencies\nNumber of reverse dependencies\nDate of latest commit\nDate of latest release\nDocumentation quality\nOn CRAN?\nDevelopers\n\n\n\n\nDeclareDesign\n1.0.10\n2\n1\n2024-04-13\n2024-04-21\n\nYes\nGraeme Blair\n\n\nMonteCarlo\n1.0.6\n6\n0\n2019-01-31\n2019-01-31\n\nYes\nChristian Hendrik Leschinski\n\n\nsimChef\n0.1.0\n22\n0\n2024-03-20\nNA\n\nNo\nTiffany Tang, James Duncan\n\n\nsimEngine\n1.4.0\n6\n0\n2024-04-13\n2024-04-04\n\nYes\nAvi Kenny, Charles Wolock\n\n\nsimpr\n0.2.6\n11\n0\n2024-07-16\n2023-04-26\n\nYes\nEthan Brown\n\n\nsimulator\n0.2.5\n1\n0\n2023-02-02\n2023-02-04\n\nYes\nJacob Bien"
  },
  {
    "objectID": "simulator.html#parallelization-capability",
    "href": "simulator.html#parallelization-capability",
    "title": "Setting up simulations in R",
    "section": "Parallelization capability",
    "text": "Parallelization capability"
  },
  {
    "objectID": "simulator.html#simpr",
    "href": "simulator.html#simpr",
    "title": "Setting up simulations in R",
    "section": "simpr",
    "text": "simpr\n\n\n\n\n\n\nProblem\n\n\n\n\nStudy: Pre-post comparison of the “Triglicious” intervention;\nResearch question: Did Triglicious improve students’ math scores?\nMethod: Paired t-test\n\n\n\n\nUsual base R solution\n\n## Set up parameters\nns &lt;- c(100L, 150L, 200L)\nmean_diffs &lt;- c(10, 20, 30)\nsds &lt;- c(50, 100)\nreps &lt;- 10L\n\n## Bring together into data frame\nresults_template &lt;- expand.grid(\n  n = ns, \n  mean_diff = mean_diffs, \n  sd = sds, \n  p.value = NA_real_\n)\nbase_r_sim &lt;- results_template[rep(1:nrow(results_template), each = reps), ]\n\n## Loop over rows of the data frame and calculate the p-value\nfor (i in 1:nrow(results_template)) {\n  params &lt;- base_r_sim[i,]\n  pre &lt;- rnorm(params$n, 0, params$sd)\n  post &lt;- pre + rnorm(params$n, params$mean_diff, params$sd)\n  base_r_sim$p.value[i] &lt;- t.test(pre, post)$p.value\n}\n\n## Display table output\nDT::datatable(base_r_sim)\n\n\n\n\n\nWhat simpr author advocates is bad:\n\nMost important pieces (data generating process, model specification, definitions, varying parameters) are hidden;\nWhat if there is an error?\nWhat about parallelization?\nIs this code sufficiently readable? Without the comments?\n\n\n\nSolution via simpr\n\n## Specify pre and post scores that differ by a given amount\nspecify(\n  pre  = ~ rnorm(n, 0, sd), \n  post = ~ pre + rnorm(n, mean_diff, sd)) |&gt; \n  ## Define parameters that can be varied\n  define(n = 100, mean_diff = 10, sd = 50) |&gt; \n  ## Generate datasets\n  generate(100) |&gt; \n  ## Fit datasets\n  fit(t = ~t.test(post, pre, paired = TRUE)) |&gt; \n  ## Collect results\n  tidy_fits() |&gt; \n  DT::datatable()\n\n\n\n\n\n\n\nA complete solution with varying parameters\n\nsim_vary &lt;- specify(\n  pre  = ~ rnorm(n, 0, sd),\n  post = ~ pre + rnorm(n, mean_diff, sd)\n) |&gt; \n  define(\n    n = c(100, 150, 200), \n    mean_diff = c(10, 20, 30), \n    sd = c(50, 100)\n  ) |&gt; \n  generate(100, .progress = TRUE) |&gt; \n  fit(t = ~t.test(post, pre, paired = TRUE)) |&gt; \n  tidy_fits()\n\nsim_vary |&gt; \n  dplyr::group_by(n, mean_diff, sd) |&gt; \n  dplyr::summarize(Power = mean(p.value &lt; 0.05)) |&gt; \n  ggplot(aes(n, Power)) + \n  geom_col() + \n  facet_grid(rows = vars(sd), cols = vars(mean_diff)) + \n  theme_bw()\n\n`summarise()` has grouped output by 'n', 'mean_diff'. You can override using\nthe `.groups` argument.\n\n\n\n\n\n\n\n\n\n\n\nPhilosophy\nThe simpr workflow, inspired by the infer package, distills a simulation study into five primary steps:\n\nspecify() your data-generating process;\ndefine() parameters that you want to systematically vary across your simulation design (e.g. n, effect size);\ngenerate() the simulation data;\nfit() models to your data (e.g. lm());\ntidy_fits() for consolidating results using broom::tidy(), such as computing power or Type I Error rates.\n\n\n\nReproducible workflows\n\nSame seed, same results;\nCan regenerate just a specific subset to see what happened in that particular dataset or fit;\nUseful in debugging and diagnosing unexpected results, etc.\n\n\nFiltering full simulation\n\nset.seed(500)\n\nspecify(a = ~ runif(6)) |&gt; \n  generate(3) |&gt; \n  dplyr::filter(.sim_id == 3)\n\nfull tibble\n--------------------------\n# A tibble: 1 × 3\n  .sim_id   rep sim             \n    &lt;int&gt; &lt;int&gt; &lt;list&gt;          \n1       3     3 &lt;tibble [6 × 1]&gt;\n\nsim[[1]]\n--------------------------\n# A tibble: 6 × 1\n      a\n  &lt;dbl&gt;\n1 0.371\n2 0.959\n3 0.633\n4 0.177\n5 0.803\n6 0.133\n\n\n\n\nSimulate subset only\n\nset.seed(500)\n\nspecify(a = ~ runif(6)) |&gt; \n  generate(3, .sim_id == 3)\n\nfull tibble\n--------------------------\n# A tibble: 1 × 3\n  .sim_id   rep sim             \n    &lt;int&gt; &lt;int&gt; &lt;list&gt;          \n1       3     3 &lt;tibble [6 × 1]&gt;\n\nsim[[1]]\n--------------------------\n# A tibble: 6 × 1\n      a\n  &lt;dbl&gt;\n1 0.371\n2 0.959\n3 0.633\n4 0.177\n5 0.803\n6 0.133\n\n\n\n\nBenchmarking\n\nset.seed(500)\n\nbench::mark(\n  all = specify(a = ~ runif(6)) |&gt; \n    generate(1000) |&gt; \n    dplyr::filter(.sim_id == 1000),\n  subset = specify(a = ~ runif(6)) |&gt; \n    generate(1000, .sim_id == 1000),\n  check = FALSE, min_iterations = 10L, relative = TRUE\n)\n\nWarning: Some expressions had a GC in every iteration; so filtering is\ndisabled.\n\n\n# A tibble: 2 × 6\n  expression   min median `itr/sec` mem_alloc `gc/sec`\n  &lt;bch:expr&gt; &lt;dbl&gt;  &lt;dbl&gt;     &lt;dbl&gt;     &lt;dbl&gt;    &lt;dbl&gt;\n1 all         56.8   59.3       1        1        1   \n2 subset       1      1        55.9      1.28     1.19\n\n\n\n\n\nOther features\n\n\n\n\n\n\nData munging\n\n\n\nAdd per_sim() |&gt; after generate() in your simulation pipeline and then any tidyverse function that will apply to every simulation dataset:\n\nspecify(\n  pre  = ~ rnorm(n, 0, sd), \n  post = ~ pre + rnorm(n, mean_diff, sd)\n) |&gt; \n  define(\n    n = c(100, 150, 200), \n    mean_diff = c(10, 20, 30), \n    sd = c(50, 100)\n  ) |&gt; \n  generate(1000, .progress = TRUE) |&gt; \n  ## Apply tidyverse functions to every simulation dataset\n  per_sim() |&gt; \n  ## Mutate to add a range restriction\n  dplyr::mutate(dplyr::across(dplyr::everything(), dplyr::case_when(\n    pre &gt;  100 ~ 100,\n    pre &lt; -100 ~ -100,\n    .default   ~ pre\n  ))) |&gt; \n  fit(t = ~ t.test(post, pre, paired = TRUE)) |&gt; \n  tidy_fits()\n\n\n\n\n\n\n\n\n\nError handling\n\n\n\n\nCan change error handling to keep going with simulation, stop simulation, or to skip warnings;\nDebug and recovery options to enter into simulation during error.\n\n\n\n\n\n\n\n\n\nBuilt-in parallelization\n\n\n\nJust add\n\nlibrary(future)\nplan(multisession, workers = 6) # or however many cores are reasonable to use\n\nand your simulation pipeline (actually the generate() function) will run in parallel.\n\n\n\n\nPros & Cons\n\n\n\n\n\n\n\n\nPros\n\n\n\n\ntidyverse friendly;\nbeginner friendly;\nReproducibility, error handling built in;\nGeneral-purpose, customizable and can handle arbitrary R code.\n\n\n\n\n\n\n\n\n\n\nCons\n\n\n\n\nLikely not as fast/optimized as some alternatives;\nNot as customizable/powerful as DeclareDesign;\nNot specifically set up for any particular application (no MC errors, plots, reports, specific models…)."
  }
]